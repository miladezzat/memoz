var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/FuzzySearchOptions.html",[0,0.615,1,1.309]],["body/interfaces/FuzzySearchOptions.html",[0,0.809,1,1.898,2,1.103,3,0.412,4,0.412,5,0.315,6,1.236,7,0.189,8,0.471,9,0.784,10,2.678,11,3.061,12,2.371,13,2.678,14,2.678,15,1.066,16,0.566,17,0.042,18,1.431,19,0.548,20,2.778,21,2.015,22,0.981,23,2.05,24,1.236,25,1.236,26,1.236,27,1.236,28,1.236,29,1.396,30,1.396,31,2.8,32,2.852,33,2.05,34,1.816,35,1.177,36,1.898,37,1.396,38,1.396,39,1.396,40,1.396,41,1.396,42,1.245,43,0.626,44,1.596,45,2.43,46,1.62,47,1.541,48,1.103,49,1.396,50,2.43,51,1.103,52,1.396,53,0.032,54,2.05,55,1.103,56,1.103,57,2.05,58,1.396,59,1.396,60,2.05,61,2.05,62,1.396,63,1.396,64,2.05,65,1.236,66,2.05,67,1.396,68,2.05,69,2.526,70,0.989,71,1.236,72,1.236,73,2.678,74,2.05,75,1.396,76,2.43,77,2.344,78,2.05,79,2.05,80,0.766,81,2.43,82,0.89,83,2.116,84,1.396,85,0.989,86,1.236,87,2.05,88,1.712,89,1.396,90,1.236,91,1.395,92,1.596,93,1.722,94,2.116,95,2.43,96,0.63,97,1.92,98,1.453,99,1.396,100,1.396,101,1.62,102,1.596,103,1.396,104,1.396,105,1.596,106,1.236,107,1.596,108,1.396,109,1.596,110,0.412,111,1.396,112,1.236,113,1.103,114,1.236,115,1.236,116,1.396,117,1.396,118,1.236,119,1.816,120,1.92,121,1.177,122,1.396,123,1.62,124,0.989,125,1.236,126,1.453,127,1.396,128,0.856,129,1.06,130,0.722,131,1.62,132,1.236,133,1.396,134,1.396,135,2.114,136,1.396,137,2.43,138,2.678,139,1.396,140,1.396,141,1.596,142,1.596,143,1.396,144,1.596,145,1.396,146,1.236,147,1.396,148,1.596,149,1.62,150,1.396,151,2.344,152,1.236,153,1.236,154,0.989,155,1.596,156,1.396,157,1.396,158,2.778,159,1.396,160,1.103,161,0.989,162,1.396,163,1.236,164,1.236,165,1.236,166,0.023]],["title/classes/IndexManager.html",[167,0.106,168,2.111]],["body/classes/IndexManager.html",[3,0.616,4,0.616,5,0.471,7,0.408,8,0.526,9,0.679,16,0.522,17,0.042,19,0.611,22,0.799,42,0.971,43,0.584,53,0.03,80,0.78,96,0.541,110,0.939,128,1.412,156,2.087,160,1.65,166,0.035,167,0.12,168,3.439,169,0.971,170,4.513,171,2.087,172,1.256,173,4.892,174,1.26,175,1.863,176,2.516,177,4.406,178,4.406,179,4.406,180,2.224,181,1.124,182,1.705,183,2.787,184,2.787,185,4.406,186,2.819,187,3.395,188,1.399,189,1.256,190,1.479,191,4.406,192,2.787,193,3.183,194,1.4,195,4.406,196,2.787,197,4.016,198,1.4,199,1.4,200,3.395,201,3.395,202,1.124,203,3.395,204,1.189,205,1.727,206,3.395,207,3.395,208,3.395,209,3.395,210,3.395,211,3.395,212,3.395,213,3.395,214,3.395]],["title/classes/Indexing.html",[167,0.106,193,1.847]],["body/classes/Indexing.html",[3,0.568,4,0.568,5,0.435,7,0.418,8,0.499,9,0.725,16,0.569,17,0.042,19,0.435,22,0.758,42,0.896,43,0.674,51,1.523,53,0.028,80,0.72,110,0.91,120,2.71,123,2.668,126,1.822,128,1.464,129,1.495,160,2.54,166,0.028,167,0.111,169,0.896,172,1.45,174,1.195,175,1.795,180,1.843,181,1.153,182,1.745,188,1.495,189,1.342,190,2.05,193,3.085,198,1.595,199,0.996,202,1.081,204,1.081,205,1.967,215,2.572,216,3.431,217,4.18,218,4.18,219,1.366,220,4.18,221,4.18,222,3.134,223,4.18,224,3.134,225,4.18,226,3.134,227,4.18,228,3.134,229,4.18,230,3.134,231,3.134,232,3.134,233,4.18,234,4.704,235,3.134,236,3.134,237,3.134,238,3.134,239,0.996,240,3.134,241,3.134,242,3.134,243,2.572,244,2.572,245,3.134,246,3.134,247,3.431,248,3.431,249,3.134,250,3.134,251,3.134,252,3.134]],["title/classes/LRUCache.html",[167,0.106,253,1.46]],["body/classes/LRUCache.html",[0,0.353,3,0.313,4,0.313,5,0.239,7,0.144,8,0.323,9,0.754,15,0.621,16,0.565,17,0.042,18,1.415,19,0.57,22,0.605,43,0.49,47,0.86,53,0.018,70,0.751,88,1.665,91,0.608,96,0.82,110,0.957,121,0.608,129,1.609,130,1.061,161,1.179,166,0.018,167,0.061,169,0.493,172,1.511,174,0.773,176,1.837,180,1.482,181,0.621,182,1.823,188,1.388,189,1.246,194,1.578,198,1.712,202,1.213,204,1.163,205,1.06,219,0.751,239,1.5,253,1.622,254,3.537,255,0.838,256,1.455,257,2.74,258,2.74,259,2.642,260,2.74,261,2.68,262,2.74,263,3.371,264,3.371,265,3.053,266,3.103,267,2.705,268,2.705,269,3.063,270,1.818,271,2.705,272,2.705,273,2.705,274,3.103,275,3.103,276,3.103,277,2.22,278,2.346,279,2.74,280,2.74,281,1.663,282,1.837,283,2.705,284,1.415,285,2.22,286,1.724,287,2.22,288,1.724,289,1.724,290,1.724,291,1.724,292,1.724,293,1.724,294,1.724,295,1.724,296,1.724,297,2.22,298,4.576,299,1.724,300,2.22,301,1.724,302,1.724,303,1.724,304,1.179,305,1.663,306,1.724,307,3.873,308,2.22,309,3.103,310,1.724,311,1.818,312,2.22,313,1.724,314,1.724,315,1.473,316,1.415,317,2.901,318,1.724,319,1.724,320,1.724,321,1.663,322,1.724,323,1.06,324,1.724,325,1.724,326,1.724,327,1.724,328,1.724,329,1.724,330,1.724,331,1.724,332,2.058,333,1.818,334,1.647,335,1.415,336,1.415,337,1.415,338,1.212,339,1.212,340,1.212,341,1.212,342,1.415,343,2.052,344,2.74,345,2.22,346,2.74,347,1.415,348,2.324,349,2.22,350,1.415,351,2.74,352,2.22,353,2.22,354,1.415,355,1.415,356,1.415,357,1.663,358,3.371,359,2.74,360,3.103,361,2.22,362,1.415,363,2.22,364,1.415,365,3.103,366,2.22,367,1.415,368,1.415,369,1.415,370,1.415,371,2.22,372,1.415,373,1.415,374,1.415,375,1.415,376,1.415,377,1.415,378,1.415,379,1.415,380,3.103,381,2.22,382,1.06,383,1.663,384,1.415,385,1.415,386,1.415,387,1.415,388,1.415,389,1.415,390,1.212,391,2.22,392,3.063,393,2.346,394,1.415,395,0.939]],["title/interfaces/LRUCacheOptions.html",[0,0.615,282,1.46]],["body/interfaces/LRUCacheOptions.html",[0,0.474,2,1.125,3,0.42,4,0.42,5,0.321,7,0.193,8,0.403,9,0.718,15,0.777,16,0.492,17,0.042,18,1.456,19,0.321,22,0.725,43,0.403,47,0.736,53,0.023,70,1.009,88,1.723,91,0.817,96,0.778,121,0.817,129,1.486,130,1.27,161,1.474,166,0.023,167,0.082,172,1.41,176,1.125,180,1.326,181,0.532,194,1.676,198,1.643,202,1.285,204,1.248,239,1.552,253,1.644,254,1.423,255,1.125,256,1.009,257,1.9,258,1.9,259,2.957,260,1.9,261,3.101,262,1.9,263,4.009,264,4.009,265,3.242,266,1.9,269,2.809,270,1.26,274,1.9,275,1.9,276,1.9,278,1.627,279,1.9,280,1.9,281,1.423,282,1.942,285,1.9,287,1.9,297,1.9,298,4.329,300,1.9,304,1.009,305,1.423,307,3.838,308,1.9,309,2.776,311,1.842,312,1.9,317,3.101,321,1.423,332,2.393,333,2.176,334,1.916,335,1.9,336,1.9,337,1.9,338,1.627,339,1.627,340,1.627,341,1.627,342,1.9,343,2.457,344,3.281,345,2.776,346,3.281,347,1.9,348,2.703,349,2.776,350,1.9,351,3.281,352,2.776,353,2.776,354,1.9,355,1.9,356,1.9,357,2.08,358,3.838,359,3.281,360,3.608,361,2.776,362,1.9,363,2.776,364,1.9,365,3.608,366,2.776,367,1.9,368,1.9,369,1.9,370,1.9,371,2.776,372,1.9,373,1.9,374,1.9,375,1.9,376,1.9,377,1.9,378,1.9,379,1.9,380,3.608,381,2.776,382,1.423,383,2.08,384,1.9,385,1.9,386,1.9,387,1.9,388,1.9,389,1.9,390,1.627,391,2.776,392,3.433,393,2.809,394,1.9,395,1.26]],["title/interfaces/MemozOptions.html",[0,0.615,146,1.636]],["body/interfaces/MemozOptions.html",[0,0.809,1,1.722,2,1.103,3,0.412,4,0.412,5,0.315,6,1.236,7,0.189,8,0.471,9,0.767,10,1.396,11,1.596,12,1.236,13,1.396,14,1.396,15,0.908,16,0.562,17,0.042,18,1.37,19,0.315,20,1.596,21,1.901,22,0.981,23,2.05,24,1.236,25,1.236,26,1.236,27,1.236,28,1.236,29,1.396,30,1.396,31,2.8,32,2.852,33,2.05,34,1.816,35,1.395,36,1.898,37,1.396,38,1.396,39,1.396,40,1.396,41,1.396,42,1.245,43,0.645,44,1.596,45,2.43,46,1.62,47,1.593,48,1.103,49,1.396,50,2.43,51,1.103,52,1.396,53,0.032,54,2.05,55,1.103,56,1.103,57,2.05,58,1.396,59,1.396,60,2.05,61,2.05,62,1.396,63,1.396,64,2.05,65,1.236,66,2.05,67,1.396,68,2.05,69,2.526,70,0.989,71,1.236,72,1.236,73,2.678,74,2.05,75,1.396,76,2.43,77,2.344,78,2.05,79,2.43,80,0.766,81,2.678,82,0.89,83,2.116,84,1.396,85,0.989,86,1.236,87,2.05,88,1.883,89,1.396,90,1.236,91,1.395,92,1.596,93,2.022,94,2.116,95,2.43,96,0.63,97,1.92,98,1.453,99,1.396,100,1.396,101,1.62,102,1.596,103,1.396,104,1.396,105,1.596,106,1.236,107,1.596,108,1.396,109,1.596,110,0.412,111,1.396,112,1.236,113,1.103,114,1.236,115,1.236,116,1.396,117,1.396,118,1.236,119,1.816,120,1.92,121,1.177,122,1.396,123,1.62,124,0.989,125,1.236,126,1.453,127,1.396,128,0.856,129,1.06,130,0.722,131,1.62,132,1.236,133,1.396,134,1.396,135,2.114,136,1.396,137,2.852,138,2.678,139,1.396,140,1.396,141,1.596,142,1.596,143,1.396,144,2.344,145,2.05,146,1.816,147,2.05,148,2.344,149,2.116,150,2.678,151,3.061,152,1.816,153,2.371,154,1.453,155,2.344,156,2.05,157,2.678,158,2.778,159,1.396,160,1.103,161,0.989,162,1.396,163,1.236,164,1.236,165,1.236,166,0.023,396,0.989]],["title/classes/Mutex.html",[154,1.309,167,0.106]],["body/classes/Mutex.html",[3,0.696,4,0.696,5,0.532,7,0.32,8,0.568,9,0.532,15,0.881,16,0.522,17,0.042,19,0.661,22,0.863,53,0.032,96,0.759,101,2.314,110,0.696,130,1.514,131,1.864,132,2.089,154,2.534,166,0.032,167,0.136,169,1.097,172,1.329,174,1.362,175,1.646,182,1.514,188,1.362,189,0.985,194,1.514,198,1.219,202,1.094,204,0.881,311,3.032,397,3.149,398,4.762,399,4.762,400,3.836,401,4.762,402,3.836,403,5.415,404,3.836,405,3.836,406,4.762,407,3.347,408,3.836,409,3.149,410,3.836,411,3.836,412,3.909,413,3.836,414,3.836,415,3.836,416,3.836,417,3.836,418,3.836]],["title/classes/PersistenceManager.html",[167,0.106,419,2.111]],["body/classes/PersistenceManager.html",[3,0.565,4,0.565,5,0.695,7,0.26,8,0.497,9,0.432,16,0.505,17,0.042,19,0.432,22,0.755,42,1.191,43,0.597,53,0.028,80,0.716,88,1.767,93,1.815,96,0.664,110,0.755,113,1.514,121,1.1,128,1.069,147,2.561,153,2.985,166,0.028,167,0.11,169,0.891,171,1.916,172,1.448,174,1.191,175,1.706,176,1.514,180,2.148,182,1.706,184,2.558,186,2.841,188,0.891,189,0.8,194,1.658,199,1.491,204,1.15,219,1.358,243,2.558,269,2.191,270,2.923,311,2.726,323,1.916,390,2.191,395,2.726,419,3.297,420,4.5,421,5.57,422,5.007,423,5.007,424,2.928,425,4.164,426,3.116,427,3.116,428,3.116,429,4.164,430,3.116,431,3.116,432,3.116,433,3.116,434,2.191,435,5.007,436,3.116,437,3.116,438,4.69,439,3.116,440,3.116,441,3.116,442,3.116,443,3.116,444,3.116,445,3.116,446,3.116,447,3.116,448,4.164,449,1.697,450,3.116,451,3.116,452,3.116,453,3.116,454,3.116,455,3.116,456,3.116,457,3.116,458,2.558,459,3.419,460,3.116,461,3.116,462,3.116]],["title/classes/QueryBuilder.html",[167,0.106,463,1.847]],["body/classes/QueryBuilder.html",[3,0.327,4,0.327,5,0.25,7,0.15,8,0.334,9,0.683,15,1.02,16,0.552,17,0.042,18,1.291,19,0.582,22,0.508,43,0.53,53,0.019,79,1.108,80,0.414,82,0.706,88,0.988,90,2.417,96,0.784,97,0.875,106,0.981,110,0.84,112,0.981,121,0.988,128,1.229,130,1.694,166,0.023,167,0.122,169,0.515,172,1.475,174,0.982,175,1.784,181,0.414,182,1.753,188,1.406,189,1.189,190,2.446,194,1.333,198,1.333,199,0.89,202,1.258,204,1.02,219,1.22,239,1.333,256,1.22,270,2.417,277,2.298,304,1.687,311,3.04,323,2.578,334,1.22,338,1.266,339,1.266,340,1.266,341,1.266,343,1.721,395,1.524,412,2.818,463,2.578,464,3.413,465,3.902,466,1.266,467,2.799,468,4.193,469,3.433,470,4.193,471,2.869,472,4.632,473,4.193,474,4.789,475,3.872,476,3.872,477,2.799,478,2.298,479,3.872,480,3.433,481,2.298,482,1.801,483,2.799,484,2.298,485,1.801,486,1.801,487,1.801,488,1.801,489,1.801,490,1.801,491,1.801,492,1.801,493,4.193,494,1.801,495,3.433,496,4.632,497,1.801,498,2.799,499,1.801,500,1.801,501,2.799,502,1.801,503,1.801,504,2.799,505,1.801,506,2.799,507,1.801,508,1.801,509,1.801,510,2.799,511,3.433,512,2.799,513,1.801,514,2.799,515,3.433,516,3.433,517,3.433,518,1.801,519,1.801,520,1.801,521,2.799,522,2.298,523,1.721,524,1.801,525,1.801,526,1.801,527,2.799,528,2.799,529,1.801,530,1.479,531,1.801,532,1.801,533,1.801,534,1.968,535,1.479,536,1.801,537,1.801,538,1.801,539,3.872,540,1.801,541,1.801,542,3.433,543,3.433,544,1.801,545,3.433,546,1.801,547,1.801,548,2.298,549,1.801,550,2.298,551,1.801,552,2.298,553,1.479,554,1.801,555,1.801,556,1.801,557,1.801,558,1.479,559,3.433,560,1.801,561,1.801,562,1.801,563,1.801,564,1.801,565,1.801,566,1.801,567,1.801,568,1.801,569,1.801,570,2.298,571,1.801,572,1.801,573,1.801,574,1.801,575,1.801,576,1.801,577,1.479,578,1.801,579,1.801,580,3.872,581,2.799,582,1.801,583,1.266,584,3.433,585,1.801,586,1.801,587,1.801,588,1.801,589,1.801]],["title/classes/QueryCache.html",[167,0.106,471,1.636]],["body/classes/QueryCache.html",[0,0.469,3,0.415,4,0.415,5,0.318,7,0.191,8,0.4,9,0.742,16,0.52,17,0.042,18,1.372,19,0.551,21,1.556,22,0.72,36,1.905,43,0.638,47,1.262,53,0.023,55,1.63,80,0.526,82,0.897,85,0.997,96,0.801,110,0.934,124,1.462,128,1.372,129,1.842,130,1.262,135,1.905,161,1.905,166,0.023,167,0.081,169,0.655,172,1.35,174,0.959,175,1.742,181,0.526,182,1.638,188,1.25,189,1.122,194,1.39,198,1.39,199,1.066,202,0.771,204,0.771,205,1.315,219,0.997,239,1.39,253,2.262,255,1.112,256,2.557,259,2.162,261,2.991,265,3.535,281,2.062,282,1.63,284,1.879,304,1.905,305,2.062,315,1.246,316,1.879,317,3.233,321,2.062,323,2.441,332,2.162,333,1.246,334,1.462,348,1.407,357,1.407,382,1.407,383,1.407,396,1.905,449,1.246,471,2.534,590,3.696,591,3.259,592,3.259,593,3.589,594,3.354,595,2.688,596,3.354,597,2.754,598,3.589,599,2.754,600,2.289,601,2.289,602,2.754,603,3.073,604,2.358,605,2.754,606,3.821,607,3.821,608,2.754,609,2.754,610,2.754,611,2.289,612,2.754,613,2.754,614,2.754,615,2.754,616,2.754,617,2.754,618,2.754,619,2.062,620,2.754,621,3.589,622,2.688,623,2.062,624,2.754,625,2.289,626,2.754,627,2.754,628,1.827,629,2.358,630,2.358,631,2.754,632,1.879,633,1.609,634,1.879,635,1.879,636,1.879,637,3.419,638,1.609,639,1.879,640,2.754,641,2.754,642,1.609,643,1.609]],["title/interfaces/QueryCacheOptions.html",[0,0.615,595,1.847]],["body/interfaces/QueryCacheOptions.html",[0,0.584,2,1.387,3,0.518,4,0.518,5,0.396,7,0.238,8,0.468,9,0.744,16,0.396,17,0.042,18,1.401,19,0.396,21,1.538,22,0.813,36,1.71,43,0.576,47,1.247,53,0.027,55,1.387,80,0.656,82,1.119,85,1.244,96,0.715,110,0.813,124,1.244,128,1.343,129,1.799,130,1.425,135,1.71,161,1.71,166,0.027,167,0.101,172,1.151,175,1.535,181,0.656,194,1.247,198,1.247,199,1.247,202,0.902,204,0.902,239,1.247,253,2.347,255,1.387,256,2.504,259,2.848,261,2.969,265,3.573,281,1.755,282,2.179,304,1.71,305,1.755,317,3.113,321,1.755,332,2.756,333,2.442,334,1.71,348,1.755,357,1.755,382,1.755,383,1.755,449,1.554,471,2.442,590,2.006,591,2.343,592,2.343,593,2.343,595,2.757,597,2.343,598,3.221,599,2.343,602,2.343,603,2.758,604,2.006,605,2.343,606,3.964,607,3.964,608,2.343,609,2.343,610,2.343,612,2.343,613,2.343,614,2.343,615,2.343,616,2.343,617,2.343,618,2.343,619,1.755,620,2.343,621,3.221,622,2.413,623,1.755,624,2.343,626,2.343,627,2.343,628,1.554,629,2.006,630,2.006,631,2.343,632,3.221,633,2.006,634,2.343,635,2.343,636,2.343,637,3.677,638,2.006,639,2.343,640,3.221,641,3.221,642,2.006,643,2.006]],["title/classes/SearchEngine.html",[167,0.106,644,2.111]],["body/classes/SearchEngine.html",[1,1.63,3,0.375,4,0.375,5,0.287,7,0.172,8,0.371,9,0.651,12,2.648,13,1.914,15,0.859,16,0.534,17,0.042,18,1.439,19,0.675,22,0.678,31,1.127,43,0.694,47,1.189,53,0.021,56,2.278,65,1.127,70,0.902,80,0.475,82,0.811,86,1.127,94,1.006,96,0.596,108,1.272,110,0.85,112,2.037,125,1.695,143,3.077,159,1.272,160,1.818,163,1.127,164,2.429,165,1.127,166,0.036,167,0.073,169,0.592,172,1.463,174,0.89,175,1.418,180,2.166,181,0.715,182,1.658,186,2.429,188,1.34,189,1.203,199,0.658,202,1.117,204,1.176,205,0.811,219,0.902,239,1.323,256,1.944,304,0.902,315,1.127,334,2.043,393,2.188,396,1.356,424,2.188,434,1.455,478,4.348,481,1.699,484,2.555,534,2.63,548,1.699,570,2.555,583,1.455,619,1.272,623,1.914,628,1.695,633,2.188,637,1.455,644,3.419,645,3.724,646,1.455,647,3.741,648,3.741,649,3.741,650,3.112,651,4.687,652,3.112,653,3.112,654,3.112,655,2.069,656,2.069,657,2.069,658,2.925,659,2.069,660,2.069,661,2.069,662,3.112,663,2.069,664,2.069,665,2.069,666,2.069,667,2.069,668,2.069,669,2.069,670,1.455,671,3.112,672,2.069,673,3.112,674,3.112,675,3.112,676,3.741,677,3.112,678,2.069,679,3.112,680,3.112,681,3.112,682,3.848,683,3.112,684,3.741,685,3.112,686,2.555,687,2.555,688,2.069,689,2.069,690,1.699,691,2.069,692,1.699,693,1.699,694,3.112,695,2.069,696,1.455,697,2.069,698,2.069,699,1.699,700,2.069,701,4.161,702,1.699,703,2.069,704,3.416,705,3.112,706,2.069,707,3.112,708,3.112,709,3.741,710,3.112,711,3.112,712,3.112,713,2.555,714,1.699,715,1.699,716,1.699,717,1.699,718,1.699,719,1.699,720,2.069,721,2.069,722,2.069,723,2.069,724,2.069,725,1.455,726,3.741,727,1.699,728,2.069,729,3.112,730,4.161,731,2.069,732,2.069,733,2.069,734,2.069,735,2.069,736,1.699,737,2.069,738,2.069,739,2.069,740,1.699,741,2.069,742,2.069,743,2.069,744,3.112,745,3.112,746,2.069,747,2.069,748,3.112,749,2.069,750,2.069,751,2.069,752,2.069,753,2.069,754,2.069,755,2.069,756,2.069,757,2.069,758,2.069,759,2.069,760,2.069,761,3.112,762,2.069,763,2.069,764,2.069,765,2.069]],["title/classes/Shard.html",[167,0.106,766,2.111]],["body/classes/Shard.html",[3,0.575,4,0.575,5,0.44,7,0.264,8,0.502,9,0.7,16,0.529,17,0.042,19,0.584,22,0.764,43,0.667,53,0.029,80,0.728,94,2.047,96,0.505,100,1.949,101,1.54,110,0.978,126,1.835,128,1.49,129,1.503,135,1.835,166,0.029,167,0.112,169,0.906,172,1.214,174,1.204,175,1.892,176,2.449,180,1.975,181,0.968,182,1.75,186,2.576,188,1.441,189,1.294,194,1.602,197,4.307,198,1.602,199,1.007,202,1.158,204,1.087,216,3.457,315,1.726,458,2.602,630,2.228,696,2.228,766,3.543,767,2.602,768,4.211,769,4.211,770,5.04,771,4.211,772,3.169,773,4.211,774,3.169,775,3.169,776,4.211,777,3.169,778,4.211,779,3.169,780,3.169,781,4.211,782,3.169,783,2.228,784,3.169,785,3.169,786,3.169,787,3.169,788,2.602,789,4.211,790,3.169,791,3.169,792,4.211,793,3.169,794,4.211,795,3.169]],["title/interfaces/SimpleCondition.html",[0,0.615,98,1.309]],["body/interfaces/SimpleCondition.html",[0,0.803,1,1.709,2,1.089,3,0.406,4,0.406,5,0.311,6,1.22,7,0.187,8,0.468,9,0.738,10,1.378,11,1.575,12,1.22,13,1.378,14,1.378,15,1.147,16,0.561,17,0.042,18,1.365,19,0.311,20,1.575,21,2.008,22,0.978,23,2.661,24,1.22,25,1.22,26,1.22,27,1.22,28,1.22,29,1.378,30,1.378,31,2.789,32,2.968,33,2.031,34,1.798,35,1.166,36,2.011,37,1.378,38,1.378,39,1.378,40,1.378,41,1.378,42,1.238,43,0.624,44,1.575,45,2.411,46,1.605,47,1.534,48,1.089,49,1.378,50,2.411,51,1.089,52,1.378,53,0.031,54,2.031,55,1.089,56,1.089,57,2.031,58,1.378,59,1.378,60,2.031,61,2.031,62,1.378,63,1.378,64,2.031,65,1.22,66,2.031,67,1.378,68,2.031,69,2.628,70,0.977,71,1.22,72,1.22,73,2.837,74,2.031,75,1.378,76,2.411,77,2.322,78,2.031,79,2.031,80,0.759,81,2.661,82,0.878,83,2.103,84,1.378,85,0.977,86,1.22,87,2.661,88,1.762,89,1.378,90,1.22,91,1.527,92,2.322,93,1.886,94,2.584,95,3.15,96,0.817,97,2.346,98,1.709,99,2.031,100,1.378,101,1.605,102,2.322,103,2.031,104,2.031,105,2.322,106,1.798,107,2.322,108,2.031,109,2.322,110,0.599,111,2.661,112,1.22,113,1.089,114,1.22,115,1.22,116,1.378,117,1.378,118,1.22,119,1.798,120,1.906,121,1.166,122,1.378,123,1.605,124,0.977,125,1.22,126,1.439,127,1.378,128,0.848,129,1.05,130,0.712,131,1.605,132,1.22,133,1.378,134,1.378,135,2.104,136,1.378,137,2.411,138,2.661,139,1.378,140,1.378,141,1.575,142,1.575,143,1.378,144,1.575,145,1.378,146,1.22,147,1.378,148,1.575,149,1.605,150,1.378,151,2.322,152,1.22,153,1.22,154,0.977,155,1.575,156,1.378,157,1.378,158,2.757,159,1.378,160,1.089,161,0.977,162,1.378,163,1.22,164,1.22,165,1.22,166,0.022,396,0.977]],["title/classes/TransactionManager.html",[167,0.106,796,2.111]],["body/classes/TransactionManager.html",[3,0.55,4,0.55,5,0.421,7,0.253,8,0.488,9,0.421,16,0.5,17,0.042,19,0.642,22,0.742,42,0.868,53,0.028,80,0.698,96,0.652,110,0.898,128,0.779,166,0.028,167,0.108,169,0.868,171,1.867,172,1.44,174,1.17,175,1.832,176,1.989,180,2.242,181,1.224,182,1.76,183,2.492,186,2.965,188,0.868,189,0.779,192,2.492,196,3.359,198,1.694,199,0.965,202,0.698,219,1.323,248,4.067,407,2.134,424,2.877,434,3.483,459,2.492,534,2.134,552,2.492,553,2.492,658,4.051,690,2.492,796,3.254,797,4.606,798,4.629,799,4.629,800,4.954,801,4.954,802,4.954,803,4.954,804,3.036,805,3.036,806,3.036,807,3.036,808,5.537,809,3.036,810,4.629,811,3.036,812,5.172,813,4.629,814,3.036,815,3.636,816,3.036,817,5.172,818,4.092,819,3.036,820,3.036,821,3.036,822,3.359,823,4.629,824,3.036,825,3.036,826,4.092,827,3.036]],["title/changelog.html",[828,1.776,829,1.776,830,2.074]],["body/changelog.html",[5,0.425,15,0.704,17,0.028,35,1.082,53,0.028,131,2.917,149,1.489,166,0.028,174,0.876,181,1.228,396,1.336,409,2.516,449,1.669,623,1.885,702,2.516,783,3.648,815,2.155,822,4.555,830,2.516,831,3.065,832,3.065,833,3.065,834,3.065,835,3.065,836,2.516,837,3.065,838,3.065,839,2.516,840,5.621,841,4.555,842,4.119,843,3.065,844,3.065,845,4.119,846,3.756,847,3.065,848,4.119,849,4.973,850,4.973,851,4.663,852,4.119,853,3.065,854,4.119,855,3.065,856,5.343,857,3.065,858,3.065,859,3.065,860,4.652,861,3.065,862,3.065,863,4.119,864,3.065,865,3.065,866,3.065,867,4.652,868,4.652,869,3.065,870,5.459,871,4.973,872,3.065,873,4.652,874,4.652,875,3.065,876,3.065,877,3.065,878,2.516,879,3.065,880,3.065,881,2.516,882,3.065,883,3.065,884,3.065,885,3.065,886,4.973,887,3.065,888,3.065,889,4.555,890,3.065,891,3.065,892,3.065,893,3.065,894,3.065,895,3.065,896,3.065,897,3.065,898,3.065,899,5.459,900,3.065,901,3.065,902,3.065,903,4.119,904,4.973,905,4.083,906,4.652,907,4.119,908,4.119,909,4.119,910,4.119,911,4.119,912,4.119,913,4.119,914,4.119,915,4.119,916,3.065,917,3.065,918,3.065,919,4.119,920,3.065,921,3.065,922,3.065,923,3.065,924,3.065,925,3.065,926,3.065,927,3.065,928,3.065,929,3.065,930,3.065,931,3.065,932,2.516,933,3.065,934,3.065,935,3.065,936,3.065,937,3.065]],["title/coverage.html",[938,3.335]],["body/coverage.html",[0,1.091,1,1.451,5,0.462,6,2.639,15,1.181,16,0.336,17,0.041,34,1.813,35,1.535,42,0.952,46,1.618,53,0.03,98,1.451,146,1.813,154,1.451,166,0.03,167,0.206,168,2.34,170,2.733,171,2.98,181,0.765,190,1.896,193,2.047,215,2.733,239,1.884,253,1.618,254,2.675,255,2.497,282,1.618,397,2.733,419,2.34,420,2.733,463,2.047,464,3.16,465,3.058,466,3.058,471,1.813,590,3.058,595,2.047,644,2.34,645,3.058,646,3.058,766,2.34,767,2.733,796,2.34,797,2.733,846,2.34,938,2.733,939,3.329,940,3.571,941,3.612,942,5.651,943,2.733,944,5.139,945,2.733,946,3.329,947,3.329,948,3.329,949,4.846,950,5.765,951,3.329,952,3.329,953,3.571,954,2.733,955,2.733,956,5.651,957,2.733,958,2.733,959,3.329,960,2.733,961,2.733,962,2.733,963,2.733,964,2.733,965,2.733,966,2.733,967,4.35,968,3.571,969,2.733,970,2.733,971,2.733,972,3.329,973,2.733,974,4.35,975,3.329,976,3.329,977,3.329,978,3.329,979,3.329,980,2.733,981,3.329,982,3.329,983,3.329]],["title/miscellaneous/functions.html",[984,1.228,985,2.957]],["body/miscellaneous/functions.html",[7,0.325,9,0.724,15,0.897,16,0.526,17,0.04,18,1.236,42,1.6,43,0.668,53,0.033,110,0.988,166,0.033,188,1.492,189,1.34,190,2.097,278,3.83,304,2.374,396,1.701,407,2.744,463,3.209,464,2.4,465,3.383,466,3.383,577,3.204,619,2.4,629,2.744,645,2.744,646,3.383,682,3.204,687,3.204,693,3.204,713,3.951,714,3.204,715,3.204,716,3.204,717,3.204,718,3.204,719,3.204,736,3.204,941,3.383,960,3.951,965,3.204,966,3.951,973,3.204,980,3.951,984,1.897,985,3.204,986,3.903,987,3.204,988,3.204,989,3.903,990,3.903,991,3.903,992,5.218,993,3.903,994,3.903,995,3.903,996,3.903,997,3.903,998,3.903,999,3.903]],["title/index.html",[7,0.21,828,1.776,829,1.776]],["body/index.html",[0,0.674,1,1.883,7,0.36,10,2.026,12,1.794,14,2.026,15,0.757,17,0.042,18,1.238,19,0.669,21,1.291,35,1.99,43,0.516,47,1.373,48,1.601,53,0.029,56,1.601,91,1.163,93,2.23,121,1.525,123,1.601,126,1.436,149,2.343,150,2.026,152,2.353,153,1.794,154,1.436,157,2.026,162,2.026,163,1.794,164,2.353,165,1.794,166,0.033,181,0.757,189,1.238,199,1.047,202,0.757,204,1.295,239,1.373,270,1.794,334,2.101,343,2.657,392,3.038,395,2.353,449,1.794,523,2.026,535,2.705,550,2.705,558,2.705,628,1.794,638,2.316,642,2.316,643,2.316,670,2.316,692,2.705,696,2.316,699,3.958,704,3.547,725,3.038,727,2.705,783,2.316,788,3.958,841,2.705,851,2.705,878,2.705,1000,2.705,1001,3.295,1002,3.295,1003,3.295,1004,3.295,1005,3.295,1006,4.321,1007,4.321,1008,4.822,1009,3.295,1010,3.295,1011,3.295,1012,3.295,1013,3.295,1014,3.295,1015,2.705,1016,3.295,1017,3.295,1018,4.822,1019,3.295,1020,4.822,1021,3.295,1022,3.295,1023,3.295,1024,3.295,1025,3.295,1026,3.295,1027,3.295,1028,3.295,1029,3.295,1030,3.295,1031,3.295,1032,3.295,1033,4.321,1034,3.295,1035,3.295,1036,4.321,1037,3.295,1038,3.295,1039,3.295,1040,3.295,1041,3.295,1042,3.295,1043,3.295,1044,3.295,1045,3.295]],["title/license.html",[828,1.776,829,1.776,1046,2.074]],["body/license.html",[17,0.033,53,0.033,78,2.442,83,1.93,118,2.163,124,1.731,166,0.033,522,3.261,523,2.991,622,2.442,846,2.792,889,3.261,1015,3.261,1046,3.261,1047,3.972,1048,5.259,1049,3.972,1050,3.261,1051,3.261,1052,3.261,1053,4.865,1054,3.972,1055,3.972,1056,3.972,1057,3.972,1058,3.972,1059,3.972,1060,4.865,1061,5.896,1062,3.972,1063,3.972,1064,5.259,1065,3.972,1066,3.994,1067,3.972,1068,3.972,1069,3.972,1070,3.972,1071,3.972,1072,3.972,1073,3.972,1074,4.865,1075,3.972,1076,3.972,1077,3.972,1078,3.972,1079,3.972,1080,3.972,1081,4.865,1082,4.865,1083,3.972,1084,3.972,1085,3.972,1086,3.972,1087,3.972,1088,3.972,1089,3.972,1090,3.972,1091,3.972,1092,3.972,1093,3.972,1094,3.972,1095,3.972,1096,3.972,1097,3.972,1098,3.972,1099,3.972,1100,3.972,1101,3.972,1102,3.972,1103,3.972,1104,3.972,1105,3.972,1106,3.972,1107,3.972,1108,3.972,1109,3.972,1110,3.972]],["title/modules.html",[1111,3.335]],["body/modules.html",[17,0.037,53,0.037,166,0.037,1111,3.904]],["title/overview.html",[1112,3.335]],["body/overview.html",[2,2.292,17,0.037,53,0.037,166,0.037,169,1.349,881,3.871,1112,3.871,1113,4.716]],["title/properties.html",[8,0.43,905,2.074]],["body/properties.html",[8,0.504,17,0.041,35,1.492,43,0.504,53,0.034,91,1.492,93,2.201,96,0.805,114,2.302,129,1.606,145,2.599,149,2.455,152,2.302,166,0.034,205,1.98,256,1.842,396,1.842,530,3.47,603,2.971,670,3.551,686,3.47,725,3.551,815,2.971,836,3.47,839,3.47,932,3.47,1000,3.47,1050,3.47,1051,3.47,1052,3.47,1114,4.227,1115,4.227,1116,4.227,1117,4.227,1118,4.227,1119,4.227,1120,4.227,1121,4.227,1122,4.227,1123,4.227,1124,4.227,1125,4.227,1126,4.227,1127,4.227,1128,4.227,1129,4.227,1130,4.227,1131,4.227,1132,4.227]],["title/miscellaneous/typealiases.html",[984,1.228,1133,3.602]],["body/miscellaneous/typealiases.html",[6,1.773,7,0.271,8,0.389,9,0.452,16,0.567,17,0.041,18,1.101,21,1.681,23,2.637,24,1.773,25,1.773,26,1.773,27,1.773,28,1.773,29,2.002,30,2.002,31,2.883,32,3.133,33,2.637,34,2.335,35,1.149,36,1.869,37,2.002,38,2.002,39,2.002,40,2.002,41,2.002,42,1.371,43,0.389,45,3.133,46,2.084,47,1.363,48,1.583,49,2.637,50,2.948,51,1.583,52,2.002,53,0.037,54,2.637,55,1.583,56,1.583,57,2.637,58,2.002,59,2.002,60,2.637,61,2.637,62,2.002,63,2.002,64,2.637,65,1.773,66,2.637,67,2.002,68,2.637,69,2.335,70,1.419,71,1.773,72,1.773,73,2.948,74,2.002,75,2.002,76,3.133,80,0.985,81,2.002,82,1.276,83,2.476,84,2.002,85,1.419,86,1.773,87,2.637,88,1.149,89,2.002,90,1.773,91,1.149,97,1.583,98,1.419,106,1.773,113,1.583,114,1.773,115,1.773,116,2.002,117,2.002,118,1.773,119,1.773,120,2.084,123,2.084,124,1.419,125,1.773,126,1.419,127,2.002,128,1.101,130,1.035,131,1.583,132,1.773,133,2.002,134,2.002,135,2.089,136,2.002,137,2.002,138,2.002,139,2.002,140,2.637,166,0.029,190,1.419,205,1.681,254,2.002,255,2.084,259,2.335,315,2.774,332,1.773,333,1.773,984,1.583,1134,3.256,1135,5.624,1136,3.256,1137,3.52,1138,2.673,1139,2.673,1140,3.52,1141,4.288,1142,3.52,1143,3.256,1144,3.256]],["title/miscellaneous/variables.html",[984,1.228,1145,2.957]],["body/miscellaneous/variables.html",[7,0.235,15,1.024,16,0.285,17,0.042,19,0.755,21,1.106,24,1.537,25,1.537,26,1.537,27,1.537,28,1.537,35,1.374,36,2.094,42,1.275,43,0.464,46,1.892,48,1.371,51,2.45,53,0.03,69,2.964,71,1.537,72,1.537,83,2.335,85,1.23,88,1.573,91,1.374,93,2.094,94,1.371,95,2.394,96,0.937,97,1.892,98,1.23,99,2.394,101,2.533,103,2.394,104,2.394,111,2.394,113,2.533,115,2.12,119,2.617,120,2.166,121,1.374,122,2.741,166,0.027,190,2.094,194,0.897,202,1.269,204,0.648,205,1.106,239,0.897,244,2.317,247,3.659,464,2.394,523,1.735,583,1.984,604,2.737,622,2.394,628,2.12,658,2.737,740,3.196,940,2.317,941,3.544,943,3.196,945,3.196,953,3.196,954,3.196,955,3.196,957,3.196,958,3.196,961,3.196,962,3.196,963,3.196,964,3.196,968,3.196,969,3.196,970,3.196,971,3.196,984,1.371,987,3.196,988,3.196,1066,2.317,1137,2.317,1138,2.317,1139,2.317,1140,2.317,1142,2.317,1145,2.317,1146,3.893,1147,3.893,1148,4.805,1149,2.822,1150,2.822,1151,5.042,1152,3.893,1153,2.822,1154,2.822,1155,3.893,1156,2.822,1157,4.805,1158,3.893,1159,2.822,1160,2.822,1161,2.822,1162,2.822,1163,2.822,1164,2.822,1165,3.893,1166,3.893,1167,3.893,1168,4.457,1169,3.893,1170,3.893,1171,2.822,1172,2.822,1173,2.822,1174,2.822,1175,2.822,1176,2.822,1177,2.822,1178,2.822,1179,2.822,1180,2.822,1181,2.822,1182,2.822,1183,3.893,1184,2.822,1185,2.822,1186,2.822,1187,2.822,1188,2.822,1189,2.822,1190,2.822,1191,2.822,1192,2.822,1193,2.822]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":239,"title":{},"body":{"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["0/1",{"_index":944,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":959,"title":{},"body":{"coverage.html":{}}}],["0/26",{"_index":972,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":974,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":949,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":975,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":967,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":981,"title":{},"body":{"coverage.html":{}}}],["02",{"_index":868,"title":{},"body":{"changelog.html":{}}}],["029ad1fa",{"_index":923,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":890,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":899,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":860,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":863,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":334,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"index.html":{}}}],["1).fill(0",{"_index":745,"title":{},"body":{"classes/SearchEngine.html":{}}}],["1.0.0",{"_index":927,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":921,"title":{},"body":{"changelog.html":{}}}],["1.1.1",{"_index":918,"title":{},"body":{"changelog.html":{}}}],["1.1.2",{"_index":916,"title":{},"body":{"changelog.html":{}}}],["1.1.3",{"_index":903,"title":{},"body":{"changelog.html":{}}}],["1/1",{"_index":956,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":841,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["100",{"_index":950,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":638,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"index.html":{}}}],["11",{"_index":881,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["16",{"_index":864,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":854,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":845,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":869,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":699,"title":{},"body":{"classes/SearchEngine.html":{},"index.html":{}}}],["2.0.0",{"_index":898,"title":{},"body":{"changelog.html":{}}}],["2.0.1",{"_index":888,"title":{},"body":{"changelog.html":{}}}],["2.1.0",{"_index":884,"title":{},"body":{"changelog.html":{}}}],["2.1.1",{"_index":880,"title":{},"body":{"changelog.html":{}}}],["2.1.2",{"_index":866,"title":{},"body":{"changelog.html":{}}}],["2.2.0",{"_index":862,"title":{},"body":{"changelog.html":{}}}],["20",{"_index":842,"title":{},"body":{"changelog.html":{}}}],["2021",{"_index":889,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2022",{"_index":867,"title":{},"body":{"changelog.html":{}}}],["2024",{"_index":840,"title":{},"body":{"changelog.html":{}}}],["23/30",{"_index":948,"title":{},"body":{"coverage.html":{}}}],["26",{"_index":928,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":922,"title":{},"body":{"changelog.html":{}}}],["276f3b47",{"_index":924,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":904,"title":{},"body":{"changelog.html":{}}}],["2886b372",{"_index":885,"title":{},"body":{"changelog.html":{}}}],["3.0.0",{"_index":861,"title":{},"body":{"changelog.html":{}}}],["3.1.0",{"_index":859,"title":{},"body":{"changelog.html":{}}}],["30",{"_index":900,"title":{},"body":{"changelog.html":{}}}],["36",{"_index":1178,"title":{},"body":{"miscellaneous/variables.html":{}}}],["39424c77",{"_index":937,"title":{},"body":{"changelog.html":{}}}],["4.0.0",{"_index":855,"title":{},"body":{"changelog.html":{}}}],["4.0.1",{"_index":848,"title":{},"body":{"changelog.html":{}}}],["4.0.2",{"_index":844,"title":{},"body":{"changelog.html":{}}}],["4.0.3",{"_index":843,"title":{},"body":{"changelog.html":{}}}],["4.0.4",{"_index":839,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["4/4",{"_index":951,"title":{},"body":{"coverage.html":{}}}],["4079a95a",{"_index":933,"title":{},"body":{"changelog.html":{}}}],["4173ee67",{"_index":894,"title":{},"body":{"changelog.html":{}}}],["42415f3b",{"_index":847,"title":{},"body":{"changelog.html":{}}}],["45",{"_index":978,"title":{},"body":{"coverage.html":{}}}],["4642966f",{"_index":858,"title":{},"body":{"changelog.html":{}}}],["4[a",{"_index":1182,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4e9d1718",{"_index":883,"title":{},"body":{"changelog.html":{}}}],["4xxx",{"_index":1191,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":1113,"title":{},"body":{"overview.html":{}}}],["5/11",{"_index":979,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":952,"title":{},"body":{"coverage.html":{}}}],["5/9",{"_index":977,"title":{},"body":{"coverage.html":{}}}],["55",{"_index":976,"title":{},"body":{"coverage.html":{}}}],["5bfdc44a",{"_index":917,"title":{},"body":{"changelog.html":{}}}],["5d244251",{"_index":902,"title":{},"body":{"changelog.html":{}}}],["5eef46c0",{"_index":920,"title":{},"body":{"changelog.html":{}}}],["60000",{"_index":285,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["69b61d8a",{"_index":887,"title":{},"body":{"changelog.html":{}}}],["6d760f53",{"_index":931,"title":{},"body":{"changelog.html":{}}}],["75a1f4f1",{"_index":882,"title":{},"body":{"changelog.html":{}}}],["75a86338",{"_index":897,"title":{},"body":{"changelog.html":{}}}],["76",{"_index":947,"title":{},"body":{"coverage.html":{}}}],["76398cb0",{"_index":929,"title":{},"body":{"changelog.html":{}}}],["85fb8daf",{"_index":930,"title":{},"body":{"changelog.html":{}}}],["89ab][a",{"_index":1184,"title":{},"body":{"miscellaneous/variables.html":{}}}],["95dd6d1e",{"_index":913,"title":{},"body":{"changelog.html":{}}}],["999",{"_index":1042,"title":{},"body":{"index.html":{}}}],["9]{9}$/i",{"_index":1188,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9b8d080d",{"_index":915,"title":{},"body":{"changelog.html":{}}}],["_",{"_index":1023,"title":{},"body":{"index.html":{}}}],["__brand__",{"_index":44,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["a.score",{"_index":764,"title":{},"body":{"classes/SearchEngine.html":{}}}],["a[key",{"_index":544,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["above",{"_index":1080,"title":{},"body":{"license.html":{}}}],["ac42869a",{"_index":875,"title":{},"body":{"changelog.html":{}}}],["accented",{"_index":715,"title":{},"body":{"classes/SearchEngine.html":{},"miscellaneous/functions.html":{}}}],["accents",{"_index":682,"title":{},"body":{"classes/SearchEngine.html":{},"miscellaneous/functions.html":{}}}],["access",{"_index":156,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["accessors",{"_index":277,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryBuilder.html":{}}}],["action",{"_index":1104,"title":{},"body":{"license.html":{}}}],["add",{"_index":783,"title":{},"body":{"classes/Shard.html":{},"changelog.html":{},"index.html":{}}}],["adddocument",{"_index":216,"title":{},"body":{"classes/Indexing.html":{},"classes/Shard.html":{}}}],["adddocument(doc",{"_index":773,"title":{},"body":{"classes/Shard.html":{}}}],["adddocument(document",{"_index":223,"title":{},"body":{"classes/Indexing.html":{}}}],["additional",{"_index":127,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["adds",{"_index":626,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["ae7913f1",{"_index":879,"title":{},"body":{"changelog.html":{}}}],["affecting",{"_index":133,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["against",{"_index":103,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/variables.html":{}}}],["age",{"_index":788,"title":{},"body":{"classes/Shard.html":{},"index.html":{}}}],["aliases",{"_index":1134,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":642,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"index.html":{}}}],["already",{"_index":552,"title":{},"body":{"classes/QueryBuilder.html":{},"classes/TransactionManager.html":{}}}],["and/or",{"_index":118,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["api",{"_index":1004,"title":{},"body":{"index.html":{}}}],["apply",{"_index":534,"title":{},"body":{"classes/QueryBuilder.html":{},"classes/SearchEngine.html":{},"classes/TransactionManager.html":{}}}],["args",{"_index":584,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["argument",{"_index":212,"title":{},"body":{"classes/IndexManager.html":{}}}],["arguments",{"_index":109,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["arising",{"_index":1107,"title":{},"body":{"license.html":{}}}],["array",{"_index":304,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"miscellaneous/functions.html":{}}}],["array(a.length",{"_index":744,"title":{},"body":{"classes/SearchEngine.html":{}}}],["array.from",{"_index":1021,"title":{},"body":{"index.html":{}}}],["array.from(this.cache.entries",{"_index":384,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["array.from(this.cache.entries()).foreach(([key",{"_index":347,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["array.from(this.db.values",{"_index":785,"title":{},"body":{"classes/Shard.html":{}}}],["array.isarray(sortconditions",{"_index":526,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["array.isarray(value",{"_index":1173,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arrays",{"_index":85,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["asc",{"_index":547,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["associated",{"_index":124,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["async",{"_index":270,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"index.html":{}}}],["author",{"_index":1130,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":1098,"title":{},"body":{"license.html":{}}}],["available",{"_index":825,"title":{},"body":{"classes/TransactionManager.html":{}}}],["avalue",{"_index":543,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["avoid",{"_index":376,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["await",{"_index":395,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"index.html":{}}}],["b",{"_index":112,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryBuilder.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{}}}],["b.score",{"_index":763,"title":{},"body":{"classes/SearchEngine.html":{}}}],["b[key",{"_index":546,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["backpressure",{"_index":1121,"title":{},"body":{"properties.html":{}}}],["base",{"_index":717,"title":{},"body":{"classes/SearchEngine.html":{},"miscellaneous/functions.html":{}}}],["based",{"_index":693,"title":{},"body":{"classes/SearchEngine.html":{},"miscellaneous/functions.html":{}}}],["basescore",{"_index":1033,"title":{},"body":{"index.html":{}}}],["be1b5db1",{"_index":853,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":814,"title":{},"body":{"classes/TransactionManager.html":{}}}],["begins",{"_index":816,"title":{},"body":{"classes/TransactionManager.html":{}}}],["begintransaction",{"_index":800,"title":{},"body":{"classes/TransactionManager.html":{}}}],["behavior",{"_index":79,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryBuilder.html":{},"interfaces/SimpleCondition.html":{}}}],["bonus",{"_index":1038,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":88,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["boolean|undefined",{"_index":433,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["boot",{"_index":1018,"title":{},"body":{"index.html":{}}}],["both",{"_index":1161,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bug",{"_index":873,"title":{},"body":{"changelog.html":{}}}],["bugs",{"_index":932,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["builder",{"_index":996,"title":{},"body":{"miscellaneous/functions.html":{}}}],["builder.exec",{"_index":589,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.exec().catch(onrejected",{"_index":588,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.then(...args",{"_index":587,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts",{"_index":466,"title":{},"body":{"classes/QueryBuilder.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["builder.ts:11",{"_index":487,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:111",{"_index":509,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:118",{"_index":494,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:124",{"_index":499,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:13",{"_index":491,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:130",{"_index":513,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:15",{"_index":490,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:17",{"_index":485,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:19",{"_index":483,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:37",{"_index":503,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:45",{"_index":507,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:5",{"_index":488,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:53",{"_index":505,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:58",{"_index":502,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:64",{"_index":497,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:7",{"_index":489,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:9",{"_index":486,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["bvalue",{"_index":545,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["c",{"_index":1049,"title":{},"body":{"license.html":{}}}],["c0bab78d",{"_index":910,"title":{},"body":{"changelog.html":{}}}],["c411d805",{"_index":893,"title":{},"body":{"changelog.html":{}}}],["cache",{"_index":256,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"properties.html":{}}}],["cache.get(text",{"_index":734,"title":{},"body":{"classes/SearchEngine.html":{}}}],["cache.has(text",{"_index":731,"title":{},"body":{"classes/SearchEngine.html":{}}}],["cache.set(text",{"_index":733,"title":{},"body":{"classes/SearchEngine.html":{}}}],["cache.ts",{"_index":255,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["cache.ts:109",{"_index":322,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:11",{"_index":284,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryCache.html":{}}}],["cache.ts:13",{"_index":290,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:14",{"_index":600,"title":{},"body":{"classes/QueryCache.html":{}}}],["cache.ts:143",{"_index":299,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:147",{"_index":296,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:15",{"_index":294,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:151",{"_index":327,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:155",{"_index":313,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:16",{"_index":596,"title":{},"body":{"classes/QueryCache.html":{}}}],["cache.ts:167",{"_index":303,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:17",{"_index":292,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:173",{"_index":320,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:178",{"_index":301,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:186",{"_index":329,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:19",{"_index":288,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:191",{"_index":331,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:196",{"_index":310,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:21",{"_index":293,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:23",{"_index":289,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:25",{"_index":291,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:27",{"_index":286,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:30",{"_index":283,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:37",{"_index":601,"title":{},"body":{"classes/QueryCache.html":{}}}],["cache.ts:52",{"_index":319,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:54",{"_index":625,"title":{},"body":{"classes/QueryCache.html":{}}}],["cache.ts:62",{"_index":316,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryCache.html":{}}}],["cache.ts:67",{"_index":295,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:74",{"_index":611,"title":{},"body":{"classes/QueryCache.html":{}}}],["cache.ts:79",{"_index":324,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:85",{"_index":325,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:91",{"_index":306,"title":{},"body":{"classes/LRUCache.html":{}}}],["cached",{"_index":393,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/SearchEngine.html":{}}}],["cachehits",{"_index":591,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["cachemisses",{"_index":592,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["caching",{"_index":1026,"title":{},"body":{"index.html":{}}}],["callback",{"_index":403,"title":{},"body":{"classes/Mutex.html":{}}}],["caller",{"_index":417,"title":{},"body":{"classes/Mutex.html":{}}}],["capture",{"_index":411,"title":{},"body":{"classes/Mutex.html":{}}}],["case",{"_index":51,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/Indexing.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["catch",{"_index":475,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["catch(onrejected",{"_index":492,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["chain",{"_index":408,"title":{},"body":{"classes/Mutex.html":{}}}],["chaining",{"_index":570,"title":{},"body":{"classes/QueryBuilder.html":{},"classes/SearchEngine.html":{}}}],["changelog",{"_index":830,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":822,"title":{},"body":{"classes/TransactionManager.html":{},"changelog.html":{}}}],["characters",{"_index":713,"title":{},"body":{"classes/SearchEngine.html":{},"miscellaneous/functions.html":{}}}],["charge",{"_index":1057,"title":{},"body":{"license.html":{}}}],["check",{"_index":243,"title":{},"body":{"classes/Indexing.html":{},"classes/PersistenceManager.html":{}}}],["checks",{"_index":1168,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chores",{"_index":870,"title":{},"body":{"changelog.html":{}}}],["chunk",{"_index":995,"title":{},"body":{"miscellaneous/functions.html":{}}}],["chunkarray",{"_index":966,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["chunkarray(array",{"_index":990,"title":{},"body":{"miscellaneous/functions.html":{}}}],["chunks",{"_index":992,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ci",{"_index":909,"title":{},"body":{"changelog.html":{}}}],["claim",{"_index":1101,"title":{},"body":{"license.html":{}}}],["class",{"_index":167,"title":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"coverage.html":{}}}],["classes",{"_index":169,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"overview.html":{}}}],["cleanup",{"_index":336,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["cleanupexpiredentries",{"_index":266,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["cleanupinterval",{"_index":257,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["cleanuptimer",{"_index":258,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["clear",{"_index":176,"title":{},"body":{"classes/IndexManager.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/PersistenceManager.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}}}],["cleared",{"_index":624,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["clearinterval(this.cleanuptimer",{"_index":356,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["clears",{"_index":620,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["codes",{"_index":914,"title":{},"body":{"changelog.html":{}}}],["commit",{"_index":837,"title":{},"body":{"changelog.html":{}}}],["committing",{"_index":824,"title":{},"body":{"classes/TransactionManager.html":{}}}],["committransaction",{"_index":801,"title":{},"body":{"classes/TransactionManager.html":{}}}],["compare",{"_index":102,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["comparison",{"_index":97,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryBuilder.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["comparisonoperator",{"_index":23,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["comparisonresult",{"_index":539,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["comparisons",{"_index":106,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryBuilder.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["complex",{"_index":105,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["composed",{"_index":117,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["concurrent",{"_index":155,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["condition",{"_index":69,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["condition.ts",{"_index":954,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["conditionals",{"_index":379,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["conditionnode",{"_index":120,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/Indexing.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["conditions",{"_index":83,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"license.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["configure",{"_index":700,"title":{},"body":{"classes/SearchEngine.html":{}}}],["configuring",{"_index":144,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["connection",{"_index":1109,"title":{},"body":{"license.html":{}}}],["console.log(results.slice(0",{"_index":1043,"title":{},"body":{"index.html":{}}}],["const",{"_index":204,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":219,"title":{},"body":{"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"classes/TransactionManager.html":{}}}],["constructor(db",{"_index":424,"title":{},"body":{"classes/PersistenceManager.html":{},"classes/SearchEngine.html":{},"classes/TransactionManager.html":{}}}],["constructor(fields",{"_index":220,"title":{},"body":{"classes/Indexing.html":{}}}],["constructor(options",{"_index":281,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["constructor(result",{"_index":482,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["containing",{"_index":599,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["contains",{"_index":1039,"title":{},"body":{"index.html":{}}}],["contents",{"_index":454,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["continuous",{"_index":849,"title":{},"body":{"changelog.html":{}}}],["contract",{"_index":1105,"title":{},"body":{"license.html":{}}}],["converts",{"_index":714,"title":{},"body":{"classes/SearchEngine.html":{},"miscellaneous/functions.html":{}}}],["copies",{"_index":1074,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1060,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1048,"title":{},"body":{"license.html":{}}}],["correct",{"_index":576,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["counts",{"_index":616,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["coverage",{"_index":938,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":449,"title":{},"body":{"classes/PersistenceManager.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"changelog.html":{},"index.html":{}}}],["createquerybuilderproxy",{"_index":960,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createquerybuilderproxy(builder",{"_index":577,"title":{},"body":{"classes/QueryBuilder.html":{},"miscellaneous/functions.html":{}}}],["createquerybuilderproxy(result",{"_index":586,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["crud",{"_index":1003,"title":{},"body":{"index.html":{}}}],["current",{"_index":407,"title":{},"body":{"classes/Mutex.html":{},"classes/TransactionManager.html":{},"miscellaneous/functions.html":{}}}],["currrow",{"_index":746,"title":{},"body":{"classes/SearchEngine.html":{}}}],["custom",{"_index":21,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["customcompare",{"_index":111,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/variables.html":{}}}],["customcompare(datum[field",{"_index":1149,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customscoringfn",{"_index":10,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"index.html":{}}}],["d687504c",{"_index":896,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":1102,"title":{},"body":{"license.html":{}}}],["data",{"_index":93,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"interfaces/SimpleCondition.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["data.filter((datum",{"_index":1164,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data.find((datum",{"_index":1171,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data.json",{"_index":437,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["database",{"_index":725,"title":{},"body":{"classes/SearchEngine.html":{},"index.html":{},"properties.html":{}}}],["date",{"_index":89,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["datum",{"_index":1148,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datum[field",{"_index":1151,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db",{"_index":186,"title":{},"body":{"classes/IndexManager.html":{},"classes/PersistenceManager.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}}}],["db.get(id",{"_index":210,"title":{},"body":{"classes/IndexManager.html":{}}}],["dbsnapshot",{"_index":798,"title":{},"body":{"classes/TransactionManager.html":{}}}],["dd121257",{"_index":892,"title":{},"body":{"changelog.html":{}}}],["de8a28fa",{"_index":865,"title":{},"body":{"changelog.html":{}}}],["deae21e0",{"_index":926,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":1063,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1110,"title":{},"body":{"license.html":{}}}],["decrease",{"_index":1034,"title":{},"body":{"index.html":{}}}],["default",{"_index":19,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":1028,"title":{},"body":{"index.html":{}}}],["defined",{"_index":182,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}}}],["defines",{"_index":45,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["delete",{"_index":267,"title":{},"body":{"classes/LRUCache.html":{}}}],["delete(key",{"_index":297,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["deletebyid",{"_index":768,"title":{},"body":{"classes/Shard.html":{}}}],["deletebyid(id",{"_index":776,"title":{},"body":{"classes/Shard.html":{}}}],["deleteone",{"_index":925,"title":{},"body":{"changelog.html":{}}}],["deps",{"_index":871,"title":{},"body":{"changelog.html":{}}}],["description",{"_index":396,"title":{},"body":{"interfaces/MemozOptions.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"properties.html":{}}}],["deserialize",{"_index":268,"title":{},"body":{"classes/LRUCache.html":{}}}],["deserialize(serializedcache",{"_index":300,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["desired",{"_index":41,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["determined",{"_index":557,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["determining",{"_index":551,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["diacritics",{"_index":716,"title":{},"body":{"classes/SearchEngine.html":{},"miscellaneous/functions.html":{}}}],["difference",{"_index":741,"title":{},"body":{"classes/SearchEngine.html":{}}}],["different",{"_index":561,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["differently",{"_index":251,"title":{},"body":{"classes/Indexing.html":{}}}],["dir",{"_index":439,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["directly",{"_index":1163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disable",{"_index":339,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryBuilder.html":{}}}],["disk",{"_index":149,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["distance",{"_index":164,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"index.html":{}}}],["distribute",{"_index":1071,"title":{},"body":{"license.html":{}}}],["doc",{"_index":197,"title":{},"body":{"classes/IndexManager.html":{},"classes/Shard.html":{}}}],["docs",{"_index":851,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["document",{"_index":123,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/Indexing.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["document[field]).join('_",{"_index":246,"title":{},"body":{"classes/Indexing.html":{}}}],["documentation",{"_index":846,"title":{},"body":{"changelog.html":{},"coverage.html":{},"license.html":{}}}],["documented",{"_index":833,"title":{},"body":{"changelog.html":{}}}],["documents",{"_index":135,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["documentwithid",{"_index":128,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"miscellaneous/typealiases.html":{}}}],["dot",{"_index":61,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["dpes",{"_index":891,"title":{},"body":{"changelog.html":{}}}],["e",{"_index":1051,"title":{},"body":{"license.html":{},"properties.html":{}}}],["e.g",{"_index":787,"title":{},"body":{"classes/Shard.html":{}}}],["e81eee88",{"_index":872,"title":{},"body":{"changelog.html":{}}}],["e9322431",{"_index":908,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":629,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"miscellaneous/functions.html":{}}}],["early",{"_index":740,"title":{},"body":{"classes/SearchEngine.html":{},"miscellaneous/variables.html":{}}}],["easy",{"_index":1002,"title":{},"body":{"index.html":{}}}],["effectively",{"_index":1170,"title":{},"body":{"miscellaneous/variables.html":{}}}],["empty",{"_index":250,"title":{},"body":{"classes/Indexing.html":{}}}],["enable",{"_index":574,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["engine.ts",{"_index":646,"title":{},"body":{"classes/SearchEngine.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["engine.ts:106",{"_index":689,"title":{},"body":{"classes/SearchEngine.html":{}}}],["engine.ts:12",{"_index":655,"title":{},"body":{"classes/SearchEngine.html":{}}}],["engine.ts:14",{"_index":656,"title":{},"body":{"classes/SearchEngine.html":{}}}],["engine.ts:16",{"_index":657,"title":{},"body":{"classes/SearchEngine.html":{}}}],["engine.ts:18",{"_index":654,"title":{},"body":{"classes/SearchEngine.html":{}}}],["engine.ts:180",{"_index":672,"title":{},"body":{"classes/SearchEngine.html":{}}}],["engine.ts:31",{"_index":678,"title":{},"body":{"classes/SearchEngine.html":{}}}],["engine.ts:43",{"_index":706,"title":{},"body":{"classes/SearchEngine.html":{}}}],["engine.ts:62",{"_index":660,"title":{},"body":{"classes/SearchEngine.html":{}}}],["enhanced",{"_index":37,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["ensure",{"_index":575,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["entire",{"_index":621,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["entries",{"_index":269,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/PersistenceManager.html":{}}}],["entries.foreach(([key",{"_index":390,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/PersistenceManager.html":{}}}],["entry",{"_index":317,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["entry.expiry",{"_index":344,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["entry.value",{"_index":351,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["environment",{"_index":912,"title":{},"body":{"changelog.html":{}}}],["eq",{"_index":24,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["equal",{"_index":1141,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["equality",{"_index":1138,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":249,"title":{},"body":{"classes/Indexing.html":{}}}],["error('no",{"_index":823,"title":{},"body":{"classes/TransactionManager.html":{}}}],["error('transaction",{"_index":809,"title":{},"body":{"classes/TransactionManager.html":{}}}],["error('unexpected",{"_index":252,"title":{},"body":{"classes/Indexing.html":{}}}],["eslint",{"_index":338,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryBuilder.html":{}}}],["etc",{"_index":702,"title":{},"body":{"classes/SearchEngine.html":{},"changelog.html":{}}}],["evaluate",{"_index":99,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/variables.html":{}}}],["evaluatecondition",{"_index":955,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["evaluatecondition(datum",{"_index":1160,"title":{},"body":{"miscellaneous/variables.html":{}}}],["evaluated",{"_index":1162,"title":{},"body":{"miscellaneous/variables.html":{}}}],["evaluatenode",{"_index":958,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["evaluatenode(datum",{"_index":1157,"title":{},"body":{"miscellaneous/variables.html":{}}}],["evaluates",{"_index":1152,"title":{},"body":{"miscellaneous/variables.html":{}}}],["event",{"_index":1097,"title":{},"body":{"license.html":{}}}],["eviction",{"_index":598,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["evictionstrategy",{"_index":259,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"miscellaneous/typealiases.html":{}}}],["example",{"_index":1008,"title":{},"body":{"index.html":{}}}],["exceeds",{"_index":742,"title":{},"body":{"classes/SearchEngine.html":{}}}],["excluding",{"_index":1176,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exclusion",{"_index":1144,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["exec",{"_index":476,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["executes",{"_index":529,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["exists",{"_index":448,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["exit",{"_index":548,"title":{},"body":{"classes/QueryBuilder.html":{},"classes/SearchEngine.html":{}}}],["exits",{"_index":1169,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expanded",{"_index":711,"title":{},"body":{"classes/SearchEngine.html":{}}}],["expired",{"_index":610,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["expiry",{"_index":380,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["export",{"_index":22,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{}}}],["express",{"_index":1088,"title":{},"body":{"license.html":{}}}],["expression",{"_index":72,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["extended",{"_index":125,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["extends",{"_index":632,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["ezzat.vercel.app",{"_index":1132,"title":{},"body":{"properties.html":{}}}],["f\\d]{12",{"_index":1185,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f\\d]{3",{"_index":1183,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f\\d]{4",{"_index":1181,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f\\d]{8",{"_index":1180,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fahmy",{"_index":1052,"title":{},"body":{"license.html":{},"properties.html":{}}}],["false",{"_index":343,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryBuilder.html":{},"index.html":{}}}],["features",{"_index":856,"title":{},"body":{"changelog.html":{}}}],["fetchfn",{"_index":309,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["field",{"_index":94,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/variables.html":{}}}],["fields",{"_index":160,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"interfaces/MemozOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{}}}],["fields.foreach((field",{"_index":747,"title":{},"body":{"classes/SearchEngine.html":{}}}],["fieldtoken",{"_index":163,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"index.html":{}}}],["fieldtoken.includes(token",{"_index":1037,"title":{},"body":{"index.html":{}}}],["fieldtokens",{"_index":752,"title":{},"body":{"classes/SearchEngine.html":{}}}],["fieldtokens.foreach((fieldtoken",{"_index":756,"title":{},"body":{"classes/SearchEngine.html":{}}}],["fieldvalue",{"_index":748,"title":{},"body":{"classes/SearchEngine.html":{}}}],["fieldweight",{"_index":165,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"index.html":{}}}],["fieldweights",{"_index":11,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["fieldweights[field",{"_index":754,"title":{},"body":{"classes/SearchEngine.html":{}}}],["fifo",{"_index":333,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"miscellaneous/typealiases.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"changelog.html":{},"coverage.html":{}}}],["filepath",{"_index":421,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["files",{"_index":1062,"title":{},"body":{"license.html":{}}}],["filter",{"_index":385,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["filtering",{"_index":92,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["finally",{"_index":477,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["finally(onfinally",{"_index":498,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["finish",{"_index":414,"title":{},"body":{"classes/Mutex.html":{}}}],["first",{"_index":367,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["fitness",{"_index":1093,"title":{},"body":{"license.html":{}}}],["fixes",{"_index":874,"title":{},"body":{"changelog.html":{}}}],["flag",{"_index":137,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["flags",{"_index":75,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["following",{"_index":1079,"title":{},"body":{"license.html":{}}}],["form",{"_index":718,"title":{},"body":{"classes/SearchEngine.html":{},"miscellaneous/functions.html":{}}}],["found",{"_index":609,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["free",{"_index":1056,"title":{},"body":{"license.html":{}}}],["fs",{"_index":429,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["fs.createwritestream(this.filepath",{"_index":444,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["fs.existssync(this.filepath",{"_index":450,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["fspromises",{"_index":431,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["fspromises.access(this.filepath",{"_index":452,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["fspromises.mkdir(dir",{"_index":441,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["fspromises.readfile(this.filepath",{"_index":455,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["fspromises.writefile(this.filepath",{"_index":451,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["full",{"_index":667,"title":{},"body":{"classes/SearchEngine.html":{}}}],["function",{"_index":15,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/QueryBuilder.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":985,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1077,"title":{},"body":{"license.html":{}}}],["further",{"_index":555,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["fuzzy",{"_index":692,"title":{},"body":{"classes/SearchEngine.html":{},"index.html":{}}}],["fuzzysearchoptions",{"_index":1,"title":{"interfaces/FuzzySearchOptions.html":{}},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"coverage.html":{},"index.html":{}}}],["g",{"_index":54,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["generate",{"_index":737,"title":{},"body":{"classes/SearchEngine.html":{}}}],["generates",{"_index":997,"title":{},"body":{"miscellaneous/functions.html":{}}}],["generic",{"_index":724,"title":{},"body":{"classes/SearchEngine.html":{}}}],["get(key",{"_index":305,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["get(target",{"_index":579,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["getasync",{"_index":271,"title":{},"body":{"classes/LRUCache.html":{}}}],["getasync(key",{"_index":308,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["getbyid",{"_index":769,"title":{},"body":{"classes/Shard.html":{}}}],["getbyid(id",{"_index":778,"title":{},"body":{"classes/Shard.html":{}}}],["getcurrentdb",{"_index":802,"title":{},"body":{"classes/TransactionManager.html":{}}}],["getdocuments",{"_index":770,"title":{},"body":{"classes/Shard.html":{}}}],["getfromindex",{"_index":177,"title":{},"body":{"classes/IndexManager.html":{}}}],["getfromindex(query",{"_index":185,"title":{},"body":{"classes/IndexManager.html":{}}}],["gethitrate",{"_index":328,"title":{},"body":{"classes/LRUCache.html":{}}}],["getindex",{"_index":178,"title":{},"body":{"classes/IndexManager.html":{}}}],["getindex(fields",{"_index":191,"title":{},"body":{"classes/IndexManager.html":{}}}],["getkey",{"_index":217,"title":{},"body":{"classes/Indexing.html":{}}}],["getkey(document",{"_index":225,"title":{},"body":{"classes/Indexing.html":{}}}],["getmany",{"_index":962,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getmissrate",{"_index":330,"title":{},"body":{"classes/LRUCache.html":{}}}],["getone",{"_index":964,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["gets",{"_index":418,"title":{},"body":{"classes/Mutex.html":{}}}],["getsize",{"_index":326,"title":{},"body":{"classes/LRUCache.html":{}}}],["getstats",{"_index":593,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["getting",{"_index":828,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["gh",{"_index":877,"title":{},"body":{"changelog.html":{}}}],["git+https://github.com/miladezzat/memoz.git",{"_index":1129,"title":{},"body":{"properties.html":{}}}],["given",{"_index":604,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"miscellaneous/variables.html":{}}}],["global",{"_index":55,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["grams",{"_index":701,"title":{},"body":{"classes/SearchEngine.html":{}}}],["granted",{"_index":1055,"title":{},"body":{"license.html":{}}}],["greater",{"_index":1140,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["gt",{"_index":26,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["gte",{"_index":27,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["guidelines",{"_index":838,"title":{},"body":{"changelog.html":{}}}],["handle",{"_index":247,"title":{},"body":{"classes/Indexing.html":{},"miscellaneous/variables.html":{}}}],["has(key",{"_index":312,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["hash",{"_index":1124,"title":{},"body":{"properties.html":{}}}],["hereby",{"_index":1054,"title":{},"body":{"license.html":{}}}],["highest",{"_index":760,"title":{},"body":{"classes/SearchEngine.html":{}}}],["hit",{"_index":614,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["hit/miss",{"_index":612,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["hitcount",{"_index":260,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["hitrate",{"_index":279,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["hits",{"_index":606,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["hold",{"_index":820,"title":{},"body":{"classes/TransactionManager.html":{}}}],["holders",{"_index":1099,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":1125,"title":{},"body":{"properties.html":{}}}],["https://github.com/miladezzat/memoz/issues",{"_index":1127,"title":{},"body":{"properties.html":{}}}],["https://memoz.js.org",{"_index":1126,"title":{},"body":{"properties.html":{}}}],["https://milad",{"_index":1131,"title":{},"body":{"properties.html":{}}}],["husky",{"_index":907,"title":{},"body":{"changelog.html":{}}}],["id",{"_index":126,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/Indexing.html":{},"interfaces/MemozOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["id.ts",{"_index":941,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":34,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["implementation",{"_index":663,"title":{},"body":{"classes/SearchEngine.html":{}}}],["implements",{"_index":467,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["implied",{"_index":1089,"title":{},"body":{"license.html":{}}}],["import",{"_index":199,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"index.html":{}}}],["include",{"_index":50,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["included",{"_index":1083,"title":{},"body":{"license.html":{}}}],["includes",{"_index":73,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["including",{"_index":1066,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["inclusion",{"_index":1143,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["inclusion/exclusion",{"_index":1154,"title":{},"body":{"miscellaneous/variables.html":{}}}],["increases",{"_index":1035,"title":{},"body":{"index.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index.adddocument(doc",{"_index":201,"title":{},"body":{"classes/IndexManager.html":{}}}],["index.query(query",{"_index":208,"title":{},"body":{"classes/IndexManager.html":{}}}],["indexedids",{"_index":207,"title":{},"body":{"classes/IndexManager.html":{}}}],["indexedids.foreach((id",{"_index":209,"title":{},"body":{"classes/IndexManager.html":{}}}],["indexes",{"_index":173,"title":{},"body":{"classes/IndexManager.html":{}}}],["indexing",{"_index":193,"title":{"classes/Indexing.html":{}},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"coverage.html":{}}}],["indexmanager",{"_index":168,"title":{"classes/IndexManager.html":{}},"body":{"classes/IndexManager.html":{},"coverage.html":{}}}],["indicates",{"_index":141,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["indicating",{"_index":151,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["inequality",{"_index":1139,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{}}}],["initialize",{"_index":819,"title":{},"body":{"classes/TransactionManager.html":{}}}],["initializes",{"_index":597,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["inner",{"_index":549,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["input",{"_index":708,"title":{},"body":{"classes/SearchEngine.html":{}}}],["insensitive",{"_index":52,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["installation",{"_index":1006,"title":{},"body":{"index.html":{}}}],["instance",{"_index":633,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{}}}],["instanceof",{"_index":514,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["instead",{"_index":666,"title":{},"body":{"classes/SearchEngine.html":{}}}],["integration",{"_index":850,"title":{},"body":{"changelog.html":{}}}],["interface",{"_index":0,"title":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"coverage.html":{},"index.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"overview.html":{}}}],["interval",{"_index":337,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["invalidate",{"_index":594,"title":{},"body":{"classes/QueryCache.html":{}}}],["invalidate(key",{"_index":617,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["invalidates",{"_index":618,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["isexpired",{"_index":272,"title":{},"body":{"classes/LRUCache.html":{}}}],["isexpired(entry",{"_index":314,"title":{},"body":{"classes/LRUCache.html":{}}}],["isobject",{"_index":970,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isresolved",{"_index":469,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["isvalidmemozid",{"_index":971,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["it's",{"_index":521,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["item",{"_index":759,"title":{},"body":{"classes/SearchEngine.html":{}}}],["item[field",{"_index":749,"title":{},"body":{"classes/SearchEngine.html":{}}}],["iterate",{"_index":1029,"title":{},"body":{"index.html":{}}}],["iuser",{"_index":1012,"title":{},"body":{"index.html":{}}}],["js",{"_index":895,"title":{},"body":{"changelog.html":{}}}],["json",{"_index":906,"title":{},"body":{"changelog.html":{}}}],["json.parse(data",{"_index":457,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["json.parse(serializedcache",{"_index":389,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["json.stringify(entries",{"_index":388,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["json.stringify(paginatedresult",{"_index":563,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["json.stringify(this.result",{"_index":562,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["k",{"_index":298,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["key",{"_index":129,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"properties.html":{}}}],["keyof",{"_index":100,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{}}}],["keys",{"_index":635,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["keywords",{"_index":1115,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":1087,"title":{},"body":{"license.html":{}}}],["length",{"_index":1022,"title":{},"body":{"index.html":{}}}],["less",{"_index":1142,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["levenshtein",{"_index":662,"title":{},"body":{"classes/SearchEngine.html":{}}}],["levenshteincache",{"_index":647,"title":{},"body":{"classes/SearchEngine.html":{}}}],["levenshteindistance",{"_index":650,"title":{},"body":{"classes/SearchEngine.html":{}}}],["levenshteindistance(a",{"_index":659,"title":{},"body":{"classes/SearchEngine.html":{}}}],["liability",{"_index":1103,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1100,"title":{},"body":{"license.html":{}}}],["license",{"_index":1046,"title":{"license.html":{}},"body":{"license.html":{}}}],["limit",{"_index":478,"title":{},"body":{"classes/QueryBuilder.html":{},"classes/SearchEngine.html":{}}}],["limit(limit",{"_index":671,"title":{},"body":{"classes/SearchEngine.html":{}}}],["limit(limitcount",{"_index":501,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["limitation",{"_index":1067,"title":{},"body":{"license.html":{}}}],["limitcount",{"_index":470,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["limited",{"_index":1090,"title":{},"body":{"license.html":{}}}],["line",{"_index":341,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryBuilder.html":{}}}],["list",{"_index":603,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"properties.html":{}}}],["literal",{"_index":315,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":453,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["loadfromdisk",{"_index":422,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["location",{"_index":1014,"title":{},"body":{"index.html":{}}}],["lock",{"_index":398,"title":{},"body":{"classes/Mutex.html":{}}}],["lock(callback",{"_index":401,"title":{},"body":{"classes/Mutex.html":{}}}],["locking",{"_index":404,"title":{},"body":{"classes/Mutex.html":{}}}],["logic",{"_index":119,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["logical",{"_index":115,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["loop",{"_index":550,"title":{},"body":{"classes/QueryBuilder.html":{},"index.html":{}}}],["lowercasing",{"_index":680,"title":{},"body":{"classes/SearchEngine.html":{}}}],["lru",{"_index":332,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"miscellaneous/typealiases.html":{}}}],["lrucache",{"_index":253,"title":{"classes/LRUCache.html":{}},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"coverage.html":{}}}],["lrucacheoptions",{"_index":282,"title":{"interfaces/LRUCacheOptions.html":{}},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"coverage.html":{}}}],["lt",{"_index":28,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["lte",{"_index":29,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["m",{"_index":57,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["made",{"_index":553,"title":{},"body":{"classes/QueryBuilder.html":{},"classes/TransactionManager.html":{}}}],["main",{"_index":690,"title":{},"body":{"classes/SearchEngine.html":{},"classes/TransactionManager.html":{}}}],["manager.ts",{"_index":171,"title":{},"body":{"classes/IndexManager.html":{},"classes/PersistenceManager.html":{},"classes/TransactionManager.html":{},"coverage.html":{}}}],["manager.ts:11",{"_index":425,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["manager.ts:14",{"_index":192,"title":{},"body":{"classes/IndexManager.html":{},"classes/TransactionManager.html":{}}}],["manager.ts:18",{"_index":187,"title":{},"body":{"classes/IndexManager.html":{}}}],["manager.ts:19",{"_index":428,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["manager.ts:24",{"_index":805,"title":{},"body":{"classes/TransactionManager.html":{}}}],["manager.ts:31",{"_index":184,"title":{},"body":{"classes/IndexManager.html":{},"classes/PersistenceManager.html":{}}}],["manager.ts:34",{"_index":807,"title":{},"body":{"classes/TransactionManager.html":{}}}],["manager.ts:4",{"_index":804,"title":{},"body":{"classes/TransactionManager.html":{}}}],["manager.ts:47",{"_index":806,"title":{},"body":{"classes/TransactionManager.html":{}}}],["manager.ts:6",{"_index":183,"title":{},"body":{"classes/IndexManager.html":{},"classes/TransactionManager.html":{}}}],["manager.ts:7",{"_index":426,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["manager.ts:8",{"_index":196,"title":{},"body":{"classes/IndexManager.html":{},"classes/TransactionManager.html":{}}}],["manager.ts:9",{"_index":427,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["many",{"_index":465,"title":{},"body":{"classes/QueryBuilder.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["many.ts",{"_index":961,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["map",{"_index":180,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/PersistenceManager.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}}}],["map(([key",{"_index":386,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["map(this.db",{"_index":818,"title":{},"body":{"classes/TransactionManager.html":{}}}],["mark",{"_index":569,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["matches",{"_index":62,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["matching",{"_index":53,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matrix",{"_index":668,"title":{},"body":{"classes/SearchEngine.html":{}}}],["max",{"_index":676,"title":{},"body":{"classes/SearchEngine.html":{}}}],["maxdistance",{"_index":12,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"index.html":{}}}],["maximum",{"_index":675,"title":{},"body":{"classes/SearchEngine.html":{}}}],["maxsize",{"_index":261,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["mechanism",{"_index":405,"title":{},"body":{"classes/Mutex.html":{}}}],["memory",{"_index":670,"title":{},"body":{"classes/SearchEngine.html":{},"index.html":{},"properties.html":{}}}],["memoz",{"_index":35,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["memoz.createmany(docs",{"_index":1024,"title":{},"body":{"index.html":{}}}],["memoz.fuzzysearch('user",{"_index":1041,"title":{},"body":{"index.html":{}}}],["memoz_id_pattern",{"_index":943,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["memoz_id_pattern.test(memozid",{"_index":1179,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memoz_id_template",{"_index":945,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["memozid",{"_index":42,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["memozid.length",{"_index":1177,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memozoptions",{"_index":146,"title":{"interfaces/MemozOptions.html":{}},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"coverage.html":{}}}],["memozusage",{"_index":1011,"title":{},"body":{"index.html":{}}}],["merchantability",{"_index":1092,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1069,"title":{},"body":{"license.html":{}}}],["method",{"_index":901,"title":{},"body":{"changelog.html":{}}}],["methods",{"_index":174,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"changelog.html":{}}}],["metrics",{"_index":636,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["milad",{"_index":1050,"title":{},"body":{"license.html":{},"properties.html":{}}}],["miladezzat/memoz",{"_index":876,"title":{},"body":{"changelog.html":{}}}],["minute",{"_index":335,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["miscellaneous",{"_index":984,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["miss",{"_index":615,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["misscount",{"_index":262,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["misses",{"_index":607,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["missrate",{"_index":280,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["mit",{"_index":1047,"title":{},"body":{"license.html":{}}}],["mode",{"_index":59,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["model",{"_index":1114,"title":{},"body":{"properties.html":{}}}],["modify",{"_index":78,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"license.html":{}}}],["modules",{"_index":1111,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":104,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/variables.html":{}}}],["multiline",{"_index":58,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["multiple",{"_index":134,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["mutex",{"_index":154,"title":{"classes/Mutex.html":{}},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"interfaces/SimpleCondition.html":{},"coverage.html":{},"index.html":{}}}],["n",{"_index":143,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{}}}],["name",{"_index":189,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["needed",{"_index":536,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["neq",{"_index":25,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["nested",{"_index":377,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["never",{"_index":565,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["new",{"_index":181,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["newline",{"_index":63,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["next",{"_index":340,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryBuilder.html":{}}}],["ngrams",{"_index":739,"title":{},"body":{"classes/SearchEngine.html":{}}}],["ngramsize",{"_index":13,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{}}}],["nin",{"_index":30,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["node",{"_index":113,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["node.$and.every((subnode",{"_index":1156,"title":{},"body":{"miscellaneous/variables.html":{}}}],["node.$or.some((subnode",{"_index":1159,"title":{},"body":{"miscellaneous/variables.html":{}}}],["node.ts",{"_index":957,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["nodejs",{"_index":1119,"title":{},"body":{"properties.html":{}}}],["nodejs.timeout",{"_index":287,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["nodes",{"_index":116,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["non",{"_index":1175,"title":{},"body":{"miscellaneous/variables.html":{}}}],["noninfringement",{"_index":1096,"title":{},"body":{"license.html":{}}}],["normalization",{"_index":722,"title":{},"body":{"classes/SearchEngine.html":{}}}],["normalizationcache",{"_index":648,"title":{},"body":{"classes/SearchEngine.html":{}}}],["normalize",{"_index":679,"title":{},"body":{"classes/SearchEngine.html":{}}}],["normalized",{"_index":726,"title":{},"body":{"classes/SearchEngine.html":{}}}],["normalizedfieldvalue",{"_index":750,"title":{},"body":{"classes/SearchEngine.html":{}}}],["normalizewithcache",{"_index":652,"title":{},"body":{"classes/SearchEngine.html":{}}}],["normalizewithcache(text",{"_index":677,"title":{},"body":{"classes/SearchEngine.html":{}}}],["notable",{"_index":831,"title":{},"body":{"changelog.html":{}}}],["notice",{"_index":1081,"title":{},"body":{"license.html":{}}}],["now",{"_index":345,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["npm",{"_index":1009,"title":{},"body":{"index.html":{}}}],["null",{"_index":658,"title":{},"body":{"classes/SearchEngine.html":{},"classes/TransactionManager.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":18,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["number.max_safe_integer",{"_index":484,"title":{},"body":{"classes/QueryBuilder.html":{},"classes/SearchEngine.html":{}}}],["object",{"_index":36,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["object.entries(sortobj).foreach(([key",{"_index":541,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["object.ts",{"_index":969,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["objects",{"_index":86,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["obtaining",{"_index":1059,"title":{},"body":{"license.html":{}}}],["offering",{"_index":1001,"title":{},"body":{"index.html":{}}}],["oldest",{"_index":369,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["oldestentry",{"_index":371,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["oldestentry.value",{"_index":375,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["oldestkey",{"_index":365,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["one",{"_index":122,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/variables.html":{}}}],["one.ts",{"_index":963,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["onevict",{"_index":263,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["onfinally",{"_index":500,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["onfulfilled",{"_index":512,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["onrejected",{"_index":496,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["operation",{"_index":132,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["operations",{"_index":48,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["operator",{"_index":95,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/variables.html":{}}}],["operators",{"_index":1137,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["optimized",{"_index":661,"title":{},"body":{"classes/SearchEngine.html":{}}}],["optional",{"_index":9,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["options",{"_index":47,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["order",{"_index":542,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["original",{"_index":459,"title":{},"body":{"classes/PersistenceManager.html":{},"classes/TransactionManager.html":{}}}],["otherwise",{"_index":522,"title":{},"body":{"classes/QueryBuilder.html":{},"license.html":{}}}],["out",{"_index":1108,"title":{},"body":{"license.html":{}}}],["outer",{"_index":556,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["over",{"_index":1030,"title":{},"body":{"index.html":{}}}],["overriding",{"_index":631,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["overview",{"_index":1112,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":905,"title":{"properties.html":{}},"body":{"changelog.html":{}}}],["page",{"_index":1032,"title":{},"body":{"index.html":{}}}],["pages",{"_index":878,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["paginated",{"_index":531,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["paginatedresult",{"_index":559,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["pagination",{"_index":558,"title":{},"body":{"classes/QueryBuilder.html":{},"index.html":{}}}],["param",{"_index":637,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{}}}],["parameters",{"_index":188,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"miscellaneous/functions.html":{}}}],["particular",{"_index":1094,"title":{},"body":{"license.html":{}}}],["partition",{"_index":786,"title":{},"body":{"classes/Shard.html":{}}}],["partitiondocumentsby",{"_index":771,"title":{},"body":{"classes/Shard.html":{}}}],["partitiondocumentsby(field",{"_index":781,"title":{},"body":{"classes/Shard.html":{}}}],["partitions",{"_index":789,"title":{},"body":{"classes/Shard.html":{}}}],["partitions[key",{"_index":792,"title":{},"body":{"classes/Shard.html":{}}}],["partitions[key].push(doc",{"_index":793,"title":{},"body":{"classes/Shard.html":{}}}],["pass",{"_index":1155,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passed",{"_index":211,"title":{},"body":{"classes/IndexManager.html":{}}}],["path",{"_index":147,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"interfaces/SimpleCondition.html":{}}}],["path.dirname(this.filepath",{"_index":440,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["path.resolve(filepath",{"_index":436,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["pattern",{"_index":74,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["per",{"_index":643,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"index.html":{}}}],["perform",{"_index":1040,"title":{},"body":{"index.html":{}}}],["performance",{"_index":686,"title":{},"body":{"classes/SearchEngine.html":{},"properties.html":{}}}],["performance.now",{"_index":346,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["performs",{"_index":691,"title":{},"body":{"classes/SearchEngine.html":{}}}],["permission",{"_index":1053,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1075,"title":{},"body":{"license.html":{}}}],["persist",{"_index":152,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"index.html":{},"properties.html":{}}}],["persistence",{"_index":1005,"title":{},"body":{"index.html":{}}}],["persistencemanager",{"_index":419,"title":{"classes/PersistenceManager.html":{}},"body":{"classes/PersistenceManager.html":{},"coverage.html":{}}}],["persists",{"_index":1000,"title":{},"body":{"index.html":{},"properties.html":{}}}],["persisttodisk",{"_index":153,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"interfaces/SimpleCondition.html":{},"index.html":{}}}],["person",{"_index":1058,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1076,"title":{},"body":{"license.html":{}}}],["pipeline",{"_index":852,"title":{},"body":{"changelog.html":{}}}],["pipelining",{"_index":1117,"title":{},"body":{"properties.html":{}}}],["populate",{"_index":462,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["portions",{"_index":1085,"title":{},"body":{"license.html":{}}}],["precompile",{"_index":1165,"title":{},"body":{"miscellaneous/variables.html":{}}}],["presist",{"_index":857,"title":{},"body":{"changelog.html":{}}}],["prevrow",{"_index":743,"title":{},"body":{"classes/SearchEngine.html":{}}}],["primitive",{"_index":84,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["private",{"_index":172,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}}}],["process",{"_index":1045,"title":{},"body":{"index.html":{}}}],["progress",{"_index":810,"title":{},"body":{"classes/TransactionManager.html":{}}}],["project",{"_index":832,"title":{},"body":{"changelog.html":{}}}],["promise",{"_index":311,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{}}}],["promise.resolve",{"_index":399,"title":{},"body":{"classes/Mutex.html":{}}}],["promiselike",{"_index":468,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["promises",{"_index":430,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["prop",{"_index":580,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["property",{"_index":244,"title":{},"body":{"classes/Indexing.html":{},"miscellaneous/variables.html":{}}}],["provide",{"_index":447,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["provided",{"_index":622,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["proxy",{"_index":573,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["proxy(builder",{"_index":578,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["public",{"_index":175,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}}}],["publish",{"_index":1070,"title":{},"body":{"license.html":{}}}],["pubsub",{"_index":1120,"title":{},"body":{"properties.html":{}}}],["punctuation",{"_index":685,"title":{},"body":{"classes/SearchEngine.html":{}}}],["purpose",{"_index":1095,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":571,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["query",{"_index":190,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/QueryBuilder.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["query(query",{"_index":227,"title":{},"body":{"classes/Indexing.html":{}}}],["querybuilder",{"_index":463,"title":{"classes/QueryBuilder.html":{}},"body":{"classes/QueryBuilder.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["querycache",{"_index":471,"title":{"classes/QueryCache.html":{}},"body":{"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"coverage.html":{}}}],["querycacheoptions",{"_index":595,"title":{"interfaces/QueryCacheOptions.html":{}},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"coverage.html":{}}}],["querykey",{"_index":472,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["queue",{"_index":1118,"title":{},"body":{"properties.html":{}}}],["ram",{"_index":1122,"title":{},"body":{"properties.html":{}}}],["readonly",{"_index":1013,"title":{},"body":{"index.html":{}}}],["reason",{"_index":493,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["receiver",{"_index":581,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["record",{"_index":90,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryBuilder.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["recursive",{"_index":442,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["redis",{"_index":1116,"title":{},"body":{"properties.html":{}}}],["reduce",{"_index":1166,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refactors",{"_index":911,"title":{},"body":{"changelog.html":{}}}],["reference",{"_index":460,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["reflect.get(target",{"_index":582,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["reflect.ownkeys(value).length",{"_index":1174,"title":{},"body":{"miscellaneous/variables.html":{}}}],["regex",{"_index":31,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["regexcondition",{"_index":76,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["regexoptions",{"_index":68,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["regexp",{"_index":77,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["regular",{"_index":71,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["relevance",{"_index":703,"title":{},"body":{"classes/SearchEngine.html":{}}}],["remove",{"_index":623,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"changelog.html":{}}}],["removeaccents",{"_index":980,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["removeaccents(text",{"_index":719,"title":{},"body":{"classes/SearchEngine.html":{},"miscellaneous/functions.html":{}}}],["removeaccents(text.tolowercase().trim()).replace(/[^\\w\\s]|_/g",{"_index":732,"title":{},"body":{"classes/SearchEngine.html":{}}}],["removedocument",{"_index":218,"title":{},"body":{"classes/Indexing.html":{}}}],["removedocument(document",{"_index":229,"title":{},"body":{"classes/Indexing.html":{}}}],["removes",{"_index":619,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"miscellaneous/functions.html":{}}}],["removing",{"_index":681,"title":{},"body":{"classes/SearchEngine.html":{}}}],["reorder",{"_index":273,"title":{},"body":{"classes/LRUCache.html":{}}}],["reorder(key",{"_index":318,"title":{},"body":{"classes/LRUCache.html":{}}}],["repeated",{"_index":1167,"title":{},"body":{"miscellaneous/variables.html":{}}}],["repository",{"_index":1128,"title":{},"body":{"properties.html":{}}}],["represents",{"_index":32,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["requested",{"_index":738,"title":{},"body":{"classes/SearchEngine.html":{}}}],["resolve",{"_index":409,"title":{},"body":{"classes/Mutex.html":{},"changelog.html":{}}}],["resolvedresult",{"_index":532,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["resolvedresult.slice(this.skipcount",{"_index":560,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["resolvedresult.sort((a",{"_index":538,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["resolveresult",{"_index":479,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["resolves",{"_index":520,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["restore",{"_index":827,"title":{},"body":{"classes/TransactionManager.html":{}}}],["restriction",{"_index":1065,"title":{},"body":{"license.html":{}}}],["result",{"_index":130,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["resultlimit",{"_index":649,"title":{},"body":{"classes/SearchEngine.html":{}}}],["resultpromise",{"_index":412,"title":{},"body":{"classes/Mutex.html":{},"classes/QueryBuilder.html":{}}}],["resultpromise.then",{"_index":416,"title":{},"body":{"classes/Mutex.html":{}}}],["results",{"_index":166,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results.add(doc",{"_index":213,"title":{},"body":{"classes/IndexManager.html":{}}}],["results.push",{"_index":758,"title":{},"body":{"classes/SearchEngine.html":{}}}],["results.sort((a",{"_index":762,"title":{},"body":{"classes/SearchEngine.html":{}}}],["retrieve",{"_index":608,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["retrieves",{"_index":602,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["return",{"_index":202,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/Mutex.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":674,"title":{},"body":{"classes/SearchEngine.html":{}}}],["returns",{"_index":110,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"miscellaneous/functions.html":{}}}],["rights",{"_index":1068,"title":{},"body":{"license.html":{}}}],["rollback",{"_index":826,"title":{},"body":{"classes/TransactionManager.html":{}}}],["rollbacktransaction",{"_index":803,"title":{},"body":{"classes/TransactionManager.html":{}}}],["rows",{"_index":665,"title":{},"body":{"classes/SearchEngine.html":{}}}],["rules",{"_index":40,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["run",{"_index":410,"title":{},"body":{"classes/Mutex.html":{}}}],["s",{"_index":60,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["safety",{"_index":1017,"title":{},"body":{"index.html":{}}}],["save",{"_index":669,"title":{},"body":{"classes/SearchEngine.html":{}}}],["savetodisk",{"_index":423,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["score",{"_index":704,"title":{},"body":{"classes/SearchEngine.html":{},"index.html":{}}}],["scoring",{"_index":158,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["scoringstrategy",{"_index":14,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"index.html":{}}}],["search",{"_index":56,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["search(searchterm",{"_index":688,"title":{},"body":{"classes/SearchEngine.html":{}}}],["searchengine",{"_index":644,"title":{"classes/SearchEngine.html":{}},"body":{"classes/SearchEngine.html":{},"coverage.html":{}}}],["searchengine.normalizewithcache(fieldvalue",{"_index":751,"title":{},"body":{"classes/SearchEngine.html":{}}}],["searchengine.tokenize(normalizedfieldvalue",{"_index":753,"title":{},"body":{"classes/SearchEngine.html":{}}}],["searching",{"_index":697,"title":{},"body":{"classes/SearchEngine.html":{}}}],["searchterm",{"_index":695,"title":{},"body":{"classes/SearchEngine.html":{}}}],["searchtokens.foreach((token",{"_index":755,"title":{},"body":{"classes/SearchEngine.html":{}}}],["see",{"_index":834,"title":{},"body":{"changelog.html":{}}}],["sell",{"_index":1073,"title":{},"body":{"license.html":{}}}],["serialize",{"_index":274,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["serializedcache",{"_index":302,"title":{},"body":{"classes/LRUCache.html":{}}}],["set",{"_index":205,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["set(key",{"_index":321,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["setinterval",{"_index":354,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["sets",{"_index":673,"title":{},"body":{"classes/SearchEngine.html":{}}}],["setup",{"_index":886,"title":{},"body":{"changelog.html":{}}}],["shall",{"_index":1082,"title":{},"body":{"license.html":{}}}],["shard",{"_index":766,"title":{"classes/Shard.html":{}},"body":{"classes/Shard.html":{},"coverage.html":{}}}],["simple",{"_index":91,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["simplecondition",{"_index":98,"title":{"interfaces/SimpleCondition.html":{}},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["size",{"_index":278,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"miscellaneous/functions.html":{}}}],["skip",{"_index":480,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["skip(skipcount",{"_index":504,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["skipcount",{"_index":473,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["smaller",{"_index":991,"title":{},"body":{"miscellaneous/functions.html":{}}}],["snapshot",{"_index":812,"title":{},"body":{"classes/TransactionManager.html":{}}}],["software",{"_index":1061,"title":{},"body":{"license.html":{}}}],["solve",{"_index":919,"title":{},"body":{"changelog.html":{}}}],["sort",{"_index":481,"title":{},"body":{"classes/QueryBuilder.html":{},"classes/SearchEngine.html":{}}}],["sort(sortconditions",{"_index":506,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["sortconditions",{"_index":474,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["sorted",{"_index":530,"title":{},"body":{"classes/QueryBuilder.html":{},"properties.html":{}}}],["sortedresults",{"_index":761,"title":{},"body":{"classes/SearchEngine.html":{}}}],["sortedresults.slice(0",{"_index":765,"title":{},"body":{"classes/SearchEngine.html":{}}}],["sorting",{"_index":535,"title":{},"body":{"classes/QueryBuilder.html":{},"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{}}}],["specific",{"_index":630,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{}}}],["specified",{"_index":993,"title":{},"body":{"miscellaneous/functions.html":{}}}],["split",{"_index":994,"title":{},"body":{"miscellaneous/functions.html":{}}}],["splits",{"_index":736,"title":{},"body":{"classes/SearchEngine.html":{},"miscellaneous/functions.html":{}}}],["src/.../evaluate",{"_index":1146,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../get",{"_index":987,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../helper.ts",{"_index":986,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../is",{"_index":1147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../lru",{"_index":1136,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../memoz",{"_index":988,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../search",{"_index":989,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../types.ts",{"_index":1135,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/constants/memoz",{"_index":940,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/memoz.ts",{"_index":946,"title":{},"body":{"coverage.html":{}}}],["src/types.ts",{"_index":6,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/utils/evaluate",{"_index":953,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/get",{"_index":464,"title":{},"body":{"classes/QueryBuilder.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/utils/helper.ts",{"_index":965,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/index",{"_index":170,"title":{},"body":{"classes/IndexManager.html":{},"coverage.html":{}}}],["src/utils/indexing.ts",{"_index":215,"title":{},"body":{"classes/Indexing.html":{},"coverage.html":{}}}],["src/utils/indexing.ts:13",{"_index":224,"title":{},"body":{"classes/Indexing.html":{}}}],["src/utils/indexing.ts:21",{"_index":230,"title":{},"body":{"classes/Indexing.html":{}}}],["src/utils/indexing.ts:31",{"_index":228,"title":{},"body":{"classes/Indexing.html":{}}}],["src/utils/indexing.ts:36",{"_index":226,"title":{},"body":{"classes/Indexing.html":{}}}],["src/utils/indexing.ts:4",{"_index":222,"title":{},"body":{"classes/Indexing.html":{}}}],["src/utils/indexing.ts:6",{"_index":221,"title":{},"body":{"classes/Indexing.html":{}}}],["src/utils/is",{"_index":968,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/lru",{"_index":254,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/utils/memoz",{"_index":973,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/mutex.ts",{"_index":397,"title":{},"body":{"classes/Mutex.html":{},"coverage.html":{}}}],["src/utils/mutex.ts:2",{"_index":400,"title":{},"body":{"classes/Mutex.html":{}}}],["src/utils/mutex.ts:4",{"_index":402,"title":{},"body":{"classes/Mutex.html":{}}}],["src/utils/persistence",{"_index":420,"title":{},"body":{"classes/PersistenceManager.html":{},"coverage.html":{}}}],["src/utils/query",{"_index":590,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"coverage.html":{}}}],["src/utils/search",{"_index":645,"title":{},"body":{"classes/SearchEngine.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/shared.ts",{"_index":767,"title":{},"body":{"classes/Shard.html":{},"coverage.html":{}}}],["src/utils/shared.ts:14",{"_index":780,"title":{},"body":{"classes/Shard.html":{}}}],["src/utils/shared.ts:19",{"_index":782,"title":{},"body":{"classes/Shard.html":{}}}],["src/utils/shared.ts:33",{"_index":779,"title":{},"body":{"classes/Shard.html":{}}}],["src/utils/shared.ts:37",{"_index":777,"title":{},"body":{"classes/Shard.html":{}}}],["src/utils/shared.ts:45",{"_index":775,"title":{},"body":{"classes/Shard.html":{}}}],["src/utils/shared.ts:6",{"_index":772,"title":{},"body":{"classes/Shard.html":{}}}],["src/utils/shared.ts:9",{"_index":774,"title":{},"body":{"classes/Shard.html":{}}}],["src/utils/transaction",{"_index":797,"title":{},"body":{"classes/TransactionManager.html":{},"coverage.html":{}}}],["standard",{"_index":835,"title":{},"body":{"changelog.html":{}}}],["start",{"_index":1044,"title":{},"body":{"index.html":{}}}],["startcleanup",{"_index":275,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["started",{"_index":829,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["state",{"_index":813,"title":{},"body":{"classes/TransactionManager.html":{}}}],["statements",{"_index":939,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":651,"title":{},"body":{"classes/SearchEngine.html":{}}}],["statistics",{"_index":613,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["stayalive",{"_index":264,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["stemming/lemmatization",{"_index":712,"title":{},"body":{"classes/SearchEngine.html":{}}}],["sticky",{"_index":67,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["stop",{"_index":554,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["stopcleanup",{"_index":276,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["storage",{"_index":145,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"properties.html":{}}}],["storagepath",{"_index":150,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"index.html":{}}}],["store",{"_index":727,"title":{},"body":{"classes/SearchEngine.html":{},"index.html":{}}}],["stores",{"_index":634,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["storing",{"_index":148,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["strategy",{"_index":161,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["stricter",{"_index":38,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["string",{"_index":43,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["string(doc[field",{"_index":791,"title":{},"body":{"classes/Shard.html":{}}}],["string|undefined",{"_index":432,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["strip",{"_index":723,"title":{},"body":{"classes/SearchEngine.html":{}}}],["structure",{"_index":114,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["subject",{"_index":1078,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":1072,"title":{},"body":{"license.html":{}}}],["subnode",{"_index":1158,"title":{},"body":{"miscellaneous/variables.html":{}}}],["substantial",{"_index":1084,"title":{},"body":{"license.html":{}}}],["success",{"_index":136,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["successful",{"_index":142,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["supported",{"_index":49,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["supports",{"_index":628,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["switch",{"_index":1150,"title":{},"body":{"miscellaneous/variables.html":{}}}],["symbol.tostringtag",{"_index":572,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["t",{"_index":101,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":983,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":982,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":811,"title":{},"body":{"classes/TransactionManager.html":{}}}],["takes",{"_index":107,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["template",{"_index":998,"title":{},"body":{"miscellaneous/functions.html":{}}}],["temporary",{"_index":821,"title":{},"body":{"classes/TransactionManager.html":{}}}],["term",{"_index":694,"title":{},"body":{"classes/SearchEngine.html":{}}}],["terms",{"_index":710,"title":{},"body":{"classes/SearchEngine.html":{}}}],["ternaries",{"_index":378,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["test",{"_index":1025,"title":{},"body":{"index.html":{}}}],["testing",{"_index":936,"title":{},"body":{"changelog.html":{}}}],["tests",{"_index":934,"title":{},"body":{"changelog.html":{}}}],["text",{"_index":687,"title":{},"body":{"classes/SearchEngine.html":{},"miscellaneous/functions.html":{}}}],["text.normalize('nfd').replace(/[\\u0300",{"_index":720,"title":{},"body":{"classes/SearchEngine.html":{}}}],["text.split(/\\s",{"_index":735,"title":{},"body":{"classes/SearchEngine.html":{}}}],["themselves",{"_index":139,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["then(onfulfilled",{"_index":508,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.cache",{"_index":639,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["this.cache.clear",{"_index":383,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["this.cache.delete(key",{"_index":348,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["this.cache.delete(oldestkey",{"_index":373,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.cache.get(key",{"_index":357,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["this.cache.get(oldestkey",{"_index":372,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.cache.has(key",{"_index":362,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.cache.keys().next().value",{"_index":368,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.cache.keys()].shift",{"_index":370,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.cache.set(key",{"_index":382,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["this.cache.size",{"_index":363,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.cachehits",{"_index":640,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["this.cachemisses",{"_index":641,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["this.cleanupexpiredentries",{"_index":355,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.cleanupinterval",{"_index":352,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.cleanuptimer",{"_index":353,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.db",{"_index":434,"title":{},"body":{"classes/PersistenceManager.html":{},"classes/SearchEngine.html":{},"classes/TransactionManager.html":{}}}],["this.db.clear",{"_index":458,"title":{},"body":{"classes/PersistenceManager.html":{},"classes/Shard.html":{}}}],["this.db.delete(id",{"_index":795,"title":{},"body":{"classes/Shard.html":{}}}],["this.db.get(id",{"_index":794,"title":{},"body":{"classes/Shard.html":{}}}],["this.db.set(doc.id",{"_index":784,"title":{},"body":{"classes/Shard.html":{}}}],["this.db.set(key",{"_index":461,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["this.dbsnapshot",{"_index":817,"title":{},"body":{"classes/TransactionManager.html":{}}}],["this.entries",{"_index":387,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.evictionstrategy",{"_index":366,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.exec().catch(onrejected",{"_index":567,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.exec().finally(onfinally",{"_index":568,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.exec().then(onfulfilled",{"_index":566,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.fields",{"_index":231,"title":{},"body":{"classes/Indexing.html":{}}}],["this.fields.map((field",{"_index":245,"title":{},"body":{"classes/Indexing.html":{}}}],["this.filepath",{"_index":435,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["this.get(key",{"_index":394,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.getdocuments().foreach((doc",{"_index":790,"title":{},"body":{"classes/Shard.html":{}}}],["this.getindex(object.keys(query",{"_index":206,"title":{},"body":{"classes/IndexManager.html":{}}}],["this.getkey(document",{"_index":233,"title":{},"body":{"classes/Indexing.html":{}}}],["this.getkey(query",{"_index":241,"title":{},"body":{"classes/Indexing.html":{}}}],["this.hitcount",{"_index":360,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.index",{"_index":232,"title":{},"body":{"classes/Indexing.html":{}}}],["this.index.delete(key",{"_index":240,"title":{},"body":{"classes/Indexing.html":{}}}],["this.index.get(key",{"_index":242,"title":{},"body":{"classes/Indexing.html":{}}}],["this.index.get(key)!.add(document.id",{"_index":236,"title":{},"body":{"classes/Indexing.html":{}}}],["this.index.get(key)!.delete(document.id",{"_index":237,"title":{},"body":{"classes/Indexing.html":{}}}],["this.index.get(key)!.size",{"_index":238,"title":{},"body":{"classes/Indexing.html":{}}}],["this.index.has(key",{"_index":234,"title":{},"body":{"classes/Indexing.html":{}}}],["this.index.set(key",{"_index":235,"title":{},"body":{"classes/Indexing.html":{}}}],["this.indexes.clear",{"_index":214,"title":{},"body":{"classes/IndexManager.html":{}}}],["this.indexes.foreach((index",{"_index":200,"title":{},"body":{"classes/IndexManager.html":{}}}],["this.indexes.get(fields.join('_",{"_index":203,"title":{},"body":{"classes/IndexManager.html":{}}}],["this.isexpired(entry",{"_index":359,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.isresolved",{"_index":517,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.levenshteincache",{"_index":728,"title":{},"body":{"classes/SearchEngine.html":{}}}],["this.levenshteindistance(token",{"_index":757,"title":{},"body":{"classes/SearchEngine.html":{}}}],["this.limitcount",{"_index":528,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.maxsize",{"_index":364,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.misscount",{"_index":358,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.mutex",{"_index":415,"title":{},"body":{"classes/Mutex.html":{}}}],["this.mutex.then",{"_index":413,"title":{},"body":{"classes/Mutex.html":{}}}],["this.normalizationcache",{"_index":729,"title":{},"body":{"classes/SearchEngine.html":{}}}],["this.onevict",{"_index":349,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.onevict(key",{"_index":350,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.onevict(oldestkey",{"_index":374,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.persisttodisk",{"_index":438,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["this.querycache",{"_index":518,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.querycache.set(this.querykey",{"_index":564,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.querykey",{"_index":519,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.reorder(key",{"_index":361,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.resolveresult",{"_index":533,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.result",{"_index":516,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.resultlimit",{"_index":730,"title":{},"body":{"classes/SearchEngine.html":{}}}],["this.resultpromise",{"_index":515,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.set(key",{"_index":391,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.skipcount",{"_index":527,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.sortconditions",{"_index":525,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.sortconditions.foreach((sortobj",{"_index":540,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.sortconditions.length",{"_index":537,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.transactiondb",{"_index":808,"title":{},"body":{"classes/TransactionManager.html":{}}}],["this.ttl",{"_index":381,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["thread",{"_index":1016,"title":{},"body":{"index.html":{}}}],["throw",{"_index":248,"title":{},"body":{"classes/Indexing.html":{},"classes/TransactionManager.html":{}}}],["timestamp",{"_index":999,"title":{},"body":{"miscellaneous/functions.html":{}}}],["titlebonus",{"_index":1036,"title":{},"body":{"index.html":{}}}],["token",{"_index":162,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"index.html":{}}}],["tokencount",{"_index":20,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["tokenize",{"_index":653,"title":{},"body":{"classes/SearchEngine.html":{}}}],["tokenize(text",{"_index":705,"title":{},"body":{"classes/SearchEngine.html":{}}}],["tokenizes",{"_index":707,"title":{},"body":{"classes/SearchEngine.html":{}}}],["tort",{"_index":1106,"title":{},"body":{"license.html":{}}}],["total",{"_index":392,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"index.html":{}}}],["totalpages",{"_index":1027,"title":{},"body":{"index.html":{}}}],["tracks",{"_index":605,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["transaction",{"_index":815,"title":{},"body":{"classes/TransactionManager.html":{},"changelog.html":{},"properties.html":{}}}],["transactiondb",{"_index":799,"title":{},"body":{"classes/TransactionManager.html":{}}}],["transactionmanager",{"_index":796,"title":{"classes/TransactionManager.html":{}},"body":{"classes/TransactionManager.html":{},"coverage.html":{}}}],["tresult",{"_index":495,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["tresult1",{"_index":510,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["tresult2",{"_index":511,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["trimming",{"_index":683,"title":{},"body":{"classes/SearchEngine.html":{}}}],["true",{"_index":121,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"interfaces/SimpleCondition.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["ttl",{"_index":265,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["two",{"_index":108,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{}}}],["type",{"_index":16,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1133,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":583,"title":{},"body":{"classes/QueryBuilder.html":{},"classes/SearchEngine.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":80,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"miscellaneous/typealiases.html":{}}}],["typescript",{"_index":1123,"title":{},"body":{"properties.html":{}}}],["typing",{"_index":39,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["u",{"_index":64,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["u036f]/g",{"_index":721,"title":{},"body":{"classes/SearchEngine.html":{}}}],["uncomment",{"_index":1019,"title":{},"body":{"index.html":{}}}],["undef",{"_index":342,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["undefined",{"_index":194,"title":{},"body":{"classes/IndexManager.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"miscellaneous/variables.html":{}}}],["unicode",{"_index":65,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["unique",{"_index":33,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["unit",{"_index":935,"title":{},"body":{"changelog.html":{}}}],["unknown",{"_index":1172,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update",{"_index":131,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"interfaces/SimpleCondition.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["updated",{"_index":138,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["updateindexes",{"_index":179,"title":{},"body":{"classes/IndexManager.html":{}}}],["updateindexes(doc",{"_index":195,"title":{},"body":{"classes/IndexManager.html":{}}}],["updatemanyresult",{"_index":140,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["updates",{"_index":627,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["usage",{"_index":1007,"title":{},"body":{"index.html":{}}}],["use",{"_index":523,"title":{},"body":{"classes/QueryBuilder.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":81,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["usemutex",{"_index":157,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"index.html":{}}}],["user",{"_index":696,"title":{},"body":{"classes/SearchEngine.html":{},"classes/Shard.html":{},"index.html":{}}}],["users",{"_index":1020,"title":{},"body":{"index.html":{}}}],["usersperpage",{"_index":1031,"title":{},"body":{"index.html":{}}}],["uses",{"_index":664,"title":{},"body":{"classes/SearchEngine.html":{}}}],["using",{"_index":70,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["utf8",{"_index":456,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["v",{"_index":307,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["valid",{"_index":46,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["value",{"_index":96,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["value.apply(target",{"_index":585,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["values",{"_index":82,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["valuetypes",{"_index":87,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["variable",{"_index":942,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1145,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":1153,"title":{},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":836,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["void",{"_index":198,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/Mutex.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}}}],["wait",{"_index":406,"title":{},"body":{"classes/Mutex.html":{}}}],["warranties",{"_index":1091,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1086,"title":{},"body":{"license.html":{}}}],["weights",{"_index":159,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{}}}],["whether",{"_index":1015,"title":{},"body":{"index.html":{},"license.html":{}}}],["whitespace",{"_index":684,"title":{},"body":{"classes/SearchEngine.html":{}}}],["within",{"_index":698,"title":{},"body":{"classes/SearchEngine.html":{}}}],["without",{"_index":1064,"title":{},"body":{"license.html":{}}}],["words",{"_index":709,"title":{},"body":{"classes/SearchEngine.html":{}}}],["wrap",{"_index":524,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["writestream",{"_index":443,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["writestream.end",{"_index":446,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["writestream.write(json.stringify(array.from(this.db.entries",{"_index":445,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["xxxx",{"_index":1190,"title":{},"body":{"miscellaneous/variables.html":{}}}],["xxxxxxxx",{"_index":1189,"title":{},"body":{"miscellaneous/variables.html":{}}}],["xxxxxxxxxxxx",{"_index":1193,"title":{},"body":{"miscellaneous/variables.html":{}}}],["y",{"_index":66,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["yarn",{"_index":1010,"title":{},"body":{"index.html":{}}}],["yes",{"_index":323,"title":{},"body":{"classes/LRUCache.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{}}}],["yxxx",{"_index":1192,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z0",{"_index":1187,"title":{},"body":{"miscellaneous/variables.html":{}}}],["za",{"_index":1186,"title":{},"body":{"miscellaneous/variables.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/FuzzySearchOptions.html":{"url":"interfaces/FuzzySearchOptions.html","title":"interface - FuzzySearchOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FuzzySearchOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            customScoringFn\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fieldWeights\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxDistance\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            nGramSize\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            scoringStrategy\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        customScoringFn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customScoringFn:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldWeights\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fieldWeights:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxDistance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxDistance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nGramSize\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nGramSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scoringStrategy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scoringStrategy:     \"default\" | \"tokenCount\" | \"custom\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"default\" | \"tokenCount\" | \"custom\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type ComparisonOperator =\n    | '$eq'\n    | '$neq'\n    | '$gt'\n    | '$gte'\n    | '$lt'\n    | '$lte'\n    | '$in'\n    | '$nin'\n    | 'custom'\n    | '$regex';\n\n/**\n * Represents a unique identifier for a MEMOZ object.\n * This type can be enhanced with stricter typing rules if desired.\n */\nexport type MEMOZID = string & { __brand__: 'MEMOZID' };\n\n/**\n * Defines valid regex options for regex operations.\n * Supported options include:\n * - 'i': Case-insensitive matching\n * - 'g': Global search\n * - 'm': Multiline mode\n * - 's': Dot all (dot matches newline)\n * - 'u': Unicode matching\n * - 'y': Sticky matching\n */\nexport type RegexOptions = 'i' | 'g' | 'm' | 's' | 'u' | 'y';\n\n/**\n * Represents a condition using a regular expression.\n * The condition includes a regex pattern and optional flags.\n */\nexport type RegexCondition = {\n    /**\n     * The regex pattern, which can be a string or a RegExp object.\n     */\n    $regex: string | RegExp;\n\n    /**\n     * Optional regex options to modify the regex behavior.\n     */\n    $options?: RegexOptions;\n};\n\n/**\n * Defines the valid types that can be used as values in conditions.\n * This includes primitive types, arrays, objects, and RegexCondition.\n */\nexport type ValueTypes = string | number | boolean | Date | any[] | object | RegexCondition | Record;\n\n/**\n * Represents a simple condition for filtering data.\n * It includes a field, an operator, a value, and an optional custom comparison function.\n */\nexport interface SimpleCondition {\n    /**\n     * The field in the object to evaluate.\n     */\n    field: keyof T;\n\n    /**\n     * The operator used for the comparison.\n     */\n    operator: ComparisonOperator;\n\n    /**\n     * The value to compare against the field.\n     */\n    value: ValueTypes;\n\n    /**\n     * An optional custom comparison function for more complex comparisons.\n     * Takes two arguments and returns a boolean.\n     */\n    customCompare?: (a: any, b: any) => boolean;\n}\n\n/**\n * Defines a node structure for logical conditions.\n * Nodes can be composed of AND/OR logic or simple conditions.\n */\nexport type ConditionNode =\n    | { $and: ConditionNode[] } // All conditions must be true.\n    | { $or: ConditionNode[] } // At least one condition must be true.\n    | SimpleCondition; // A simple condition.\n\n/**\n * Represents a document with an associated unique identifier.\n * The document type is extended with an id of type MEMOZID and can include additional properties.\n */\nexport type DocumentWithId = T & { id: MEMOZID; } & { [key: string]: any; };\n\n/**\n * Represents the result of an update operation affecting multiple documents.\n * It includes a success flag, the number of documents updated, and the documents themselves.\n */\nexport type UpdateManyResult = {\n    updated: boolean; // Indicates if the update was successful.\n    n: number; // The number of documents updated.\n    documents: DocumentWithId[]; // The updated documents.\n};\n\n/**\n * Options for configuring the Memoz storage and behavior.\n */\nexport interface MemozOptions {\n    /**\n     * Optional path for storing data on disk.\n     */\n    storagePath?: string;\n\n    /**\n     * Flag indicating if data should persist to disk.\n     */\n    persistToDisk?: boolean;\n\n    /**\n     * Flag indicating if mutex should be used for concurrent access.\n     */\n    useMutex?: boolean;\n}\n\n// Modify the FuzzySearchOptions to include custom scoring logic\nexport interface FuzzySearchOptions {\n    maxDistance?: number;\n    nGramSize?: number;\n    fieldWeights?: { [key in string]?: number }; // Optional weights for fields\n    scoringStrategy?: 'default' | 'tokenCount' | 'custom'; // Strategy for scoring\n    customScoringFn?: (\n      token: string,\n      fieldToken: string,\n      distance: number,\n      fieldWeight: number,\n      options: FuzzySearchOptions\n    ) => number; // Custom scoring function\n  }\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IndexManager.html":{"url":"classes/IndexManager.html","title":"class - IndexManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IndexManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/index-manager.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                indexes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                getFromIndex\n                            \n                            \n                                    Public\n                                getIndex\n                            \n                            \n                                    Public\n                                updateIndexes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        indexes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/utils/index-manager.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clear\n                        \n                    \n                \n            \n            \n                \n                        \n                    clear()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/index-manager.ts:31\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getFromIndex\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFromIndex(query: any, db: Map>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/index-manager.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                db\n                                            \n                                                        Map>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DocumentWithId[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getIndex\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIndex(fields: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/index-manager.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Indexing | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updateIndexes\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateIndexes(doc: DocumentWithId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/index-manager.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                doc\n                                            \n                                                            DocumentWithId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DocumentWithId, MEMOZID } from '../types';\nimport Indexing from './indexing';\n\nexport class IndexManager {\n  private indexes: Map> = new Map();\n\n  public updateIndexes(doc: DocumentWithId): void {\n    this.indexes.forEach((index) => {\n      index.addDocument(doc);\n    });\n  }\n\n  public getIndex(fields: string[]): Indexing | undefined {\n    return this.indexes.get(fields.join('_'));\n  }\n\n  public getFromIndex(query: any, db: Map>): DocumentWithId[] {\n    const results: Set> = new Set();\n    const index = this.getIndex(Object.keys(query));\n    if (index) {\n      const indexedIds = index.query(query);\n      indexedIds.forEach((id) => {\n        const doc = db.get(id); // Access the db Map passed as an argument\n        if (doc) results.add(doc);\n      });\n    }\n    return [...results];\n  }\n\n  public clear() {\n    return this.indexes.clear();\n  }\n}\n\nexport default IndexManager;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Indexing.html":{"url":"classes/Indexing.html","title":"class - Indexing","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Indexing\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/indexing.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fields\n                            \n                            \n                                    Private\n                                index\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addDocument\n                            \n                            \n                                    Private\n                                getKey\n                            \n                            \n                                    Public\n                                query\n                            \n                            \n                                    Public\n                                removeDocument\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fields: string[])\n                    \n                \n                        \n                            \n                                Defined in src/utils/indexing.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fields\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        fields\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/indexing.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/indexing.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        addDocument\n                        \n                    \n                \n            \n            \n                \n                        \n                    addDocument(document: DocumentWithId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/indexing.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                document\n                                            \n                                                            DocumentWithId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKey(document: DocumentWithId | ConditionNode>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/indexing.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                document\n                                            \n                                                        DocumentWithId | ConditionNode>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        query\n                        \n                    \n                \n            \n            \n                \n                        \n                    query(query: ConditionNode>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/indexing.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            ConditionNode>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Set\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removeDocument\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeDocument(document: DocumentWithId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/indexing.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                document\n                                            \n                                                            DocumentWithId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConditionNode, DocumentWithId, MEMOZID } from '../types';\n\nexport class Indexing {\n  private fields: string[];\n\n  private index: Map>;\n\n  constructor(fields: string[]) {\n    this.fields = fields;\n    this.index = new Map();\n  }\n\n  public addDocument(document: DocumentWithId): void {\n    const key = this.getKey(document);\n    if (!this.index.has(key)) {\n      this.index.set(key, new Set());\n    }\n      this.index.get(key)!.add(document.id);\n  }\n\n  public removeDocument(document: DocumentWithId): void {\n    const key = this.getKey(document);\n    if (this.index.has(key)) {\n        this.index.get(key)!.delete(document.id);\n        if (this.index.get(key)!.size === 0) {\n          this.index.delete(key);\n        }\n    }\n  }\n\n  public query(query: ConditionNode>): Set {\n    const key = this.getKey(query);\n    return this.index.has(key) ? this.index.get(key)! : new Set();\n  }\n\n  private getKey(document: DocumentWithId | ConditionNode>): string {\n    if ('id' in document) { // Check if document has an 'id' property\n      return this.fields.map((field: string) => document[field]).join('_');\n    }\n    // Handle the case where document is a ConditionNode type\n    // (you might throw an error, return an empty string, or handle it differently)\n    throw new Error('Unexpected document type for indexing');\n  }\n}\n\nexport default Indexing;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LRUCache.html":{"url":"classes/LRUCache.html","title":"class - LRUCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LRUCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/lru-cache.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                cache\n                            \n                            \n                                    Private\n                                cleanupInterval\n                            \n                            \n                                    Private\n                                    Optional\n                                cleanupTimer\n                            \n                            \n                                    Private\n                                evictionStrategy\n                            \n                            \n                                    Private\n                                hitCount\n                            \n                            \n                                    Private\n                                maxSize\n                            \n                            \n                                    Private\n                                missCount\n                            \n                            \n                                    Private\n                                    Optional\n                                onEvict\n                            \n                            \n                                    Private\n                                    Optional\n                                stayAlive\n                            \n                            \n                                    Private\n                                    Optional\n                                ttl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                cleanupExpiredEntries\n                            \n                            \n                                clear\n                            \n                            \n                                delete\n                            \n                            \n                                deserialize\n                            \n                            \n                                entries\n                            \n                            \n                                get\n                            \n                            \n                                    Async\n                                getAsync\n                            \n                            \n                                has\n                            \n                            \n                                    Private\n                                isExpired\n                            \n                            \n                                    Private\n                                reorder\n                            \n                            \n                                serialize\n                            \n                            \n                                set\n                            \n                            \n                                    Private\n                                startCleanup\n                            \n                            \n                                stopCleanup\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    size\n                                \n                                \n                                    hitRate\n                                \n                                \n                                    missRate\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options: LRUCacheOptions)\n                    \n                \n                        \n                            \n                                Defined in src/utils/lru-cache.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        LRUCacheOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cache\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cleanupInterval\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 60000\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        cleanupTimer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     NodeJS.Timeout\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        evictionStrategy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EvictionStrategy\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hitCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        maxSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        missCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        onEvict\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        stayAlive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        ttl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cleanupExpiredEntries\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanupExpiredEntries()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:147\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(key: K)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:143\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(serializedCache: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:178\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                serializedCache\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n            \n                \nentries()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:167\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Array<>\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(key: K)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     V | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAsync\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAsync(key: K, fetchFn: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:196\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fetchFn\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has\n                        \n                    \n                \n            \n            \n                \nhas(key: K)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:155\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isExpired\n                        \n                    \n                \n            \n            \n                \n                        \n                    isExpired(entry: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entry\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        reorder\n                        \n                    \n                \n            \n            \n                \n                        \n                    reorder(key: K)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:173\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(key: K, value: V, ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                        V\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        startCleanup\n                        \n                    \n                \n            \n            \n                \n                        \n                    startCleanup()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:79\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stopCleanup\n                        \n                    \n                \n            \n            \n                \nstopCleanup()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:85\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        size\n                    \n                \n\n                \n                    \n                        getsize()\n                    \n                \n                            \n                                \n                                    Defined in src/utils/lru-cache.ts:151\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        hitRate\n                    \n                \n\n                \n                    \n                        gethitRate()\n                    \n                \n                            \n                                \n                                    Defined in src/utils/lru-cache.ts:186\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        missRate\n                    \n                \n\n                \n                    \n                        getmissRate()\n                    \n                \n                            \n                                \n                                    Defined in src/utils/lru-cache.ts:191\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        type EvictionStrategy = 'LRU' | 'FIFO';\n\nexport interface LRUCacheOptions {\n    maxSize: number;\n    ttl?: number;\n    onEvict?: (key: K, value: V) => void;\n    evictionStrategy?: EvictionStrategy;\n    stayAlive?: boolean;\n}\nexport class LRUCache {\n  private cache: Map = new Map();\n\n  private maxSize: number;\n\n  private ttl?: number;\n\n  private onEvict?: (key: K, value: V) => void;\n\n  private evictionStrategy: EvictionStrategy;\n\n  private stayAlive?: boolean;\n\n  private hitCount: number = 0;\n\n  private missCount: number = 0;\n\n  private cleanupInterval: number = 60000; // 1 minute cleanup interval\n\n  // eslint-disable-next-line no-undef\n  private cleanupTimer?: NodeJS.Timeout;\n\n  constructor(options: LRUCacheOptions) {\n    const {\n      maxSize,\n      ttl, onEvict,\n      evictionStrategy = 'LRU',\n      stayAlive = false,\n    } = options;\n\n    if (maxSize  entry.expiry;\n  }\n\n  private cleanupExpiredEntries(): void {\n    const now = performance.now();\n    Array.from(this.cache.entries()).forEach(([key, entry]) => {\n      if (entry.expiry !== undefined && now > entry.expiry) {\n        this.cache.delete(key);\n        if (this.onEvict) {\n          this.onEvict(key, entry.value);\n        }\n      }\n    });\n  }\n\n  private startCleanup(): void {\n    if (this.cleanupInterval) {\n      this.cleanupTimer = setInterval(() => this.cleanupExpiredEntries(), this.cleanupInterval);\n    }\n  }\n\n  stopCleanup(): void {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n    }\n  }\n\n  get(key: K): V | undefined {\n    const entry = this.cache.get(key);\n    if (!entry) {\n      this.missCount += 1;\n      return undefined;\n    }\n\n    if (this.isExpired(entry)) {\n      this.cache.delete(key);\n      this.missCount += 1;\n      return undefined;\n    }\n\n    this.hitCount += 1;\n    this.reorder(key);\n    return entry.value;\n  }\n\n  set(key: K, value: V, ttl?: number): void {\n    if (this.cache.has(key)) {\n      this.reorder(key);\n    } else if (this.cache.size === this.maxSize) {\n      let oldestKey: K | undefined;\n\n      if (this.evictionStrategy === 'LRU') {\n        // Get the first key for LRU strategy\n        oldestKey = this.cache.keys().next().value;\n      } else if (this.evictionStrategy === 'FIFO') {\n        // Get the oldest key for FIFO strategy\n        oldestKey = [...this.cache.keys()].shift();\n      }\n\n      if (oldestKey !== undefined) {\n        const oldestEntry = this.cache.get(oldestKey);\n        this.cache.delete(oldestKey);\n        if (this.onEvict && oldestEntry) {\n          this.onEvict(oldestKey, oldestEntry.value);\n        }\n      }\n    }\n\n    // Avoid nested ternaries by using simple conditionals\n    let expiry: number | undefined;\n    if (ttl !== undefined) {\n      expiry = performance.now() + ttl;\n    } else if (this.ttl !== undefined) {\n      expiry = performance.now() + this.ttl;\n    }\n\n    this.cache.set(key, { value, expiry });\n  }\n\n  delete(key: K): boolean {\n    return this.cache.delete(key);\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n\n  get size(): number {\n    return this.cache.size;\n  }\n\n  has(key: K): boolean {\n    const entry = this.cache.get(key);\n    if (!entry) return false;\n\n    if (this.isExpired(entry)) {\n      this.cache.delete(key);\n      return false;\n    }\n\n    return true;\n  }\n\n  entries(): Array {\n    return Array.from(this.cache.entries())\n      .filter(([, entry]) => !this.isExpired(entry))\n      .map(([key, entry]) => [key, entry.value]);\n  }\n\n  serialize(): string {\n    const entries = this.entries();\n    return JSON.stringify(entries);\n  }\n\n  deserialize(serializedCache: string): void {\n    const entries: [K, V][] = JSON.parse(serializedCache);\n    this.cache.clear();\n    entries.forEach(([key, value]) => {\n      this.set(key, value);\n    });\n  }\n\n  get hitRate(): number {\n    const total = this.hitCount + this.missCount;\n    return total === 0 ? 0 : this.hitCount / total;\n  }\n\n  get missRate(): number {\n    const total = this.hitCount + this.missCount;\n    return total === 0 ? 0 : this.missCount / total;\n  }\n\n  async getAsync(key: K, fetchFn: () => Promise): Promise {\n    const cached = this.get(key);\n    if (cached) {\n      return cached;\n    }\n\n    const result = await fetchFn();\n    this.set(key, result);\n    return result;\n  }\n}\n\nexport default LRUCache;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LRUCacheOptions.html":{"url":"interfaces/LRUCacheOptions.html","title":"interface - LRUCacheOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LRUCacheOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/lru-cache.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            evictionStrategy\n                                        \n                                \n                                \n                                        \n                                            maxSize\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onEvict\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stayAlive\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ttl\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        evictionStrategy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        evictionStrategy:         EvictionStrategy\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EvictionStrategy\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxSize\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onEvict\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onEvict:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stayAlive\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stayAlive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ttl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ttl:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type EvictionStrategy = 'LRU' | 'FIFO';\n\nexport interface LRUCacheOptions {\n    maxSize: number;\n    ttl?: number;\n    onEvict?: (key: K, value: V) => void;\n    evictionStrategy?: EvictionStrategy;\n    stayAlive?: boolean;\n}\nexport class LRUCache {\n  private cache: Map = new Map();\n\n  private maxSize: number;\n\n  private ttl?: number;\n\n  private onEvict?: (key: K, value: V) => void;\n\n  private evictionStrategy: EvictionStrategy;\n\n  private stayAlive?: boolean;\n\n  private hitCount: number = 0;\n\n  private missCount: number = 0;\n\n  private cleanupInterval: number = 60000; // 1 minute cleanup interval\n\n  // eslint-disable-next-line no-undef\n  private cleanupTimer?: NodeJS.Timeout;\n\n  constructor(options: LRUCacheOptions) {\n    const {\n      maxSize,\n      ttl, onEvict,\n      evictionStrategy = 'LRU',\n      stayAlive = false,\n    } = options;\n\n    if (maxSize  entry.expiry;\n  }\n\n  private cleanupExpiredEntries(): void {\n    const now = performance.now();\n    Array.from(this.cache.entries()).forEach(([key, entry]) => {\n      if (entry.expiry !== undefined && now > entry.expiry) {\n        this.cache.delete(key);\n        if (this.onEvict) {\n          this.onEvict(key, entry.value);\n        }\n      }\n    });\n  }\n\n  private startCleanup(): void {\n    if (this.cleanupInterval) {\n      this.cleanupTimer = setInterval(() => this.cleanupExpiredEntries(), this.cleanupInterval);\n    }\n  }\n\n  stopCleanup(): void {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n    }\n  }\n\n  get(key: K): V | undefined {\n    const entry = this.cache.get(key);\n    if (!entry) {\n      this.missCount += 1;\n      return undefined;\n    }\n\n    if (this.isExpired(entry)) {\n      this.cache.delete(key);\n      this.missCount += 1;\n      return undefined;\n    }\n\n    this.hitCount += 1;\n    this.reorder(key);\n    return entry.value;\n  }\n\n  set(key: K, value: V, ttl?: number): void {\n    if (this.cache.has(key)) {\n      this.reorder(key);\n    } else if (this.cache.size === this.maxSize) {\n      let oldestKey: K | undefined;\n\n      if (this.evictionStrategy === 'LRU') {\n        // Get the first key for LRU strategy\n        oldestKey = this.cache.keys().next().value;\n      } else if (this.evictionStrategy === 'FIFO') {\n        // Get the oldest key for FIFO strategy\n        oldestKey = [...this.cache.keys()].shift();\n      }\n\n      if (oldestKey !== undefined) {\n        const oldestEntry = this.cache.get(oldestKey);\n        this.cache.delete(oldestKey);\n        if (this.onEvict && oldestEntry) {\n          this.onEvict(oldestKey, oldestEntry.value);\n        }\n      }\n    }\n\n    // Avoid nested ternaries by using simple conditionals\n    let expiry: number | undefined;\n    if (ttl !== undefined) {\n      expiry = performance.now() + ttl;\n    } else if (this.ttl !== undefined) {\n      expiry = performance.now() + this.ttl;\n    }\n\n    this.cache.set(key, { value, expiry });\n  }\n\n  delete(key: K): boolean {\n    return this.cache.delete(key);\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n\n  get size(): number {\n    return this.cache.size;\n  }\n\n  has(key: K): boolean {\n    const entry = this.cache.get(key);\n    if (!entry) return false;\n\n    if (this.isExpired(entry)) {\n      this.cache.delete(key);\n      return false;\n    }\n\n    return true;\n  }\n\n  entries(): Array {\n    return Array.from(this.cache.entries())\n      .filter(([, entry]) => !this.isExpired(entry))\n      .map(([key, entry]) => [key, entry.value]);\n  }\n\n  serialize(): string {\n    const entries = this.entries();\n    return JSON.stringify(entries);\n  }\n\n  deserialize(serializedCache: string): void {\n    const entries: [K, V][] = JSON.parse(serializedCache);\n    this.cache.clear();\n    entries.forEach(([key, value]) => {\n      this.set(key, value);\n    });\n  }\n\n  get hitRate(): number {\n    const total = this.hitCount + this.missCount;\n    return total === 0 ? 0 : this.hitCount / total;\n  }\n\n  get missRate(): number {\n    const total = this.hitCount + this.missCount;\n    return total === 0 ? 0 : this.missCount / total;\n  }\n\n  async getAsync(key: K, fetchFn: () => Promise): Promise {\n    const cached = this.get(key);\n    if (cached) {\n      return cached;\n    }\n\n    const result = await fetchFn();\n    this.set(key, result);\n    return result;\n  }\n}\n\nexport default LRUCache;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MemozOptions.html":{"url":"interfaces/MemozOptions.html","title":"interface - MemozOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MemozOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types.ts\n        \n\n\n            \n                Description\n            \n            \n                Options for configuring the Memoz storage and behavior.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            persistToDisk\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            storagePath\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            useMutex\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        persistToDisk\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        persistToDisk:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Flag indicating if data should persist to disk.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        storagePath\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        storagePath:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional path for storing data on disk.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useMutex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useMutex:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Flag indicating if mutex should be used for concurrent access.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export type ComparisonOperator =\n    | '$eq'\n    | '$neq'\n    | '$gt'\n    | '$gte'\n    | '$lt'\n    | '$lte'\n    | '$in'\n    | '$nin'\n    | 'custom'\n    | '$regex';\n\n/**\n * Represents a unique identifier for a MEMOZ object.\n * This type can be enhanced with stricter typing rules if desired.\n */\nexport type MEMOZID = string & { __brand__: 'MEMOZID' };\n\n/**\n * Defines valid regex options for regex operations.\n * Supported options include:\n * - 'i': Case-insensitive matching\n * - 'g': Global search\n * - 'm': Multiline mode\n * - 's': Dot all (dot matches newline)\n * - 'u': Unicode matching\n * - 'y': Sticky matching\n */\nexport type RegexOptions = 'i' | 'g' | 'm' | 's' | 'u' | 'y';\n\n/**\n * Represents a condition using a regular expression.\n * The condition includes a regex pattern and optional flags.\n */\nexport type RegexCondition = {\n    /**\n     * The regex pattern, which can be a string or a RegExp object.\n     */\n    $regex: string | RegExp;\n\n    /**\n     * Optional regex options to modify the regex behavior.\n     */\n    $options?: RegexOptions;\n};\n\n/**\n * Defines the valid types that can be used as values in conditions.\n * This includes primitive types, arrays, objects, and RegexCondition.\n */\nexport type ValueTypes = string | number | boolean | Date | any[] | object | RegexCondition | Record;\n\n/**\n * Represents a simple condition for filtering data.\n * It includes a field, an operator, a value, and an optional custom comparison function.\n */\nexport interface SimpleCondition {\n    /**\n     * The field in the object to evaluate.\n     */\n    field: keyof T;\n\n    /**\n     * The operator used for the comparison.\n     */\n    operator: ComparisonOperator;\n\n    /**\n     * The value to compare against the field.\n     */\n    value: ValueTypes;\n\n    /**\n     * An optional custom comparison function for more complex comparisons.\n     * Takes two arguments and returns a boolean.\n     */\n    customCompare?: (a: any, b: any) => boolean;\n}\n\n/**\n * Defines a node structure for logical conditions.\n * Nodes can be composed of AND/OR logic or simple conditions.\n */\nexport type ConditionNode =\n    | { $and: ConditionNode[] } // All conditions must be true.\n    | { $or: ConditionNode[] } // At least one condition must be true.\n    | SimpleCondition; // A simple condition.\n\n/**\n * Represents a document with an associated unique identifier.\n * The document type is extended with an id of type MEMOZID and can include additional properties.\n */\nexport type DocumentWithId = T & { id: MEMOZID; } & { [key: string]: any; };\n\n/**\n * Represents the result of an update operation affecting multiple documents.\n * It includes a success flag, the number of documents updated, and the documents themselves.\n */\nexport type UpdateManyResult = {\n    updated: boolean; // Indicates if the update was successful.\n    n: number; // The number of documents updated.\n    documents: DocumentWithId[]; // The updated documents.\n};\n\n/**\n * Options for configuring the Memoz storage and behavior.\n */\nexport interface MemozOptions {\n    /**\n     * Optional path for storing data on disk.\n     */\n    storagePath?: string;\n\n    /**\n     * Flag indicating if data should persist to disk.\n     */\n    persistToDisk?: boolean;\n\n    /**\n     * Flag indicating if mutex should be used for concurrent access.\n     */\n    useMutex?: boolean;\n}\n\n// Modify the FuzzySearchOptions to include custom scoring logic\nexport interface FuzzySearchOptions {\n    maxDistance?: number;\n    nGramSize?: number;\n    fieldWeights?: { [key in string]?: number }; // Optional weights for fields\n    scoringStrategy?: 'default' | 'tokenCount' | 'custom'; // Strategy for scoring\n    customScoringFn?: (\n      token: string,\n      fieldToken: string,\n      distance: number,\n      fieldWeight: number,\n      options: FuzzySearchOptions\n    ) => number; // Custom scoring function\n  }\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Mutex.html":{"url":"classes/Mutex.html","title":"class - Mutex","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Mutex\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/mutex.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                mutex\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                lock\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mutex\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Promise\n\n                    \n                \n                \n                    \n                        Default value : Promise.resolve()\n                    \n                \n                    \n                        \n                                Defined in src/utils/mutex.ts:2\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        lock\n                        \n                    \n                \n            \n            \n                \n                        \n                    lock(callback: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/mutex.ts:4\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                callback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Mutex {\n  private mutex: Promise = Promise.resolve();\n\n  public lock(callback: () => T | Promise): Promise {\n    // Locking mechanism: Wait for the current mutex chain to resolve,\n    // then run the callback and capture its result\n    const resultPromise = this.mutex.then(() => callback());\n\n    // Update the mutex to wait for the current operation to finish\n    this.mutex = resultPromise.then(() => undefined, () => undefined);\n\n    // Return the result of the callback, so the caller gets its value\n    return resultPromise;\n  }\n}\nexport default Mutex;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PersistenceManager.html":{"url":"classes/PersistenceManager.html","title":"class - PersistenceManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PersistenceManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/persistence-manager.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                db\n                            \n                            \n                                    Private\n                                filePath\n                            \n                            \n                                    Private\n                                persistToDisk\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                loadFromDisk\n                            \n                            \n                                    Public\n                                    Async\n                                saveToDisk\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(db: Map>, filePath: string | undefined, persistToDisk?: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/utils/persistence-manager.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                    Map>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filePath\n                                                  \n                                                        \n                                                                    string | undefined\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        persistToDisk\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map>\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/persistence-manager.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        filePath\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/persistence-manager.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        persistToDisk\n                        \n                    \n                \n            \n                \n                    \n                        Type :     boolean | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/persistence-manager.ts:11\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        loadFromDisk\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadFromDisk()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/persistence-manager.ts:31\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        saveToDisk\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveToDisk()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/persistence-manager.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import fs, { promises as fsPromises } from 'fs';\nimport path from 'path';\nimport { DocumentWithId, MEMOZID } from '../types';\n\nexport class PersistenceManager {\n  private db: Map>;\n\n  private filePath: string|undefined;\n\n  private persistToDisk: boolean|undefined;\n\n  constructor(db: Map>, filePath: string | undefined, persistToDisk?: boolean) {\n    this.db = db;\n    this.filePath = filePath ? path.resolve(filePath) : './data.json';\n    this.persistToDisk = persistToDisk;\n  }\n\n  public async saveToDisk(): Promise {\n    if (this.persistToDisk && this.filePath) {\n      const dir = path.dirname(this.filePath);\n\n      await fsPromises.mkdir(dir, { recursive: true });\n      const writeStream = fs.createWriteStream(this.filePath);\n\n      writeStream.write(JSON.stringify(Array.from(this.db.entries())));\n      writeStream.end();\n    }\n  }\n\n  public async loadFromDisk(): Promise {\n    // if filePath is provide and node exists create the file\n    if (this.filePath && !fs.existsSync(this.filePath)) {\n      await fsPromises.writeFile(this.filePath, []);\n    }\n\n    if (this.filePath && this.persistToDisk) {\n      // Check if the file exists\n      await fsPromises.access(this.filePath);\n      // Load the file contents\n      const data = await fsPromises.readFile(this.filePath, 'utf8');\n      if (data) {\n        const entries = JSON.parse(data) as [MEMOZID, DocumentWithId][];\n\n        this.db.clear(); // Clear the original Map reference\n        entries.forEach(([key, value]) => {\n          this.db.set(key, value); // Populate the original Map\n        });\n      }\n    }\n  }\n}\n\nexport default PersistenceManager;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryBuilder.html":{"url":"classes/QueryBuilder.html","title":"class - QueryBuilder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryBuilder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/get-many-query-builder.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        PromiseLike\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                isResolved\n                            \n                            \n                                    Private\n                                limitCount\n                            \n                            \n                                    Private\n                                queryCache\n                            \n                            \n                                    Private\n                                queryKey\n                            \n                            \n                                    Private\n                                result\n                            \n                            \n                                    Private\n                                    Optional\n                                resultPromise\n                            \n                            \n                                    Private\n                                skipCount\n                            \n                            \n                                    Private\n                                sortConditions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                catch\n                            \n                            \n                                    Public\n                                    Async\n                                exec\n                            \n                            \n                                    Public\n                                finally\n                            \n                            \n                                    Public\n                                limit\n                            \n                            \n                                    Private\n                                    Async\n                                resolveResult\n                            \n                            \n                                    Public\n                                skip\n                            \n                            \n                                    Public\n                                sort\n                            \n                            \n                                    Public\n                                then\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(result: DocumentWithId[] | Promise, queryCache: QueryCache, queryKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/utils/get-many-query-builder.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        result\n                                                  \n                                                        \n                                                                        DocumentWithId[] | Promise\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryCache\n                                                  \n                                                        \n                                                                        QueryCache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isResolved\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        limitCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : Number.MAX_SAFE_INTEGER\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        queryCache\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueryCache\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        queryKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        result\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentWithId[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        resultPromise\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Promise\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        skipCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sortConditions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array>\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:13\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        catch\n                        \n                    \n                \n            \n            \n                \n                        \n                    catch(onrejected?: (reason?: any) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:118\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    TResult\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                onrejected\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        exec\n                        \n                    \n                \n            \n            \n                \n                        \n                    exec()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:64\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        finally\n                        \n                    \n                \n            \n            \n                \n                        \n                    finally(onfinally?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:124\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                onfinally\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        limit\n                        \n                    \n                \n            \n            \n                \n                        \n                    limit(limitCount: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                limitCount\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        resolveResult\n                        \n                    \n                \n            \n            \n                \n                        \n                    resolveResult()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        skip\n                        \n                    \n                \n            \n            \n                \n                        \n                    skip(skipCount: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                skipCount\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sort\n                        \n                    \n                \n            \n            \n                \n                        \n                    sort(sortConditions?: Record | Record[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sortConditions\n                                            \n                                                        Record | Record[]\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        then\n                        \n                    \n                \n            \n            \n                \n                        \n                    then(onfulfilled?: (value?: DocumentWithId[]) => void, onrejected?: (reason?: any) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:111\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    TResult1\n                                    TResult2\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                onfulfilled\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                onrejected\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in src/utils/get-many-query-builder.ts:130\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { DocumentWithId } from '../types';\nimport QueryCache from './query-cache';\n\nexport class QueryBuilder implements PromiseLike[]> {\n  private result: DocumentWithId[] = [];\n\n  private resultPromise?: Promise[]>;\n\n  private queryCache: QueryCache;\n\n  private queryKey: string;\n\n  private sortConditions: Array> = [];\n\n  private skipCount: number = 0;\n\n  private limitCount: number = Number.MAX_SAFE_INTEGER;\n\n  private isResolved: boolean = false;\n\n  constructor(\n    result: DocumentWithId[] | Promise[]>,\n    queryCache: QueryCache,\n    queryKey: string,\n  ) {\n    if (result instanceof Promise) {\n      this.resultPromise = result;\n    } else {\n      this.result = result;\n      this.isResolved = true;\n    }\n    this.queryCache = queryCache;\n    this.queryKey = queryKey;\n  }\n\n  // Resolves the result if it's a promise, otherwise returns the result\n  private async resolveResult(): Promise[]> {\n    if (!this.isResolved && this.resultPromise) {\n      this.result = await this.resultPromise;\n      this.isResolved = true;\n    }\n    return this.result;\n  }\n\n  public sort(sortConditions?: Record | Record[]): this {\n    if (sortConditions) {\n      // If sortConditions is an array, use it as is, otherwise wrap it in an array\n      this.sortConditions = Array.isArray(sortConditions) ? sortConditions : [sortConditions];\n    }\n    return this;\n  }\n\n  public skip(skipCount: number): this {\n    this.skipCount = skipCount;\n    return this;\n  }\n\n  public limit(limitCount: number): this {\n    this.limitCount = limitCount;\n    return this;\n  }\n\n  // Executes the query and returns the sorted and paginated results\n  public async exec(): Promise[]> {\n    const resolvedResult = await this.resolveResult();\n\n    // Apply sorting if needed\n    if (this.sortConditions.length > 0) {\n      resolvedResult.sort((a, b) => {\n        let comparisonResult = 0;\n\n        this.sortConditions.forEach((sortObj) => {\n          Object.entries(sortObj).forEach(([key, order]) => {\n            const aValue = a[key];\n            const bValue = b[key];\n\n            // Skip undefined values\n            if (aValue === undefined || bValue === undefined) return;\n\n            if (aValue  bValue) {\n              comparisonResult = order === 'asc' ? 1 : -1;\n              // Exit inner loop after determining order\n            }\n          });\n\n          // If a comparison has already been made, stop further comparisons\n          if (comparisonResult !== 0) {\n            // Exit outer loop if already determined\n          }\n        });\n\n        return comparisonResult;\n      });\n    }\n\n    // Apply pagination\n    const paginatedResult = resolvedResult.slice(this.skipCount, this.skipCount + this.limitCount);\n\n    // Cache the result only if it's different\n    if (JSON.stringify(this.result) !== JSON.stringify(paginatedResult)) {\n      this.queryCache.set(this.queryKey, paginatedResult);\n    }\n\n    return paginatedResult;\n  }\n\n  public then[], TResult2 = never>(\n    onfulfilled?: (value: DocumentWithId[]) => TResult1 | PromiseLike,\n    onrejected?: (reason: any) => TResult2 | PromiseLike,\n  ): Promise {\n    return this.exec().then(onfulfilled, onrejected);\n  }\n\n  public catch(\n    onrejected?: (reason: any) => TResult | PromiseLike,\n  ): Promise[] | TResult> {\n    return this.exec().catch(onrejected);\n  }\n\n  public finally(onfinally?: () => void): Promise[]> {\n    return this.exec().finally(onfinally);\n  }\n\n  // Mark the class as Promise-like for chaining purposes\n  // eslint-disable-next-line class-methods-use-this\n  get [Symbol.toStringTag](): string {\n    return 'Promise';\n  }\n}\n\n// Proxy to enable chaining and ensure correct promise-like behavior\nexport function createQueryBuilderProxy(builder: QueryBuilder): QueryBuilder {\n  return new Proxy(builder, {\n    get(target, prop, receiver) {\n      const value = Reflect.get(target, prop, receiver);\n\n      if (typeof value === 'function') {\n        return (...args: any[]) => {\n          const result = value.apply(target, args);\n          return result instanceof QueryBuilder ? createQueryBuilderProxy(result) : result;\n        };\n      }\n\n      if (prop === 'then') {\n        return (...args: any[]) => builder.then(...args);\n      }\n      if (prop === 'catch') {\n        return (onrejected: (reason: any) => any) => builder.exec().catch(onrejected);\n      }\n\n      return builder.exec();\n    },\n  });\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryCache.html":{"url":"classes/QueryCache.html","title":"class - QueryCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/query-cache.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                cache\n                            \n                            \n                                    Private\n                                cacheHits\n                            \n                            \n                                    Private\n                                cacheMisses\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                getStats\n                            \n                            \n                                    Public\n                                invalidate\n                            \n                            \n                                    Public\n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options?: QueryCacheOptions)\n                    \n                \n                        \n                            \n                                Defined in src/utils/query-cache.ts:16\n                            \n                        \n\n                \n                    \n                            Initializes the QueryCache with optional maxSize, TTL, and eviction strategy.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        QueryCacheOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nObject containing maxSize, TTL, and eviction strategy.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cache\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LRUCache\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/query-cache.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cacheHits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/utils/query-cache.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cacheMisses\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/utils/query-cache.ts:16\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/query-cache.ts:37\n                        \n                    \n\n\n            \n                \n                        Retrieves a list of documents by the given key from the cache.\nTracks cache hits and misses.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     [] | undefined\n\n                        \n                            \n                                The array of DocumentWithId associated with the key, or undefined if not found or expired.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/query-cache.ts:74\n                        \n                    \n\n\n            \n                \n                        Returns cache hit/miss statistics.\n\n\n                        \n                            Returns :     literal type\n\n                        \n                            \n                                An object with hit and miss counts.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        invalidate\n                        \n                    \n                \n            \n            \n                \n                        \n                    invalidate(key?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/query-cache.ts:62\n                        \n                    \n\n\n            \n                \n                        Invalidates (removes) a cache entry by key, or clears the entire cache if no key is provided.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional key to remove from the cache. If not provided, the entire cache is cleared.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        set\n                        \n                    \n                \n            \n            \n                \n                        \n                    set(key: string, value: DocumentWithId[], ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/query-cache.ts:54\n                        \n                    \n\n\n            \n                \n                        Adds or updates a list of documents in the cache.\nSupports custom TTL for each entry.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key of the cache entry.\n\n\n                                            \n                                        \n                                        \n                                                value\n                                            \n                                                            DocumentWithId[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe array of DocumentWithId to cache.\n\n\n                                            \n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional TTL for this specific entry, overriding global TTL.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { LRUCache, LRUCacheOptions } from './lru-cache';\nimport { DocumentWithId } from '../types';\n\nexport interface QueryCacheOptions extends LRUCacheOptions[]> {\n    ttl?: number;\n    evictionStrategy?: 'LRU' | 'FIFO';\n}\n\nexport class QueryCache {\n  // Create an LRUCache instance that stores string keys and arrays of DocumentWithId as values\n  private cache: LRUCache[]>;\n\n  // Metrics for cache hits and misses\n  private cacheHits: number = 0;\n\n  private cacheMisses: number = 0;\n\n  /**\n     * Initializes the QueryCache with optional maxSize, TTL, and eviction strategy.\n     * @param options - Object containing maxSize, TTL, and eviction strategy.\n     */\n  constructor(options?: QueryCacheOptions) {\n    const { maxSize = 1000, ttl, evictionStrategy = 'LRU' } = options || {};\n    this.cache = new LRUCache[]>({\n      maxSize,\n      ttl,\n      evictionStrategy,\n    });\n  }\n\n  /**\n     * Retrieves a list of documents by the given key from the cache.\n     * Tracks cache hits and misses.\n     * @param key - The key to retrieve.\n     * @returns The array of DocumentWithId associated with the key, or undefined if not found or expired.\n     */\n  public get(key: string): DocumentWithId[] | undefined {\n    const result = this.cache.get(key);\n    if (result) {\n      this.cacheHits += 1;\n    } else {\n      this.cacheMisses += 1;\n    }\n    return result;\n  }\n\n  /**\n     * Adds or updates a list of documents in the cache.\n     * Supports custom TTL for each entry.\n     * @param key - The key of the cache entry.\n     * @param value - The array of DocumentWithId to cache.\n     * @param ttl - Optional TTL for this specific entry, overriding global TTL.\n     */\n  public set(key: string, value: DocumentWithId[], ttl?: number): void {\n    this.cache.set(key, value, ttl); // Allow custom TTL per entry\n  }\n\n  /**\n     * Invalidates (removes) a cache entry by key, or clears the entire cache if no key is provided.\n     * @param key - Optional key to remove from the cache. If not provided, the entire cache is cleared.\n     */\n  public invalidate(key?: string): void {\n    if (key) {\n      this.cache.delete(key);\n    } else {\n      this.cache.clear();\n    }\n  }\n\n  /**\n     * Returns cache hit/miss statistics.\n     * @returns An object with hit and miss counts.\n     */\n  public getStats(): { hits: number; misses: number } {\n    return {\n      hits: this.cacheHits,\n      misses: this.cacheMisses,\n    };\n  }\n}\n\nexport default QueryCache;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QueryCacheOptions.html":{"url":"interfaces/QueryCacheOptions.html","title":"interface - QueryCacheOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QueryCacheOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/query-cache.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            LRUCacheOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            evictionStrategy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ttl\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        evictionStrategy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        evictionStrategy:     \"LRU\" | \"FIFO\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"LRU\" | \"FIFO\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ttl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ttl:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { LRUCache, LRUCacheOptions } from './lru-cache';\nimport { DocumentWithId } from '../types';\n\nexport interface QueryCacheOptions extends LRUCacheOptions[]> {\n    ttl?: number;\n    evictionStrategy?: 'LRU' | 'FIFO';\n}\n\nexport class QueryCache {\n  // Create an LRUCache instance that stores string keys and arrays of DocumentWithId as values\n  private cache: LRUCache[]>;\n\n  // Metrics for cache hits and misses\n  private cacheHits: number = 0;\n\n  private cacheMisses: number = 0;\n\n  /**\n     * Initializes the QueryCache with optional maxSize, TTL, and eviction strategy.\n     * @param options - Object containing maxSize, TTL, and eviction strategy.\n     */\n  constructor(options?: QueryCacheOptions) {\n    const { maxSize = 1000, ttl, evictionStrategy = 'LRU' } = options || {};\n    this.cache = new LRUCache[]>({\n      maxSize,\n      ttl,\n      evictionStrategy,\n    });\n  }\n\n  /**\n     * Retrieves a list of documents by the given key from the cache.\n     * Tracks cache hits and misses.\n     * @param key - The key to retrieve.\n     * @returns The array of DocumentWithId associated with the key, or undefined if not found or expired.\n     */\n  public get(key: string): DocumentWithId[] | undefined {\n    const result = this.cache.get(key);\n    if (result) {\n      this.cacheHits += 1;\n    } else {\n      this.cacheMisses += 1;\n    }\n    return result;\n  }\n\n  /**\n     * Adds or updates a list of documents in the cache.\n     * Supports custom TTL for each entry.\n     * @param key - The key of the cache entry.\n     * @param value - The array of DocumentWithId to cache.\n     * @param ttl - Optional TTL for this specific entry, overriding global TTL.\n     */\n  public set(key: string, value: DocumentWithId[], ttl?: number): void {\n    this.cache.set(key, value, ttl); // Allow custom TTL per entry\n  }\n\n  /**\n     * Invalidates (removes) a cache entry by key, or clears the entire cache if no key is provided.\n     * @param key - Optional key to remove from the cache. If not provided, the entire cache is cleared.\n     */\n  public invalidate(key?: string): void {\n    if (key) {\n      this.cache.delete(key);\n    } else {\n      this.cache.clear();\n    }\n  }\n\n  /**\n     * Returns cache hit/miss statistics.\n     * @returns An object with hit and miss counts.\n     */\n  public getStats(): { hits: number; misses: number } {\n    return {\n      hits: this.cacheHits,\n      misses: this.cacheMisses,\n    };\n  }\n}\n\nexport default QueryCache;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchEngine.html":{"url":"classes/SearchEngine.html","title":"class - SearchEngine","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchEngine\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/search-engine.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                db\n                            \n                            \n                                    Private\n                                levenshteinCache\n                            \n                            \n                                    Private\n                                normalizationCache\n                            \n                            \n                                    Private\n                                resultLimit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                levenshteinDistance\n                            \n                            \n                                    Public\n                                limit\n                            \n                            \n                                    Private\n                                    Static\n                                normalizeWithCache\n                            \n                            \n                                    Public\n                                search\n                            \n                            \n                                    Private\n                                    Static\n                                tokenize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(db: Map)\n                    \n                \n                        \n                            \n                                Defined in src/utils/search-engine.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                    Map\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/search-engine.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        levenshteinCache\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/search-engine.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        normalizationCache\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/search-engine.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        resultLimit\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/search-engine.ts:18\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        levenshteinDistance\n                        \n                    \n                \n            \n            \n                \n                        \n                    levenshteinDistance(a: string, b: string, maxDistance: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/search-engine.ts:62\n                        \n                    \n\n\n            \n                \n                        Optimized Levenshtein Distance implementation\nUses two rows instead of a full matrix to save memory\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                a\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                b\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                maxDistance\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        limit\n                        \n                    \n                \n            \n            \n                \n                        \n                    limit(limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/search-engine.ts:180\n                        \n                    \n\n\n            \n                \n                        Sets a limit on the number of results returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    Number.MAX_SAFE_INTEGER\n                                            \n\n                                            \n                                                    \nThe maximum number of results to return. default max number of results\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SearchEngine\n\n                        \n                            \n                                The SearchEngine instance for chaining.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        normalizeWithCache\n                        \n                    \n                \n            \n            \n                \n                        \n                    normalizeWithCache(text: string, cache: Map)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/search-engine.ts:31\n                        \n                    \n\n\n            \n                \n                        Normalize the string by lowercasing, removing accents, and trimming whitespace.\nExtended to remove punctuation and accents. Cached for performance.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                text\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cache\n                                            \n                                                        Map\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        search\n                        \n                    \n                \n            \n            \n                \n                        \n                    search(searchTerm: string, fields: ()[], options: FuzzySearchOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/search-engine.ts:106\n                        \n                    \n\n\n            \n                \n                        Main search function which performs fuzzy search based on the search term.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                searchTerm\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe term the user is searching for.\n\n\n                                            \n                                        \n                                        \n                                                fields\n                                            \n                                                        ()[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe fields to search within the objects.\n\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            FuzzySearchOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    { maxDistance: 2, nGramSize: 1 }\n                                            \n\n                                            \n                                                    \nOptions to configure max distance, field weights, n-grams, etc.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type[]\n\n                        \n                            \n                                Array of results with relevance score.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        tokenize\n                        \n                    \n                \n            \n            \n                \n                        \n                    tokenize(text: string, n: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/search-engine.ts:43\n                        \n                    \n\n\n            \n                \n                        Tokenizes the input string into words or terms.\nSupports n-grams and can be expanded to apply stemming/lemmatization.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                text\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                n\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FuzzySearchOptions } from '../types';\n\n/**\n * Removes accents from characters in a string.\n * This function converts accented characters (diacritics) to their base form.\n */\nexport function removeAccents(text: string): string {\n  return text.normalize('NFD').replace(/[\\u0300-\\u036f]/g, ''); // Unicode normalization + regex to strip accents\n}\n\nexport class SearchEngine {\n  private db: Map; // Generic database using a Map\n\n  private levenshteinCache: Map; // Cache for Levenshtein Distance\n\n  private normalizationCache: Map; // Cache for normalized values\n\n  private resultLimit: number | null; // Store the limit for results\n\n  constructor(db: Map) {\n    this.db = db;\n    this.levenshteinCache = new Map();\n    this.normalizationCache = new Map();\n    this.resultLimit = null; // Default limit to null (no limit)\n  }\n\n  /**\n   * Normalize the string by lowercasing, removing accents, and trimming whitespace.\n   * Extended to remove punctuation and accents. Cached for performance.\n   */\n  private static normalizeWithCache(text: string, cache: Map): string {\n    if (!cache.has(text)) {\n      const normalized = removeAccents(text.toLowerCase().trim()).replace(/[^\\w\\s]|_/g, '');\n      cache.set(text, normalized);\n    }\n    return cache.get(text)!;\n  }\n\n  /**\n   * Tokenizes the input string into words or terms.\n   * Supports n-grams and can be expanded to apply stemming/lemmatization.\n   */\n  private static tokenize(text: string, n: number = 1): string[] {\n    const words = text.split(/\\s+/); // Splits by whitespace\n\n    // Generate n-grams if requested\n    if (n > 1) {\n      const nGrams: string[] = [];\n      for (let i = 0; i  maxDistance) {\n      return maxDistance + 1; // Early exit if difference exceeds maxDistance\n    }\n\n    let prevRow = Array(a.length + 1).fill(0);\n    let currRow = Array(a.length + 1).fill(0);\n\n    for (let i = 0; i  {\n      let score = 0;\n\n      fields.forEach((field) => {\n        const fieldValue = item[field];\n        if (typeof fieldValue === 'string') {\n          const normalizedFieldValue = SearchEngine.normalizeWithCache(fieldValue, this.normalizationCache);\n          const fieldTokens = SearchEngine.tokenize(normalizedFieldValue, nGramSize);\n          const fieldWeight = fieldWeights[field as string] || 1;\n\n          searchTokens.forEach((token) => {\n            fieldTokens.forEach((fieldToken) => {\n              const distance = this.levenshteinDistance(token, fieldToken, maxDistance);\n\n              if (distance  0) {\n        results.push({ item, score });\n      }\n    });\n\n    // Sort results by highest score\n    const sortedResults = results.sort((a, b) => b.score - a.score);\n\n    // Apply limit if set\n    return this.resultLimit ? sortedResults.slice(0, this.resultLimit) : sortedResults;\n  }\n\n  /**\n   * Sets a limit on the number of results returned.\n   * @param limit - The maximum number of results to return. default max number of results\n   * @returns The SearchEngine instance for chaining.\n   */\n  public limit(limit: number = Number.MAX_SAFE_INTEGER): SearchEngine {\n    this.resultLimit = limit;\n    return this;\n  }\n}\n\nexport default SearchEngine;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Shard.html":{"url":"classes/Shard.html","title":"class - Shard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Shard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/shared.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                db\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addDocument\n                            \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                deleteById\n                            \n                            \n                                    Public\n                                getById\n                            \n                            \n                                    Public\n                                getDocuments\n                            \n                            \n                                    Public\n                                partitionDocumentsBy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/utils/shared.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        addDocument\n                        \n                    \n                \n            \n            \n                \n                        \n                    addDocument(doc: DocumentWithId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/shared.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                doc\n                                            \n                                                            DocumentWithId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clear\n                        \n                    \n                \n            \n            \n                \n                        \n                    clear()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/shared.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        deleteById\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/shared.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DocumentWithId | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/shared.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DocumentWithId | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getDocuments\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDocuments()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/shared.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         DocumentWithId[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        partitionDocumentsBy\n                        \n                    \n                \n            \n            \n                \n                        \n                    partitionDocumentsBy(field)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/shared.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                field\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DocumentWithId } from '../types';\n\nexport class Shard {\n  private db: Map> = new Map();\n\n  // Add user to this shard\n  public addDocument(doc: DocumentWithId): void {\n    this.db.set(doc.id, doc);\n  }\n\n  // Get all documents\n  public getDocuments(): DocumentWithId[] {\n    return Array.from(this.db.values());\n  }\n\n  // Partition documents by a specific field, e.g., age\n  public partitionDocumentsBy(field: keyof T): { [key: string]: DocumentWithId[] } {\n    const partitions: { [key: string]: DocumentWithId[] } = {};\n\n    this.getDocuments().forEach((doc) => {\n      const key = String(doc[field]);\n      if (!partitions[key]) {\n        partitions[key] = [];\n      }\n      partitions[key].push(doc);\n    });\n\n    return partitions;\n  }\n\n  public getById(id: string): DocumentWithId | undefined {\n    return this.db.get(id);\n  }\n\n  public deleteById(id: string): DocumentWithId | undefined {\n    const doc = this.db.get(id);\n    if (doc) {\n      this.db.delete(id);\n    }\n    return doc;\n  }\n\n  public clear(): void {\n    this.db.clear();\n  }\n}\n\nexport default Shard;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SimpleCondition.html":{"url":"interfaces/SimpleCondition.html","title":"interface - SimpleCondition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SimpleCondition\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a simple condition for filtering data.\nIt includes a field, an operator, a value, and an optional custom comparison function.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            customCompare\n                                        \n                                \n                                \n                                        \n                                            field\n                                        \n                                \n                                \n                                        \n                                            operator\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        customCompare\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customCompare:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional custom comparison function for more complex comparisons.\nTakes two arguments and returns a boolean.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    The field in the object to evaluate.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        operator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        operator:         ComparisonOperator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ComparisonOperator\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The operator used for the comparison.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         ValueTypes\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ValueTypes\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The value to compare against the field.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export type ComparisonOperator =\n    | '$eq'\n    | '$neq'\n    | '$gt'\n    | '$gte'\n    | '$lt'\n    | '$lte'\n    | '$in'\n    | '$nin'\n    | 'custom'\n    | '$regex';\n\n/**\n * Represents a unique identifier for a MEMOZ object.\n * This type can be enhanced with stricter typing rules if desired.\n */\nexport type MEMOZID = string & { __brand__: 'MEMOZID' };\n\n/**\n * Defines valid regex options for regex operations.\n * Supported options include:\n * - 'i': Case-insensitive matching\n * - 'g': Global search\n * - 'm': Multiline mode\n * - 's': Dot all (dot matches newline)\n * - 'u': Unicode matching\n * - 'y': Sticky matching\n */\nexport type RegexOptions = 'i' | 'g' | 'm' | 's' | 'u' | 'y';\n\n/**\n * Represents a condition using a regular expression.\n * The condition includes a regex pattern and optional flags.\n */\nexport type RegexCondition = {\n    /**\n     * The regex pattern, which can be a string or a RegExp object.\n     */\n    $regex: string | RegExp;\n\n    /**\n     * Optional regex options to modify the regex behavior.\n     */\n    $options?: RegexOptions;\n};\n\n/**\n * Defines the valid types that can be used as values in conditions.\n * This includes primitive types, arrays, objects, and RegexCondition.\n */\nexport type ValueTypes = string | number | boolean | Date | any[] | object | RegexCondition | Record;\n\n/**\n * Represents a simple condition for filtering data.\n * It includes a field, an operator, a value, and an optional custom comparison function.\n */\nexport interface SimpleCondition {\n    /**\n     * The field in the object to evaluate.\n     */\n    field: keyof T;\n\n    /**\n     * The operator used for the comparison.\n     */\n    operator: ComparisonOperator;\n\n    /**\n     * The value to compare against the field.\n     */\n    value: ValueTypes;\n\n    /**\n     * An optional custom comparison function for more complex comparisons.\n     * Takes two arguments and returns a boolean.\n     */\n    customCompare?: (a: any, b: any) => boolean;\n}\n\n/**\n * Defines a node structure for logical conditions.\n * Nodes can be composed of AND/OR logic or simple conditions.\n */\nexport type ConditionNode =\n    | { $and: ConditionNode[] } // All conditions must be true.\n    | { $or: ConditionNode[] } // At least one condition must be true.\n    | SimpleCondition; // A simple condition.\n\n/**\n * Represents a document with an associated unique identifier.\n * The document type is extended with an id of type MEMOZID and can include additional properties.\n */\nexport type DocumentWithId = T & { id: MEMOZID; } & { [key: string]: any; };\n\n/**\n * Represents the result of an update operation affecting multiple documents.\n * It includes a success flag, the number of documents updated, and the documents themselves.\n */\nexport type UpdateManyResult = {\n    updated: boolean; // Indicates if the update was successful.\n    n: number; // The number of documents updated.\n    documents: DocumentWithId[]; // The updated documents.\n};\n\n/**\n * Options for configuring the Memoz storage and behavior.\n */\nexport interface MemozOptions {\n    /**\n     * Optional path for storing data on disk.\n     */\n    storagePath?: string;\n\n    /**\n     * Flag indicating if data should persist to disk.\n     */\n    persistToDisk?: boolean;\n\n    /**\n     * Flag indicating if mutex should be used for concurrent access.\n     */\n    useMutex?: boolean;\n}\n\n// Modify the FuzzySearchOptions to include custom scoring logic\nexport interface FuzzySearchOptions {\n    maxDistance?: number;\n    nGramSize?: number;\n    fieldWeights?: { [key in string]?: number }; // Optional weights for fields\n    scoringStrategy?: 'default' | 'tokenCount' | 'custom'; // Strategy for scoring\n    customScoringFn?: (\n      token: string,\n      fieldToken: string,\n      distance: number,\n      fieldWeight: number,\n      options: FuzzySearchOptions\n    ) => number; // Custom scoring function\n  }\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TransactionManager.html":{"url":"classes/TransactionManager.html","title":"class - TransactionManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TransactionManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/transaction-manager.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                db\n                            \n                            \n                                    Private\n                                dbSnapshot\n                            \n                            \n                                    Private\n                                transactionDb\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                beginTransaction\n                            \n                            \n                                    Public\n                                commitTransaction\n                            \n                            \n                                    Public\n                                getCurrentDb\n                            \n                            \n                                    Public\n                                rollbackTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(db: Map>)\n                    \n                \n                        \n                            \n                                Defined in src/utils/transaction-manager.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                    Map>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map>\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/transaction-manager.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dbSnapshot\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map> | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/utils/transaction-manager.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        transactionDb\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map> | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/utils/transaction-manager.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        beginTransaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    beginTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/transaction-manager.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commitTransaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    commitTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/transaction-manager.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getCurrentDb\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCurrentDb()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/transaction-manager.ts:47\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Map>\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        rollbackTransaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    rollbackTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/transaction-manager.ts:34\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DocumentWithId, MEMOZID } from '../types';\n\nexport class TransactionManager {\n  private db: Map>;\n\n  private transactionDb: Map> | null = null;\n\n  private dbSnapshot: Map> | null = null;\n\n  constructor(db: Map>) {\n    this.db = db;\n  }\n\n  public beginTransaction(): void {\n    if (this.transactionDb) {\n      throw new Error('Transaction already in progress');\n    }\n    // Take a snapshot of the current state before the transaction begins\n    this.dbSnapshot = new Map(this.db);\n    // Initialize a transaction state, which will hold temporary changes\n    this.transactionDb = new Map(this.db);\n  }\n\n  public commitTransaction(): void {\n    if (!this.transactionDb) {\n      throw new Error('No transaction in progress');\n    }\n    // Apply the changes made in the transaction to the main db\n    this.db = this.transactionDb;\n    this.transactionDb = null;\n    this.dbSnapshot = null; // Clear the snapshot after committing\n  }\n\n  public rollbackTransaction(): void {\n    if (!this.transactionDb) {\n      throw new Error('No transaction in progress');\n    }\n    if (!this.dbSnapshot) {\n      throw new Error('No snapshot available for rollback');\n    }\n    // Restore the original db state from the snapshot\n    this.db = this.dbSnapshot;\n    this.transactionDb = null;\n    this.dbSnapshot = null; // Clear the snapshot after rollback\n  }\n\n  public getCurrentDb(): Map> {\n    return this.transactionDb || this.db;\n  }\n}\n\nexport default TransactionManager;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n4.0.4 (2024-10-20)\n4.0.3 (2024-10-20)\n4.0.2 (2024-10-18)\nDocumentation Changes\n\nupdate description (42415f3b)\n\n4.0.1 (2024-10-18)\nContinuous Integration\n\nremove docs from pipeline (be1b5db1)\n\n4.0.1 (2024-10-17)\n4.0.0 (2024-10-17)\nNew Features\n\nadd new features like (transaction, presist on disk, etc) (4642966f)\n\n3.1.0 (2024-10-08)\n3.0.0 (2024-10-08)\n2.2.0 (2024-09-16)\nContinuous Integration\n\nresolve pipeline (de8a28fa)\n\n2.1.2 (2022-02-19)\nChores\n\nupdate deps (e81eee88)\n\nBug Fixes\n\nupdate docs (ac42869a)\n\nOther Changes\n\nmiladezzat/memoz into gh-pages (ae7913f1)\n\n2.1.1 (2022-02-11)\nChores\n\nupdate deps (75a1f4f1)\n\nDocumentation Changes\n\nupdate docs (4e9d1718)\n\n2.1.0 (2022-02-09)\nChores\n\nupdate docs (2886b372)\n\nNew Features\n\nsetup docs (69b61d8a)\n\n2.0.1 (2021-08-04)\nChores\n\nupdate dpes (dd121257)\nupdate deps (c411d805)\nupdate deps (4173ee67)\n\nDocumentation Changes\n\nupdate js docs (d687504c)\nupdate docs (75a86338)\n\n2.0.0 (2021-07-30)\nNew Features\n\nupdate create method (5d244251)\n\n1.1.3 (2021-07-28)\nChores\n\nupdate package  json and add husky (e9322431)\n\nContinuous Integration\n\nupdate ci (c0bab78d)\n\nRefactors\n\nsetup environment (95dd6d1e)\nupdate some codes (9b8d080d)\n\n1.1.3 (2021-07-28)\nChores\n\nupdate package  json and add husky (e9322431)\n\nContinuous Integration\n\nupdate ci (c0bab78d)\n\nRefactors\n\nsetup environment (95dd6d1e)\nupdate some codes (9b8d080d)\n\n1.1.2 (2021-07-28)\nDocumentation Changes\n\nupdate docs (5bfdc44a)\n\n1.1.1 (2021-07-28)\nBug Fixes\n\nsolve package (5eef46c0)\n\n1.1.0 (2021-07-27)\nChores\n\nupdate package json (029ad1fa)\n\nDocumentation Changes\n\nupdate docs (276f3b47)\n\nNew Features\n\nadd deleteone function (deae21e0)\n\n1.0.0 (2021-07-26)\nDocumentation Changes\n\nupdate docs (76398cb0)\n\nNew Features\n\nupdate memoz methods (85fb8daf)\nsetup (6d760f53)\n\nBug Fixes\n\nsolve some bugs (4079a95a)\n\nTests\n\nadd unit testing (39424c77)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/constants/memoz-id.ts\n            \n            variable\n            MEMOZ_ID_PATTERN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants/memoz-id.ts\n            \n            variable\n            MEMOZ_ID_TEMPLATE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/memoz.ts\n            \n            class\n            Memoz\n            \n                76 %\n                (23/30)\n            \n        \n        \n            \n                \n                src/types.ts\n            \n            interface\n            FuzzySearchOptions\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/types.ts\n            \n            interface\n            MemozOptions\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/types.ts\n            \n            interface\n            SimpleCondition\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/utils/evaluate-condition.ts\n            \n            variable\n            evaluateCondition\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/evaluate-node.ts\n            \n            variable\n            evaluateNode\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/get-many-query-builder.ts\n            \n            class\n            QueryBuilder\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/utils/get-many-query-builder.ts\n            \n            function\n            createQueryBuilderProxy\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/get-many.ts\n            \n            variable\n            getMany\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/get-one.ts\n            \n            variable\n            getOne\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/helper.ts\n            \n            function\n            chunkArray\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/index-manager.ts\n            \n            class\n            IndexManager\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/utils/indexing.ts\n            \n            class\n            Indexing\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/utils/is-object.ts\n            \n            variable\n            isObject\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/is-valid-memoz-id.ts\n            \n            variable\n            isValidMemozId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/lru-cache.ts\n            \n            class\n            LRUCache\n            \n                0 %\n                (0/26)\n            \n        \n        \n            \n                \n                src/utils/lru-cache.ts\n            \n            interface\n            LRUCacheOptions\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/utils/memoz-id.ts\n            \n            function\n            memozId\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/mutex.ts\n            \n            class\n            Mutex\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/persistence-manager.ts\n            \n            class\n            PersistenceManager\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/utils/query-cache.ts\n            \n            class\n            QueryCache\n            \n                55 %\n                (5/9)\n            \n        \n        \n            \n                \n                src/utils/query-cache.ts\n            \n            interface\n            QueryCacheOptions\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/search-engine.ts\n            \n            class\n            SearchEngine\n            \n                45 %\n                (5/11)\n            \n        \n        \n            \n                \n                src/utils/search-engine.ts\n            \n            function\n            removeAccents\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/shared.ts\n            \n            class\n            Shard\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/utils/transaction-manager.ts\n            \n            class\n            TransactionManager\n            \n                0 %\n                (0/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            chunkArray   (src/.../helper.ts)\n                        \n                        \n                            createQueryBuilderProxy   (src/.../get-many-query-builder.ts)\n                        \n                        \n                            memozId   (src/.../memoz-id.ts)\n                        \n                        \n                            removeAccents   (src/.../search-engine.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        chunkArray\n                        \n                    \n                \n            \n            \n                \nchunkArray(array, size: number)\n                \n            \n\n\n\n\n            \n                \n                        Splits an array into smaller chunks of a specified size.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                array\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe array to split into chunks.\n\n\n                                            \n                                        \n                                        \n                                                size\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe size of each chunk.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     [][]\n\n                        \n                            \n                                \nAn array of chunks.\n\n\n                            \n                \n            \n        \n    \n    src/utils/get-many-query-builder.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createQueryBuilderProxy\n                        \n                    \n                \n            \n            \n                \ncreateQueryBuilderProxy(builder: QueryBuilder)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                builder\n                                            \n                                                            QueryBuilder\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         QueryBuilder\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/utils/memoz-id.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        memozId\n                        \n                    \n                \n            \n            \n                \nmemozId()\n                \n            \n\n\n\n\n            \n                \n                        Generates a MEMOZID string based on a template and current timestamp.\n\n\n                        \n                            Returns :         MEMOZID\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/utils/search-engine.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        removeAccents\n                        \n                    \n                \n            \n            \n                \nremoveAccents(text: string)\n                \n            \n\n\n\n\n            \n                \n                        Removes accents from characters in a string.\nThis function converts accented characters (diacritics) to their base form.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                text\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nMemoz\n \n\nMemoz is an in-memory database that persists on disk, offering easy CRUD operations with a simple API. it supports document persistence to disk.\n\nMemoz\nInstallation\nUsage\n\n\n\nInstallation\nExample :npm i memoz\n# or\nyarn add memozUsage\nExample :import { Memoz, FuzzySearchOptions } from \"memoz\";\n\ninterface IUser {\n    readonly id?: string;\n    name: string;\n    age: number;\n}\n\nconst memoz = new Memoz({\n    persistToDisk: true,  // to allow persist data on disk - default false\n    storagePath: './data', // the location to persist data - default './data'\n    useMutex: true, //  Whether to use a mutex for thread safety - default false\n});\n\n\nasync function boot() {\n    // Uncomment to create and store users in the database\n    // const docs = Array.from({ length: 1000 }, (_, i) => ({ name: `User ${i}`, age: i }));\n    // await memoz.createMany(docs);\n\n    // Loop to get users with pagination and sorting to test caching\n    const totalPages = 2; // Define the total number of pages to iterate over\n    const usersPerPage = 10; // Number of users per page\n\n    for (let index = 0; index  {\n      const baseScore = fieldWeight * (1 / (distance + 1)); // Decrease score as distance increases\n      const titleBonus = fieldToken.includes(token) ? 1 : 0; // Bonus if the fieldToken contains the token\n      return baseScore + titleBonus; // Total score\n    };\n\n    // Example usage\n    const options: FuzzySearchOptions = {\n      maxDistance: 2,\n      scoringStrategy: 'custom',\n      customScoringFn,\n    };\n\n    // Perform a fuzzy search\n    const results = await memoz.fuzzySearch('User 999', ['age', 'name'], options);\n    console.log(results.slice(0, 2));\n  }\n}\n\n// Start the boot process\nboot();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2021 Milad E. Fahmy\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 4.0.4\n        \n            Description : Memoz is an in-memory database that persists on disk. The data model is key-value.\n        \n            Keywords : data, structure, database, redis, transaction, pipelining, performance, queue, nodejs, pubsub, backpressure, cache, ram, simple, storage, typescript, in-memory, disk, persist, key-value, string, list, set, sorted-set, hash\n        \n            Homepage : https://memoz.js.org\n        \n            Bugs : https://github.com/miladezzat/memoz/issues\n        \n            Repository : git+https://github.com/miladezzat/memoz.git\n        \n            Author : Milad E. Fahmy  (https://milad-ezzat.vercel.app)\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ComparisonOperator   (src/.../types.ts)\n                        \n                        \n                            ConditionNode   (src/.../types.ts)\n                        \n                        \n                            DocumentWithId   (src/.../types.ts)\n                        \n                        \n                            EvictionStrategy   (src/.../lru-cache.ts)\n                        \n                        \n                            MEMOZID   (src/.../types.ts)\n                        \n                        \n                            RegexCondition   (src/.../types.ts)\n                        \n                        \n                            RegexOptions   (src/.../types.ts)\n                        \n                        \n                            UpdateManyResult   (src/.../types.ts)\n                        \n                        \n                            ValueTypes   (src/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/types.ts\n    \n    \n        \n            \n                \n                    \n                    ComparisonOperator\n                \n            \n            \n                \n                    Defines comparison operators for query conditions.\nSupported operators include equality, inequality,\ngreater than, greater than or equal to, less than,\nless than or equal to, inclusion in a set,\nexclusion from a set, custom comparisons, and regex matching.\n\n                \n            \n            \n                \n                        \"$eq\" | \"$neq\" | \"$gt\" | \"$gte\" | \"$lt\" | \"$lte\" | \"$in\" | \"$nin\" | \"custom\" | \"$regex\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConditionNode\n                \n            \n            \n                \n                    Defines a node structure for logical conditions.\nNodes can be composed of AND/OR logic or simple conditions.\n\n                \n            \n            \n                \n                            literal type | literal type | SimpleCondition\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DocumentWithId\n                \n            \n            \n                \n                    Represents a document with an associated unique identifier.\nThe document type is extended with an id of type MEMOZID and can include additional properties.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MEMOZID\n                \n            \n            \n                \n                    Represents a unique identifier for a MEMOZ object.\nThis type can be enhanced with stricter typing rules if desired.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegexCondition\n                \n            \n            \n                \n                    Represents a condition using a regular expression.\nThe condition includes a regex pattern and optional flags.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegexOptions\n                \n            \n            \n                \n                    Defines valid regex options for regex operations.\nSupported options include:\n\n'i': Case-insensitive matching\n'g': Global search\n'm': Multiline mode\n's': Dot all (dot matches newline)\n'u': Unicode matching\n'y': Sticky matching\n\n\n                \n            \n            \n                \n                        \"i\" | \"g\" | \"m\" | \"s\" | \"u\" | \"y\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateManyResult\n                \n            \n            \n                \n                    Represents the result of an update operation affecting multiple documents.\nIt includes a success flag, the number of documents updated, and the documents themselves.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ValueTypes\n                \n            \n            \n                \n                    Defines the valid types that can be used as values in conditions.\nThis includes primitive types, arrays, objects, and RegexCondition.\n\n                \n            \n            \n                \n                            string | number | boolean | Date | any[] | object | RegexCondition | Record\n\n                \n            \n        \n    \n    src/utils/lru-cache.ts\n    \n    \n        \n            \n                \n                    \n                    EvictionStrategy\n                \n            \n            \n                \n                        \"LRU\" | \"FIFO\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            evaluateCondition   (src/.../evaluate-condition.ts)\n                        \n                        \n                            evaluateNode   (src/.../evaluate-node.ts)\n                        \n                        \n                            getMany   (src/.../get-many.ts)\n                        \n                        \n                            getOne   (src/.../get-one.ts)\n                        \n                        \n                            isObject   (src/.../is-object.ts)\n                        \n                        \n                            isValidMemozId   (src/.../is-valid-memoz-id.ts)\n                        \n                        \n                            MEMOZ_ID_PATTERN   (src/.../memoz-id.ts)\n                        \n                        \n                            MEMOZ_ID_TEMPLATE   (src/.../memoz-id.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/evaluate-condition.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        evaluateCondition\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (datum: T, condition: SimpleCondition): boolean => {\n  const {\n    field,\n    operator,\n    value,\n    customCompare,\n  } = condition;\n\n  // If a custom comparison function is provided, use it.\n  if (customCompare) {\n    return customCompare(datum[field], value);\n  }\n\n  switch (operator) {\n    case '$eq':\n      return datum[field] === value;\n    case '$neq':\n      return datum[field] !== value;\n    case '$gt':\n      return datum[field] > value;\n    case '$gte':\n      return datum[field] >= value;\n    case '$lt':\n      return datum[field] \n                    \n                \n\n            \n                \n                    Evaluates a condition against a given datum (data object).\nThis function supports various comparison operators including equality,\ninequality, greater than, less than, inclusion/exclusion in a set,\nand regular expression matching.\n\n                \n            \n\n        \n    \n\n    src/utils/evaluate-node.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        evaluateNode\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (datum: T, node: ConditionNode): boolean => {\n  if ('$and' in node) {\n    // AND logic: all conditions must pass\n    return node.$and.every((subNode) => evaluateNode(datum, subNode));\n  }\n  if ('$or' in node) {\n    // OR logic: at least one condition must pass\n    return node.$or.some((subNode) => evaluateNode(datum, subNode));\n  }\n  // Handle simple condition\n  return evaluateCondition(datum, node);\n}\n                    \n                \n\n            \n                \n                    Evaluates a logical condition node against a given datum (data object).\nThis function supports both AND and OR logical operations:\n\nFor AND ($and), all conditions must evaluate to true.\nFor OR ($or), at least one condition must evaluate to true.\nIf the node is a simple condition, it will be evaluated directly.\n\n\n                \n            \n\n        \n    \n\n    src/utils/get-many.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getMany\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (data: T[], query: ConditionNode): T[] => data.filter((datum) => evaluateNode(datum, query))\n                    \n                \n\n            \n                \n                    Precompile conditions to reduce repeated logic checks and handle early exits more effectively.\n\n                \n            \n\n        \n    \n\n    src/utils/get-one.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getOne\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (data: T[], query: ConditionNode): T | undefined => data.find((datum) => evaluateNode(datum, query))\n                    \n                \n\n            \n                \n                    Precompile conditions to reduce repeated logic checks and handle early exits more effectively.\n\n                \n            \n\n        \n    \n\n    src/utils/is-object.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isObject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (value: unknown): boolean => typeof value === 'object'\n        && value !== null\n        && !Array.isArray(value)\n        && Reflect.ownKeys(value).length > 0\n                    \n                \n\n            \n                \n                    Checks if the provided value is a non-null object with at least one own property (excluding arrays).\n\n                \n            \n\n        \n    \n\n    src/utils/is-valid-memoz-id.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isValidMemozId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (memozId: string): memozId is MEMOZID => memozId.length >= 36 && MEMOZ_ID_PATTERN.test(memozId)\n                    \n                \n\n\n        \n    \n\n    src/constants/memoz-id.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MEMOZ_ID_PATTERN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[A-F\\d]{8}-[A-F\\d]{4}-4[A-F\\d]{3}-[89AB][A-F\\d]{3}-[A-F\\d]{12}-[A-Za-z0-9]{9}$/i\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MEMOZ_ID_TEMPLATE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
