var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/FuzzySearchOptions.html",[0,0.771,1,1.06]],["body/interfaces/FuzzySearchOptions.html",[0,1.211,1,1.568,2,1.15,3,0.429,4,0.429,5,0.329,6,1.032,7,0.197,8,0.483,9,0.789,10,2.159,11,2.419,12,1.936,13,2.159,14,2.159,15,0.966,16,0.574,17,0.042,18,1.469,19,0.562,20,2.204,21,1.836,22,1.018,23,1.671,24,1.032,25,1.032,26,1.032,27,1.032,28,1.032,29,1.15,30,1.15,31,2.267,32,2.293,33,1.498,34,1.498,35,0.983,36,1.412,37,1.15,38,1.15,39,1.15,40,1.15,41,1.15,42,1.021,43,0.621,44,1.289,45,1.967,46,1.213,47,1.564,48,0.928,49,1.15,50,1.967,51,0.928,52,1.15,53,0.032,54,1.671,55,1.032,56,0.752,57,1.671,58,1.15,59,1.15,60,1.671,61,1.671,62,1.032,63,1.15,64,1.671,65,1.032,66,1.671,67,1.15,68,1.671,69,1.849,70,0.835,71,1.032,72,1.032,73,2.159,74,1.671,75,1.15,76,1.967,77,1.872,78,1.671,79,1.671,80,0.623,81,1.586,82,0.677,83,1.412,84,1.15,85,0.928,86,1.032,87,1.671,88,1.614,89,1.15,90,1.032,91,1.287,92,1.289,93,1.429,94,1.412,95,1.967,96,0.708,97,1.586,98,1.213,99,1.15,100,0.928,101,0.883,102,1.289,103,1.15,104,1.289,105,1.289,106,1.032,107,1.289,108,1.15,109,1.289,110,0.377,111,1.15,112,1.032,113,0.835,114,0.928,115,1.032,116,1.032,117,1.15,118,1.032,119,1.498,120,1.429,121,1.093,122,1.15,123,1.213,124,0.835,125,1.032,126,1.213,127,1.15,128,0.79,129,0.677,130,1.213,131,0.928,132,1.15,133,1.15,134,1.407,135,1.15,136,1.764,137,2.159,138,1.15,139,1.15,140,1.289,141,1.289,142,1.15,143,1.289,144,1.15,145,1.032,146,1.15,147,1.289,148,1.213,149,1.15,150,1.671,151,0.928,152,1.032,153,0.835,154,1.289,155,1.032,156,1.15,157,2.204,158,0.883,159,1.15,160,0.928,161,1.032,162,1.15,163,1.032,164,1.032,165,1.032,166,1.741,167,1.347,168,1.498,169,1.347,170,1.032,171,1.498,172,1.15,173,1.15,174,1.15,175,0.544,176,1.15,177,0.928,178,1.289,179,0.023]],["title/classes/IndexManager.html",[180,0.2,181,2.111]],["body/classes/IndexManager.html",[3,0.474,4,0.474,5,0.363,7,0.478,8,0.44,9,0.594,16,0.527,17,0.042,19,0.512,22,0.669,36,1.477,42,0.6,43,0.607,53,0.025,56,1.173,70,1.302,80,0.474,81,1.446,82,1.055,83,1.173,94,1.617,96,0.417,101,1.098,110,0.833,120,1.73,123,1.73,128,1.227,130,1.302,134,1.631,155,1.139,158,0.947,160,2.202,175,1.126,179,0.032,180,0.285,181,3.676,182,0.747,183,4.176,184,1.607,185,1.477,186,3.69,187,3.215,188,3.029,189,3.69,190,5.845,191,1.258,192,2.269,193,3.128,194,2.449,195,2.77,196,1.36,197,1.055,198,1.983,199,3.69,200,3.69,201,3.69,202,2.22,203,1.558,204,2.613,205,2.594,206,5.087,207,3.69,208,3.69,209,3.69,210,2.613,211,3.029,212,3.69,213,3.69,214,2.669,215,2.613,216,3.815,217,2.594,218,2.594,219,3.69,220,2.531,221,1.223,222,1.098,223,3.029,224,3.69,225,2.025,226,2.594,227,3.69,228,2.613,229,3.267,230,3.69,231,1.921,232,2.594,233,3.69,234,2.145,235,3.029,236,3.69,237,3.029,238,2.269,239,3.815,240,2.009,241,1.173,242,1.607,243,2.531,244,2.613,245,2.613,246,1.223,247,2.613,248,1.329,249,1.446,250,2.613,251,2.613,252,2.613,253,2.613,254,2.613,255,2.613,256,2.613,257,2.613,258,2.613]],["title/classes/Indexing.html",[180,0.2,187,1.847]],["body/classes/Indexing.html",[3,0.434,4,0.434,5,0.332,7,0.48,8,0.413,9,0.658,16,0.536,17,0.042,19,0.332,22,0.628,33,1.51,36,0.761,42,0.55,43,0.486,46,1.223,51,0.938,53,0.028,56,1.101,69,1.596,80,0.434,81,1.936,82,1.277,83,1.419,94,1.101,100,1.75,101,1.217,110,0.832,113,0.845,120,1.877,123,2.108,126,0.845,128,1.282,134,1.457,155,1.043,158,1.365,160,2.233,175,1.135,179,0.024,180,0.316,182,0.684,185,1.57,187,3.482,188,2.845,191,1.146,192,2.131,193,3.038,194,2.353,196,1.757,197,0.991,198,1.877,202,1.857,203,1.619,205,2.436,221,1.355,222,1.217,225,1.043,226,3.139,229,3.139,237,2.845,240,1.887,241,0.761,242,1.472,243,2.58,246,1.165,248,1.165,249,2.084,259,1.965,260,3.465,261,3.465,262,3.465,263,2.845,264,3.465,265,2.845,266,3.465,267,3.465,268,1.043,269,3.465,270,3.465,271,3.465,272,2.131,273,2.393,274,3.665,275,3.465,276,4.465,277,2.845,278,4.055,279,3.465,280,2.393,281,2.845,282,3.465,283,2.393,284,2.845,285,2.845,286,3.465,287,3.465,288,2.393,289,4.465,290,2.436,291,3.465,292,2.393,293,2.131,294,2.131,295,2.393,296,2.393,297,4.073,298,2.393,299,3.465,300,4.073,301,2.393,302,2.393,303,2.393,304,2.393,305,0.938,306,2.393,307,2.393,308,2.393,309,1.965,310,1.965,311,2.845,312,3.465,313,3.465,314,3.465,315,1.303,316,2.393,317,1.965,318,3.465,319,1.472,320,2.393,321,2.845,322,1.682,323,2.393,324,1.965,325,2.393]],["title/classes/LRUCache.html",[180,0.2,326,1.847]],["body/classes/LRUCache.html",[3,0.347,4,0.347,5,0.266,7,0.16,8,0.35,9,0.768,15,0.601,16,0.571,17,0.042,18,1.421,19,0.599,22,0.532,43,0.515,47,0.933,53,0.02,70,0.676,80,0.347,88,1.505,91,0.609,96,0.829,110,0.861,121,0.609,129,1.02,158,1.312,161,1.279,166,1.856,167,1.399,168,1.279,169,1.568,170,1.879,171,2.183,172,1.944,173,2.738,174,2.301,175,1.252,176,1.944,179,0.02,180,0.128,182,0.548,191,0.754,195,2.178,196,1.887,197,0.839,202,1.568,203,1.845,221,1.432,222,1.286,225,1.279,231,2.004,241,0.609,246,1.544,248,1.487,249,1.15,268,0.835,305,1.915,326,2.194,327,4.777,328,1.347,329,1.734,330,3.568,331,3.568,332,3.568,333,3.568,334,4,335,2.935,336,2.935,337,3.735,338,2.194,339,2.935,340,2.935,341,2.935,342,4,343,4,344,4,345,2.41,346,2.929,347,3.568,348,3.568,349,2.41,350,2.935,351,1.916,352,2.935,353,1.916,354,2.935,355,1.916,356,1.916,357,1.573,358,1.916,359,1.916,360,1.916,361,1.916,362,1.916,363,1.916,364,2.935,365,1.916,366,2.935,367,1.916,368,1.916,369,1.916,370,2.41,371,1.916,372,2.935,373,4,374,1.916,375,2.194,376,2.935,377,1.916,378,1.916,379,1.598,380,1.916,381,4.011,382,1.916,383,1.916,384,1.916,385,2.41,386,1.916,387,1.178,388,1.916,389,1.916,390,1.916,391,1.916,392,1.916,393,1.916,394,1.916,395,1.916,396,2.178,397,1.916,398,1.916,399,1.916,400,1.573,401,1.573,402,1.573,403,1.573,404,1.916,405,2.509,406,3.568,407,2.935,408,3.568,409,1.916,410,3.284,411,2.935,412,1.916,413,3.568,414,2.935,415,2.935,416,1.916,417,1.916,418,1.916,419,2.41,420,4.313,421,3.568,422,4,423,2.935,424,1.916,425,2.935,426,1.916,427,4,428,2.935,429,1.573,430,1.916,431,1.916,432,1.916,433,2.935,434,1.916,435,1.916,436,1.916,437,1.916,438,1.573,439,1.916,440,1.916,441,1.916,442,4,443,2.935,444,1.573,445,2.41,446,1.916,447,1.916,448,1.916,449,1.916,450,1.916,451,1.916,452,1.573,453,2.935,454,3.735,455,2.509,456,1.916,457,1.178]],["title/interfaces/LRUCacheOptions.html",[0,0.771,169,1.177]],["body/interfaces/LRUCacheOptions.html",[0,1.214,1,1.433,2,1.157,3,0.432,4,0.432,5,0.33,6,1.037,7,0.198,8,0.484,9,0.78,10,1.157,11,1.296,12,1.037,13,1.157,14,1.157,15,0.968,16,0.577,17,0.042,18,1.47,19,0.33,20,1.296,21,1.74,22,1.019,23,1.677,24,1.037,25,1.037,26,1.037,27,1.037,28,1.037,29,1.157,30,1.157,31,2.27,32,2.298,33,1.504,34,1.504,35,0.987,36,1.416,37,1.157,38,1.157,39,1.157,40,1.157,41,1.157,42,1.023,43,0.622,44,1.296,45,1.973,46,1.218,47,1.567,48,0.933,49,1.157,50,1.973,51,0.933,52,1.157,53,0.032,54,1.677,55,1.037,56,0.757,57,1.677,58,1.157,59,1.157,60,1.677,61,1.677,62,1.037,63,1.157,64,1.677,65,1.037,66,1.677,67,1.157,68,1.677,69,1.853,70,0.84,71,1.037,72,1.037,73,2.164,74,1.677,75,1.157,76,1.973,77,1.879,78,1.677,79,1.677,80,0.626,81,1.591,82,0.681,83,1.416,84,1.157,85,0.933,86,1.037,87,1.677,88,1.688,89,1.157,90,1.037,91,1.291,92,1.296,93,1.433,94,1.416,95,1.973,96,0.71,97,1.591,98,1.218,99,1.157,100,0.933,101,0.886,102,1.296,103,1.157,104,1.296,105,1.296,106,1.037,107,1.296,108,1.157,109,1.296,110,0.379,111,1.157,112,1.037,113,0.84,114,0.933,115,1.037,116,1.037,117,1.157,118,1.037,119,1.504,120,1.433,121,1.097,122,1.157,123,1.218,124,0.84,125,1.037,126,1.218,127,1.157,128,0.793,129,0.681,130,1.218,131,0.933,132,1.157,133,1.157,134,1.41,135,1.157,136,1.77,137,2.164,138,1.157,139,1.157,140,1.296,141,1.296,142,1.157,143,1.296,144,1.157,145,1.037,146,1.157,147,1.296,148,1.218,149,1.157,150,1.677,151,0.933,152,1.037,153,0.84,154,1.296,155,1.037,156,1.157,157,2.211,158,0.886,159,1.157,160,0.933,161,1.037,162,1.157,163,1.037,164,1.037,165,1.037,166,2.081,167,1.353,168,1.504,169,1.591,170,1.941,171,2.061,172,2.164,173,1.157,174,1.157,175,0.547,176,2.164,177,0.933,178,1.296,179,0.023]],["title/interfaces/MemozOptions.html",[0,0.771,145,1.309]],["body/interfaces/MemozOptions.html",[0,1.211,1,1.429,2,1.15,3,0.429,4,0.429,5,0.329,6,1.032,7,0.197,8,0.483,9,0.773,10,1.15,11,1.289,12,1.032,13,1.15,14,1.15,15,0.829,16,0.57,17,0.042,18,1.43,19,0.329,20,1.289,21,1.737,22,1.018,23,1.671,24,1.032,25,1.032,26,1.032,27,1.032,28,1.032,29,1.15,30,1.15,31,2.267,32,2.293,33,1.498,34,1.498,35,1.158,36,1.412,37,1.15,38,1.15,39,1.15,40,1.15,41,1.15,42,1.021,43,0.643,44,1.289,45,1.967,46,1.213,47,1.614,48,0.928,49,1.15,50,1.967,51,0.928,52,1.15,53,0.032,54,1.671,55,1.032,56,0.752,57,1.671,58,1.15,59,1.15,60,1.671,61,1.671,62,1.032,63,1.15,64,1.671,65,1.032,66,1.671,67,1.15,68,1.671,69,1.849,70,0.835,71,1.032,72,1.032,73,2.159,74,1.671,75,1.15,76,1.967,77,1.872,78,1.671,79,1.967,80,0.623,81,1.741,82,0.677,83,1.412,84,1.15,85,0.928,86,1.032,87,1.671,88,1.734,89,1.15,90,1.032,91,1.287,92,1.289,93,1.665,94,1.412,95,1.967,96,0.708,97,1.586,98,1.213,99,1.15,100,0.928,101,0.883,102,1.289,103,1.15,104,1.289,105,1.289,106,1.032,107,1.289,108,1.15,109,1.289,110,0.377,111,1.15,112,1.032,113,0.835,114,0.928,115,1.032,116,1.032,117,1.15,118,1.032,119,1.498,120,1.429,121,1.093,122,1.15,123,1.213,124,0.835,125,1.032,126,1.213,127,1.15,128,0.79,129,0.677,130,1.213,131,0.928,132,1.15,133,1.15,134,1.407,135,1.15,136,2.056,137,2.159,138,1.15,139,1.15,140,1.289,141,1.289,142,1.15,143,1.872,144,1.671,145,1.498,146,1.671,147,1.872,148,1.568,149,2.159,150,2.159,151,1.347,152,1.936,153,1.213,154,1.872,155,1.498,156,2.159,157,2.204,158,0.883,159,1.15,160,0.928,161,1.032,162,1.15,163,1.032,164,1.032,165,1.032,166,1.741,167,1.347,168,1.498,169,1.347,170,1.032,171,1.498,172,1.15,173,1.15,174,1.15,175,0.544,176,1.15,177,0.928,178,1.289,179,0.023,185,0.752]],["title/classes/Mutex.html",[153,1.06,180,0.2]],["body/classes/Mutex.html",[3,0.715,4,0.715,5,0.548,7,0.329,8,0.578,9,0.548,15,0.808,16,0.529,17,0.042,19,0.672,22,0.879,53,0.033,96,0.772,101,1.244,110,0.629,129,1.386,130,1.393,131,1.546,153,2.063,175,0.907,179,0.033,180,0.263,182,1.128,196,1.667,197,1.386,198,1.851,203,1.54,221,1.386,222,1.013,231,1.899,246,1.386,248,1.128,375,3.451,458,3.239,459,4.845,460,4.845,461,3.946,462,4.845,463,3.946,464,5.468,465,3.946,466,3.946,467,4.845,468,2.638,469,3.946,470,3.239,471,3.946,472,3.946,473,3.977,474,3.946,475,3.946,476,3.946,477,3.946,478,3.946,479,3.946]],["title/classes/PersistenceManager.html",[180,0.2,480,2.111]],["body/classes/PersistenceManager.html",[3,0.465,4,0.465,5,0.777,7,0.214,8,0.435,9,0.356,16,0.536,17,0.042,19,0.356,22,0.661,42,0.837,43,0.621,53,0.025,80,0.465,88,1.653,93,1.993,96,0.581,101,0.659,110,0.735,113,0.906,114,1.428,121,0.816,124,1.286,128,0.837,131,1.807,134,1.211,136,2.009,146,2.458,148,1.935,150,2.24,151,1.807,152,2.316,179,0.025,180,0.282,182,0.734,184,1.578,185,1.158,195,1.397,196,1.78,197,1.042,198,1.785,202,2.294,203,1.608,214,2.754,217,2.561,220,1.984,221,0.734,222,0.659,231,2.149,241,1.346,242,1.578,243,2.306,248,1.318,268,1.118,272,2.24,278,2.991,309,2.991,310,3.784,337,2.107,338,3.11,375,3.372,387,1.578,452,2.107,457,2.835,468,1.984,480,3.422,481,4.27,482,3.643,483,3.784,484,3.643,485,3.643,486,3.643,487,5.407,488,4.61,489,4.61,490,2.561,491,3.643,492,3.643,493,3.643,494,3.241,495,2.566,496,3.643,497,2.566,498,3.643,499,3.643,500,2.566,501,3.643,502,3.784,503,4.61,504,2.566,505,3.643,506,2.991,507,3.477,508,3.643,509,2.566,510,2.566,511,2.566,512,1.804,513,4.61,514,2.566,515,2.566,516,4.235,517,2.566,518,2.566,519,2.566,520,2.566,521,2.566,522,2.566,523,2.566,524,2.566,525,2.566,526,2.566,527,2.566,528,2.566,529,1.578,530,2.566,531,2.566,532,2.107,533,2.566,534,2.566,535,2.566,536,2.566,537,2.566,538,2.566,539,2.107,540,2.991,541,2.566,542,2.566,543,2.566]],["title/classes/QueryBuilder.html",[180,0.2,544,1.847]],["body/classes/QueryBuilder.html",[3,0.353,4,0.353,5,0.27,7,0.162,8,0.354,9,0.698,15,0.937,16,0.56,17,0.042,18,1.318,19,0.603,22,0.538,43,0.546,53,0.02,79,0.945,80,0.353,82,0.556,88,0.944,90,1.995,96,0.802,97,0.762,100,1.164,101,0.762,106,0.847,110,0.73,112,0.847,121,0.944,128,1.128,129,1.548,158,0.762,175,0.997,179,0.02,180,0.24,182,0.556,191,0.499,194,2.461,196,1.843,197,1.03,198,2.003,203,1.775,221,1.439,222,1.222,225,1.757,231,1.702,241,0.944,246,1.587,248,1.361,268,1.294,305,1.702,315,1.617,319,1.196,329,1.443,338,2.814,345,2.437,375,3.472,387,2.669,396,1.617,400,1.596,401,1.596,402,1.596,403,1.596,405,2.087,457,1.826,473,2.957,502,1.596,544,2.669,545,3.454,546,3.949,547,1.367,548,2.969,549,4.342,550,3.601,551,4.342,552,3.294,553,4.761,554,4.342,555,4.909,556,4.031,557,4.031,558,2.969,559,2.437,560,4.031,561,3.601,562,2.437,563,1.944,564,2.969,565,2.437,566,1.944,567,1.944,568,1.944,569,1.944,570,1.944,571,1.944,572,1.944,573,1.944,574,4.342,575,1.944,576,3.601,577,4.761,578,1.944,579,2.969,580,1.944,581,1.944,582,2.969,583,1.944,584,1.944,585,2.969,586,1.944,587,2.969,588,1.944,589,1.944,590,1.944,591,2.969,592,3.601,593,2.969,594,1.944,595,2.969,596,3.601,597,3.601,598,3.601,599,1.944,600,1.944,601,2.969,602,2.437,603,1.944,604,1.944,605,1.944,606,2.969,607,2.969,608,1.944,609,1.944,610,2.087,611,1.596,612,1.944,613,1.944,614,1.944,615,4.031,616,1.944,617,1.944,618,3.601,619,1.944,620,2.969,621,1.944,622,4.031,623,1.944,624,4.031,625,1.944,626,2.214,627,1.944,628,2.437,629,1.944,630,2.437,631,1.944,632,2.087,633,1.596,634,1.944,635,1.944,636,1.944,637,1.944,638,1.596,639,3.601,640,1.944,641,1.944,642,1.944,643,1.944,644,1.944,645,1.944,646,1.944,647,1.944,648,1.944,649,1.944,650,2.437,651,1.944,652,1.944,653,1.944,654,1.944,655,1.944,656,1.596,657,1.944,658,1.944,659,4.031,660,2.969,661,1.944,662,3.601,663,1.944,664,1.944,665,1.944,666,1.944,667,1.944]],["title/classes/QueryCache.html",[180,0.2,552,1.847]],["body/classes/QueryCache.html",[3,0.452,4,0.452,5,0.346,7,0.208,8,0.426,9,0.756,16,0.532,17,0.042,18,1.379,19,0.579,21,1.472,22,0.647,36,1.447,43,0.65,47,1.325,53,0.024,55,1.556,80,0.452,82,0.713,85,0.978,96,0.822,110,0.841,124,1.26,128,1.252,129,1.192,134,1.301,158,1.503,161,1.983,166,1.399,167,1.399,170,2.183,171,2.523,175,1.046,177,1.784,179,0.024,180,0.166,182,0.713,185,1.447,191,0.64,192,2.195,196,1.707,197,1.021,198,1.967,203,1.677,205,1.754,211,2.931,216,2.931,221,1.301,222,1.168,223,2.931,225,1.983,231,1.784,232,2.51,235,2.931,238,2.798,241,1.135,243,2.728,246,1.021,248,1.021,249,1.399,268,1.087,272,1.534,274,2.048,281,2.931,290,2.51,293,2.195,294,2.195,305,1.784,322,1.754,326,2.961,328,1.754,329,2.876,349,2.931,357,2.048,370,2.931,379,1.358,381,4.409,385,2.931,387,2.564,396,1.944,410,2.048,419,2.048,444,2.048,445,2.048,529,1.534,552,2.961,668,4.409,669,4.169,670,4.169,671,4.551,672,3.57,673,3.57,674,3.57,675,4.551,676,2.495,677,2.495,678,3.736,679,3.57,680,4.816,681,4.816,682,3.57,683,2.495,684,3.57,685,3.57,686,3.57,687,3.57,688,3.57,689,3.57,690,2.495,691,3.57,692,4.551,693,3.57,694,2.495,695,2.195,696,2.51,697,2.931,698,3.57,699,2.495,700,2.048,701,2.495,702,3.57,703,3.57,704,2.048]],["title/interfaces/QueryCacheOptions.html",[0,0.771,177,1.177]],["body/interfaces/QueryCacheOptions.html",[0,1.222,1,1.447,2,1.177,3,0.439,4,0.439,5,0.336,6,1.056,7,0.202,8,0.489,9,0.751,10,1.177,11,1.319,12,1.056,13,1.177,14,1.177,15,0.84,16,0.568,17,0.042,18,1.457,19,0.336,20,1.319,21,1.751,22,1.022,23,1.699,24,1.056,25,1.056,26,1.056,27,1.056,28,1.056,29,1.177,30,1.177,31,2.281,32,2.314,33,1.523,34,1.523,35,1,36,1.427,37,1.177,38,1.177,39,1.177,40,1.177,41,1.177,42,1.032,43,0.625,44,1.319,45,1.993,46,1.234,47,1.577,48,0.949,49,1.177,50,1.993,51,0.949,52,1.177,53,0.032,54,1.699,55,1.056,56,0.77,57,1.699,58,1.177,59,1.177,60,1.699,61,1.699,62,1.056,63,1.177,64,1.699,65,1.056,66,1.699,67,1.177,68,1.699,69,1.866,70,0.855,71,1.056,72,1.056,73,2.182,74,1.699,75,1.177,76,1.993,77,1.903,78,1.699,79,1.699,80,0.634,81,1.607,82,0.693,83,1.427,84,1.177,85,0.949,86,1.056,87,1.699,88,1.625,89,1.177,90,1.056,91,1.304,92,1.319,93,1.447,94,1.427,95,1.993,96,0.716,97,1.607,98,1.234,99,1.177,100,0.949,101,0.897,102,1.319,103,1.177,104,1.319,105,1.319,106,1.056,107,1.319,108,1.177,109,1.319,110,0.386,111,1.177,112,1.056,113,0.855,114,0.949,115,1.056,116,1.056,117,1.177,118,1.056,119,1.523,120,1.447,121,1.111,122,1.177,123,1.234,124,0.855,125,1.056,126,1.234,127,1.177,128,0.803,129,0.693,130,1.234,131,0.949,132,1.177,133,1.177,134,1.419,135,1.177,136,1.787,137,2.182,138,1.177,139,1.177,140,1.319,141,1.319,142,1.177,143,1.319,144,1.177,145,1.056,146,1.177,147,1.319,148,1.234,149,1.177,150,1.699,151,0.949,152,1.056,153,0.855,154,1.319,155,1.056,156,1.177,157,2.233,158,0.897,159,1.177,160,0.949,161,1.056,162,1.177,163,1.056,164,1.056,165,1.056,166,2.004,167,1.76,168,1.957,169,1.607,170,1.056,171,2.075,172,1.177,173,1.177,174,1.177,175,0.557,176,1.177,177,1.37,178,1.903,179,0.024]],["title/classes/SearchEngine.html",[180,0.2,705,2.111]],["body/classes/SearchEngine.html",[1,1.385,3,0.407,4,0.407,5,0.311,7,0.187,8,0.394,9,0.67,12,2.176,13,1.606,15,0.803,16,0.544,17,0.042,18,1.457,19,0.693,22,0.711,31,0.977,43,0.7,47,1.247,53,0.022,56,1.535,65,0.977,70,0.791,80,0.407,82,0.641,86,0.977,94,0.713,96,0.625,108,1.09,110,0.77,112,1.71,125,1.44,142,2.49,159,1.09,160,1.538,163,0.977,164,2.011,165,0.977,179,0.037,180,0.149,182,0.641,185,1.05,191,0.848,193,1.379,196,1.83,197,0.945,198,1.629,202,2.196,203,1.691,214,2.513,218,1.576,220,1.221,221,1.381,222,1.24,225,0.977,241,0.713,243,1.221,246,1.428,248,1.496,249,0.879,263,2.712,268,0.977,272,2.031,277,2.712,285,1.841,293,1.379,294,2.031,305,1.697,311,2.712,319,1.379,329,2.243,379,1.221,396,2.629,455,2.323,490,2.323,512,1.576,559,4.428,562,1.841,565,2.712,610,2.758,626,2.662,628,1.841,650,2.712,695,2.031,705,3.51,706,3.792,707,1.576,708,3.923,709,3.923,710,3.923,711,3.304,712,4.828,713,3.304,714,3.304,715,3.304,716,2.242,717,2.242,718,2.242,719,2.242,720,2.242,721,2.242,722,3.304,723,2.242,724,2.242,725,2.242,726,2.242,727,2.242,728,2.242,729,1.379,730,3.304,731,2.242,732,3.304,733,3.304,734,3.923,735,3.304,736,2.242,737,3.304,738,3.304,739,3.964,740,3.304,741,3.923,742,3.304,743,2.323,744,2.712,745,2.242,746,2.242,747,1.841,748,2.242,749,1.841,750,3.304,751,2.242,752,1.576,753,2.242,754,2.242,755,1.841,756,2.242,757,4.329,758,1.841,759,2.242,760,3.554,761,3.304,762,2.242,763,3.304,764,3.923,765,3.304,766,3.304,767,3.304,768,2.712,769,1.841,770,1.841,771,1.841,772,1.841,773,1.841,774,1.841,775,2.242,776,2.242,777,2.242,778,2.242,779,2.242,780,3.923,781,1.841,782,2.242,783,3.304,784,4.329,785,2.242,786,2.242,787,2.242,788,2.242,789,2.242,790,1.841,791,2.242,792,2.242,793,2.242,794,2.242,795,2.242,796,2.242,797,3.304,798,3.304,799,2.242,800,2.242,801,3.304,802,2.242,803,2.242,804,2.242,805,2.242,806,2.242,807,2.242,808,2.242,809,2.242,810,2.242,811,2.242,812,1.841,813,2.242,814,3.304,815,2.242,816,2.242,817,2.242,818,2.242]],["title/classes/Shard.html",[180,0.2,819,2.111]],["body/classes/Shard.html",[3,0.603,4,0.603,5,0.461,7,0.277,8,0.518,9,0.713,16,0.537,17,0.042,19,0.603,22,0.788,43,0.674,53,0.03,80,0.603,94,1.381,96,0.53,100,1.302,101,0.853,110,0.871,126,1.534,128,1.342,134,1.243,158,1.243,175,1.18,179,0.03,180,0.221,182,0.95,191,1.116,195,2.796,196,1.539,197,1.243,198,2.111,202,2.013,203,1.77,214,2.637,221,1.468,222,1.318,231,2.013,239,4.375,240,1.81,241,1.056,246,1.468,248,1.385,265,3.567,379,1.81,539,2.728,697,2.728,752,2.336,819,3.61,820,2.728,821,4.345,822,4.345,823,5.135,824,4.345,825,3.323,826,4.345,827,3.323,828,3.323,829,4.345,830,3.323,831,4.345,832,3.323,833,3.323,834,4.345,835,3.323,836,3.323,837,3.323,838,3.323,839,3.323,840,2.728,841,4.345,842,3.323,843,3.323,844,4.345,845,3.323,846,4.345,847,3.323]],["title/interfaces/SimpleCondition.html",[0,0.771,98,1.06]],["body/interfaces/SimpleCondition.html",[0,1.205,1,1.419,2,1.137,3,0.424,4,0.424,5,0.325,6,1.019,7,0.195,8,0.48,9,0.746,10,1.137,11,1.274,12,1.019,13,1.137,14,1.137,15,1.036,16,0.569,17,0.042,18,1.427,19,0.325,20,1.274,21,1.83,22,1.016,23,2.147,24,1.019,25,1.019,26,1.019,27,1.019,28,1.019,29,1.137,30,1.137,31,2.26,32,2.382,33,1.485,34,1.485,35,0.975,36,1.492,37,1.137,38,1.137,39,1.137,40,1.137,41,1.137,42,1.015,43,0.619,44,1.274,45,1.954,46,1.203,47,1.558,48,0.917,49,1.137,50,1.954,51,0.917,52,1.137,53,0.032,54,1.656,55,1.019,56,0.744,57,1.656,58,1.137,59,1.137,60,1.656,61,1.656,62,1.019,63,1.137,64,1.656,65,1.019,66,1.656,67,1.137,68,1.656,69,1.921,70,0.826,71,1.019,72,1.019,73,2.282,74,1.656,75,1.137,76,1.954,77,1.856,78,1.656,79,1.656,80,0.618,81,1.731,82,0.669,83,1.404,84,1.137,85,0.917,86,1.019,87,2.147,88,1.648,89,1.137,90,1.019,91,1.404,92,1.856,93,1.559,94,1.707,95,2.52,96,0.843,97,1.921,98,1.419,99,1.656,100,0.917,101,0.875,102,1.856,103,1.656,104,1.856,105,1.856,106,1.485,107,1.856,108,1.656,109,1.856,110,0.543,111,2.147,112,1.019,113,0.826,114,0.917,115,1.019,116,1.019,117,1.137,118,1.019,119,1.485,120,1.419,121,1.083,122,1.137,123,1.203,124,0.826,125,1.019,126,1.203,127,1.137,128,0.783,129,0.669,130,1.203,131,0.917,132,1.137,133,1.137,134,1.402,135,1.137,136,1.752,137,2.147,138,1.137,139,1.137,140,1.274,141,1.274,142,1.137,143,1.274,144,1.137,145,1.019,146,1.137,147,1.274,148,1.203,149,1.137,150,1.656,151,0.917,152,1.019,153,0.826,154,1.274,155,1.019,156,1.137,157,2.189,158,0.875,159,1.137,160,0.917,161,1.019,162,1.137,163,1.019,164,1.019,165,1.019,166,1.731,167,1.336,168,1.485,169,1.336,170,1.019,171,1.485,172,1.137,173,1.137,174,1.137,175,0.537,176,1.137,177,0.917,178,1.274,179,0.023,185,0.744]],["title/classes/TransactionManager.html",[180,0.2,848,2.111]],["body/classes/TransactionManager.html",[3,0.58,4,0.58,5,0.444,7,0.266,8,0.505,9,0.444,16,0.51,17,0.042,19,0.659,22,0.768,42,0.734,53,0.029,80,0.58,96,0.675,110,0.806,128,0.734,175,1.242,179,0.029,180,0.213,182,0.914,184,1.965,191,1.388,195,2.306,196,1.802,197,1.211,198,2.05,202,2.262,203,1.78,214,3.004,221,0.914,222,0.821,234,2.624,241,1.016,246,0.914,268,1.393,324,4.152,468,1.74,490,2.977,506,3.9,512,3.555,540,2.624,610,2.247,626,3.572,632,2.247,633,2.624,747,2.624,848,3.339,849,4.654,850,4.75,851,4.75,852,5.058,853,5.058,854,5.058,855,5.058,856,4.235,857,3.196,858,3.196,859,3.196,860,3.196,861,3.196,862,5.601,863,3.196,864,4.75,865,3.196,866,5.262,867,3.196,868,3.699,869,3.196,870,5.262,871,4.235,872,2.624,873,3.196,874,3.196,875,3.477,876,4.75,877,3.196,878,3.196,879,4.235,880,3.196]],["title/changelog.html",[881,1.776,882,1.776,883,2.074]],["body/changelog.html",[5,0.445,15,0.657,17,0.029,35,0.917,53,0.029,130,2.127,148,1.132,179,0.029,185,1.02,191,1.39,197,0.917,240,2.869,294,1.973,470,2.634,507,3.907,529,1.973,758,2.634,868,2.255,875,4.602,883,2.634,884,3.208,885,3.208,886,3.208,887,3.208,888,3.208,889,2.634,890,3.208,891,3.208,892,2.634,893,5.728,894,4.657,895,4.759,896,3.208,897,3.208,898,3.208,899,4.246,900,3.805,901,3.208,902,4.246,903,5.065,904,5.065,905,4.702,906,4.246,907,3.208,908,4.246,909,3.208,910,5.413,911,3.208,912,3.208,913,3.208,914,4.759,915,3.208,916,3.208,917,4.246,918,3.208,919,3.208,920,3.208,921,4.759,922,4.759,923,3.208,924,5.521,925,5.065,926,3.208,927,4.759,928,4.759,929,3.208,930,3.208,931,3.208,932,2.634,933,3.208,934,3.208,935,2.634,936,3.208,937,3.208,938,3.208,939,3.208,940,5.065,941,3.208,942,3.208,943,4.602,944,3.208,945,3.208,946,3.208,947,3.208,948,3.208,949,3.208,950,3.208,951,3.208,952,3.208,953,5.521,954,3.208,955,3.208,956,3.208,957,4.246,958,5.065,959,4.158,960,4.246,961,4.246,962,4.246,963,4.246,964,4.246,965,4.246,966,4.246,967,4.246,968,4.246,969,3.208,970,3.208,971,3.208,972,4.246,973,3.208,974,3.208,975,3.208,976,3.208,977,3.208,978,3.208,979,3.208,980,3.208,981,3.208,982,3.208,983,3.208,984,3.208,985,2.634,986,3.208,987,3.208,988,3.208,989,3.208,990,3.208]],["title/coverage.html",[991,3.335]],["body/coverage.html",[0,1.385,1,1.218,5,0.479,6,2.35,15,1.067,16,0.348,17,0.042,34,1.504,35,1.274,42,0.793,46,1.218,53,0.03,98,1.218,145,1.504,153,1.218,169,1.353,177,1.353,179,0.03,180,0.389,181,2.426,183,2.833,184,3.032,187,2.122,191,0.886,194,1.941,259,2.833,305,2.303,326,2.122,327,2.833,328,3.131,458,2.833,480,2.426,481,2.833,544,2.122,545,3.204,546,3.131,547,3.131,552,2.122,668,2.833,705,2.426,706,3.131,707,3.131,819,2.426,820,2.833,848,2.426,849,2.833,900,2.426,991,2.833,992,3.452,993,3.656,994,3.663,995,5.753,996,2.833,997,5.21,998,2.833,999,3.452,1000,3.452,1001,3.452,1002,4.454,1003,5.929,1004,3.452,1005,4.454,1006,3.452,1007,4.048,1008,2.833,1009,2.833,1010,5.753,1011,3.656,1012,2.833,1013,2.833,1014,3.452,1015,2.833,1016,2.833,1017,2.833,1018,2.833,1019,2.833,1020,2.833,1021,2.833,1022,3.452,1023,3.452,1024,3.656,1025,2.833,1026,2.833,1027,2.833,1028,3.452,1029,2.833,1030,3.452,1031,3.452,1032,3.452,1033,3.452,1034,3.452,1035,2.833,1036,3.452,1037,3.452,1038,3.452,1039,3.452]],["title/miscellaneous/functions.html",[1040,1.228,1041,2.957]],["body/miscellaneous/functions.html",[7,0.334,9,0.733,15,0.82,16,0.532,17,0.04,18,1.256,42,1.295,43,0.673,53,0.033,110,0.876,179,0.033,185,1.273,193,2.464,194,2.131,221,1.51,222,1.355,225,2.396,229,2.817,242,2.464,284,3.289,293,2.464,346,4.513,468,2.182,544,3.246,545,2.464,546,3.438,547,3.438,656,3.289,696,2.817,706,2.817,707,3.438,739,3.289,744,3.289,768,4.015,769,3.289,770,3.289,771,3.289,772,3.289,773,3.289,774,3.289,790,3.289,994,3.438,1015,4.015,1020,3.289,1021,4.015,1029,3.289,1035,4.015,1040,1.947,1041,3.289,1042,4.007,1043,3.289,1044,3.289,1045,4.007,1046,4.007,1047,4.007,1048,5.279,1049,4.007,1050,4.007,1051,4.007,1052,4.007]],["title/index.html",[7,0.21,881,1.776,882,1.776]],["body/index.html",[0,0.884,1,1.569,7,0.37,10,1.673,12,1.5,14,1.673,15,0.705,17,0.042,18,1.264,19,0.683,21,1.215,35,1.627,43,0.53,47,1.413,48,1.349,53,0.03,56,1.094,91,1.094,93,1.837,121,1.413,123,1.215,126,1.215,148,1.738,149,1.673,151,1.743,152,1.5,153,1.215,156,1.673,162,1.673,163,1.5,164,1.938,165,1.5,179,0.034,191,0.884,220,2.421,222,1.264,240,1.874,241,1.094,246,0.984,248,1.627,305,1.743,315,1.874,322,2.42,338,2.117,396,2.682,405,3.125,454,3.65,457,2.734,483,2.826,494,2.42,529,2.117,611,2.826,630,2.826,638,2.826,695,2.117,700,2.826,704,2.826,729,2.117,749,2.826,752,2.42,755,4.043,760,3.65,781,2.826,840,4.043,894,2.826,905,2.826,932,2.826,1053,2.826,1054,3.442,1055,3.442,1056,3.442,1057,3.442,1058,4.446,1059,4.446,1060,4.925,1061,3.442,1062,3.442,1063,3.442,1064,3.442,1065,3.442,1066,3.442,1067,3.442,1068,2.826,1069,4.925,1070,3.442,1071,4.925,1072,3.442,1073,3.442,1074,3.442,1075,3.442,1076,3.442,1077,3.442,1078,3.442,1079,3.442,1080,3.442,1081,3.442,1082,3.442,1083,3.442,1084,4.446,1085,3.442,1086,3.442,1087,4.446,1088,3.442,1089,3.442,1090,3.442,1091,3.442,1092,3.442,1093,3.442,1094,3.442,1095,3.442,1096,3.442]],["title/license.html",[881,1.776,882,1.776,1097,2.074]],["body/license.html",[17,0.034,53,0.034,78,1.978,83,1.293,118,1.773,124,1.436,179,0.034,238,2.502,315,2.689,494,2.861,602,3.341,900,2.861,943,3.341,1097,3.341,1098,4.069,1099,5.315,1100,4.069,1101,3.341,1102,3.341,1103,3.341,1104,4.937,1105,4.069,1106,4.069,1107,4.069,1108,4.069,1109,4.069,1110,4.069,1111,4.937,1112,5.919,1113,4.069,1114,4.069,1115,5.315,1116,4.069,1117,4.053,1118,4.069,1119,4.069,1120,4.069,1121,4.069,1122,4.069,1123,4.069,1124,4.069,1125,4.937,1126,4.069,1127,4.069,1128,4.069,1129,4.069,1130,4.069,1131,4.069,1132,4.937,1133,4.937,1134,4.069,1135,4.069,1136,4.069,1137,4.069,1138,4.069,1139,4.069,1140,4.069,1141,4.069,1142,4.069,1143,4.069,1144,4.069,1145,4.069,1146,4.069,1147,4.069,1148,4.069,1149,4.069,1150,4.069,1151,4.069,1152,4.069,1153,4.069,1154,4.069,1155,4.069,1156,4.069,1157,4.069,1158,4.069,1159,4.069,1160,4.069,1161,4.069]],["title/modules.html",[1162,3.335]],["body/modules.html",[17,0.037,53,0.037,179,0.037,1162,3.912]],["title/overview.html",[1163,3.335]],["body/overview.html",[2,2.299,17,0.037,53,0.037,179,0.037,182,1.353,935,3.883,1163,3.883,1164,4.731]],["title/properties.html",[8,0.43,959,2.074]],["body/properties.html",[8,0.513,17,0.041,35,1.229,43,0.513,53,0.035,91,1.366,93,1.801,96,0.813,114,1.685,144,2.089,148,1.801,151,1.685,158,1.31,179,0.035,185,1.366,220,2.779,249,2,329,2.089,678,3.529,729,3.137,743,3.022,868,3.022,889,3.529,892,3.529,985,3.529,1053,3.529,1101,3.529,1102,3.529,1103,3.529,1165,4.299,1166,4.299,1167,4.299,1168,4.299,1169,4.299,1170,4.299,1171,4.299,1172,4.299,1173,4.299,1174,4.299,1175,4.299,1176,4.299,1177,4.299,1178,4.299,1179,4.299,1180,4.299,1181,4.299,1182,4.299,1183,4.299,1184,4.299]],["title/miscellaneous/typealiases.html",[1040,1.228,1185,3.602]],["body/miscellaneous/typealiases.html",[6,1.49,7,0.285,8,0.408,9,0.475,16,0.573,17,0.041,18,1.137,21,1.562,23,2.151,24,1.49,25,1.49,26,1.49,27,1.49,28,1.49,29,1.662,30,1.662,31,2.344,32,2.523,33,1.929,34,1.929,35,0.978,36,1.407,37,1.662,38,1.662,39,1.662,40,1.662,41,1.662,42,1.128,43,0.408,45,2.523,46,1.562,47,1.407,48,1.34,49,2.151,50,2.386,51,1.34,52,1.662,53,0.037,54,2.151,55,1.49,56,1.087,57,2.151,58,1.662,59,1.662,60,2.151,61,2.151,62,1.49,63,1.662,64,2.151,65,1.49,66,2.151,67,1.662,68,2.151,69,1.735,70,1.207,71,1.49,72,1.49,73,2.386,74,1.662,75,1.662,76,2.523,80,0.803,81,1.34,82,0.978,83,1.65,84,1.662,85,1.34,86,1.49,87,2.151,88,1.087,89,1.662,90,1.49,91,1.087,97,1.34,98,1.207,106,1.49,113,1.207,114,1.34,115,1.49,116,1.49,117,1.662,118,1.49,119,1.49,120,1.562,123,1.562,124,1.207,125,1.49,126,1.207,127,1.662,128,1.017,129,0.978,130,1.207,131,1.34,132,1.662,133,1.662,134,1.404,135,1.662,136,1.49,137,1.662,138,1.662,139,2.151,166,1.735,167,1.34,168,1.49,179,0.03,194,1.49,249,1.735,379,2.827,1040,1.662,1186,3.42,1187,5.743,1188,3.634,1189,2.807,1190,2.807,1191,3.634,1192,4.427,1193,3.634,1194,3.42,1195,3.42]],["title/miscellaneous/variables.html",[1040,1.228,1196,2.957]],["body/miscellaneous/variables.html",[7,0.217,15,1.002,16,0.371,17,0.042,19,0.753,21,0.918,24,1.134,25,1.134,26,1.134,27,1.134,28,1.134,35,1.052,36,1.474,42,0.981,43,0.439,46,1.299,48,1.02,51,1.918,53,0.029,62,1.134,69,2.26,71,1.134,72,1.134,83,1.169,85,1.02,88,1.66,91,1.169,93,1.637,94,0.827,95,1.788,96,0.931,97,1.442,98,0.918,99,2.378,101,1.304,103,2.254,111,1.788,113,1.982,115,1.603,116,1.134,119,1.603,120,1.506,121,1.169,122,2.074,129,1.551,179,0.029,191,0.945,192,1.6,194,2.022,202,1.673,217,1.829,218,2.586,226,2.586,231,1.442,232,1.829,238,2.852,246,1.525,248,0.744,249,1.02,290,2.586,305,1.02,315,2.324,317,2.136,319,1.6,321,2.136,329,2.254,429,2.136,438,3.02,455,2.586,468,2.003,532,2.136,545,2.262,626,2.262,632,1.829,695,2.262,696,2.586,729,1.6,743,1.829,812,2.136,872,2.136,993,2.136,994,3.44,996,3.02,998,3.02,1007,3.02,1008,3.02,1009,3.02,1011,3.504,1012,3.808,1013,3.02,1016,3.02,1017,3.02,1018,3.02,1019,3.02,1024,3.02,1025,3.02,1026,3.02,1027,3.02,1040,1.265,1043,3.02,1044,3.02,1068,2.136,1117,2.136,1188,2.136,1189,2.136,1190,2.136,1191,2.136,1193,2.136,1196,2.136,1197,4.268,1198,3.679,1199,5.562,1200,2.602,1201,2.602,1202,4.894,1203,3.679,1204,2.602,1205,2.602,1206,2.602,1207,4.639,1208,2.602,1209,2.602,1210,2.602,1211,2.602,1212,2.602,1213,2.602,1214,3.679,1215,2.602,1216,4.639,1217,3.679,1218,2.602,1219,2.602,1220,2.602,1221,4.268,1222,2.602,1223,2.602,1224,2.602,1225,2.602,1226,3.679,1227,3.679,1228,3.679,1229,3.679,1230,2.602,1231,2.602,1232,2.602,1233,2.602,1234,2.602,1235,2.602,1236,2.602,1237,2.602,1238,2.602,1239,2.602,1240,3.679,1241,2.602,1242,2.602,1243,3.679,1244,2.602,1245,2.602,1246,2.602,1247,2.602,1248,2.602,1249,2.602,1250,2.602,1251,2.602,1252,2.602,1253,2.602,1254,2.602,1255,2.602,1256,2.602,1257,2.602,1258,2.602,1259,2.602,1260,2.602,1261,2.602,1262,3.679,1263,2.602,1264,2.602,1265,2.602,1266,2.602,1267,2.602,1268,2.602,1269,2.602,1270,2.602,1271,2.602,1272,2.602]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":305,"title":{},"body":{"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["0/1",{"_index":997,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":1014,"title":{},"body":{"coverage.html":{}}}],["0/26",{"_index":1028,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1005,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1002,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1036,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1037,"title":{},"body":{"coverage.html":{}}}],["02",{"_index":922,"title":{},"body":{"changelog.html":{}}}],["029ad1fa",{"_index":976,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":944,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":953,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":914,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":917,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":396,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"index.html":{}}}],["1).fill(0",{"_index":798,"title":{},"body":{"classes/SearchEngine.html":{}}}],["1.0.0",{"_index":980,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":974,"title":{},"body":{"changelog.html":{}}}],["1.1.1",{"_index":971,"title":{},"body":{"changelog.html":{}}}],["1.1.2",{"_index":969,"title":{},"body":{"changelog.html":{}}}],["1.1.3",{"_index":957,"title":{},"body":{"changelog.html":{}}}],["1/1",{"_index":1010,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":894,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["100",{"_index":1003,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":700,"title":{},"body":{"classes/QueryCache.html":{},"index.html":{}}}],["11",{"_index":935,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["16",{"_index":918,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":908,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":899,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":923,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":755,"title":{},"body":{"classes/SearchEngine.html":{},"index.html":{}}}],["2.0.0",{"_index":952,"title":{},"body":{"changelog.html":{}}}],["2.0.1",{"_index":942,"title":{},"body":{"changelog.html":{}}}],["2.1.0",{"_index":938,"title":{},"body":{"changelog.html":{}}}],["2.1.1",{"_index":934,"title":{},"body":{"changelog.html":{}}}],["2.1.2",{"_index":920,"title":{},"body":{"changelog.html":{}}}],["2.2.0",{"_index":916,"title":{},"body":{"changelog.html":{}}}],["20",{"_index":895,"title":{},"body":{"changelog.html":{}}}],["2021",{"_index":943,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2022",{"_index":921,"title":{},"body":{"changelog.html":{}}}],["2024",{"_index":893,"title":{},"body":{"changelog.html":{}}}],["23/30",{"_index":1001,"title":{},"body":{"coverage.html":{}}}],["26",{"_index":981,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":975,"title":{},"body":{"changelog.html":{}}}],["276f3b47",{"_index":977,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":958,"title":{},"body":{"changelog.html":{}}}],["2886b372",{"_index":939,"title":{},"body":{"changelog.html":{}}}],["3.0.0",{"_index":915,"title":{},"body":{"changelog.html":{}}}],["3.1.0",{"_index":913,"title":{},"body":{"changelog.html":{}}}],["30",{"_index":954,"title":{},"body":{"changelog.html":{}}}],["36",{"_index":1257,"title":{},"body":{"miscellaneous/variables.html":{}}}],["39424c77",{"_index":990,"title":{},"body":{"changelog.html":{}}}],["4.0.0",{"_index":909,"title":{},"body":{"changelog.html":{}}}],["4.0.1",{"_index":902,"title":{},"body":{"changelog.html":{}}}],["4.0.2",{"_index":898,"title":{},"body":{"changelog.html":{}}}],["4.0.3",{"_index":897,"title":{},"body":{"changelog.html":{}}}],["4.0.4",{"_index":896,"title":{},"body":{"changelog.html":{}}}],["4.1.0",{"_index":892,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["4/4",{"_index":1004,"title":{},"body":{"coverage.html":{}}}],["4079a95a",{"_index":986,"title":{},"body":{"changelog.html":{}}}],["4173ee67",{"_index":948,"title":{},"body":{"changelog.html":{}}}],["42415f3b",{"_index":901,"title":{},"body":{"changelog.html":{}}}],["45",{"_index":1033,"title":{},"body":{"coverage.html":{}}}],["4642966f",{"_index":912,"title":{},"body":{"changelog.html":{}}}],["4[a",{"_index":1261,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4e9d1718",{"_index":937,"title":{},"body":{"changelog.html":{}}}],["4xxx",{"_index":1270,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":1164,"title":{},"body":{"overview.html":{}}}],["5/11",{"_index":1034,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":1006,"title":{},"body":{"coverage.html":{}}}],["5/9",{"_index":1032,"title":{},"body":{"coverage.html":{}}}],["55",{"_index":1031,"title":{},"body":{"coverage.html":{}}}],["5bfdc44a",{"_index":970,"title":{},"body":{"changelog.html":{}}}],["5d244251",{"_index":956,"title":{},"body":{"changelog.html":{}}}],["5eef46c0",{"_index":973,"title":{},"body":{"changelog.html":{}}}],["6/6",{"_index":1022,"title":{},"body":{"coverage.html":{}}}],["60000",{"_index":352,"title":{},"body":{"classes/LRUCache.html":{}}}],["69b61d8a",{"_index":941,"title":{},"body":{"changelog.html":{}}}],["6d760f53",{"_index":984,"title":{},"body":{"changelog.html":{}}}],["7/7",{"_index":1030,"title":{},"body":{"coverage.html":{}}}],["75a1f4f1",{"_index":936,"title":{},"body":{"changelog.html":{}}}],["75a86338",{"_index":951,"title":{},"body":{"changelog.html":{}}}],["76",{"_index":1000,"title":{},"body":{"coverage.html":{}}}],["76398cb0",{"_index":982,"title":{},"body":{"changelog.html":{}}}],["8/8",{"_index":1023,"title":{},"body":{"coverage.html":{}}}],["85fb8daf",{"_index":983,"title":{},"body":{"changelog.html":{}}}],["89ab][a",{"_index":1263,"title":{},"body":{"miscellaneous/variables.html":{}}}],["95dd6d1e",{"_index":966,"title":{},"body":{"changelog.html":{}}}],["999",{"_index":1093,"title":{},"body":{"index.html":{}}}],["9]{9}$/i",{"_index":1267,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9b8d080d",{"_index":968,"title":{},"body":{"changelog.html":{}}}],["_",{"_index":1074,"title":{},"body":{"index.html":{}}}],["__brand__",{"_index":44,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["a.score",{"_index":817,"title":{},"body":{"classes/SearchEngine.html":{}}}],["a[typedkey",{"_index":623,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["above",{"_index":1131,"title":{},"body":{"license.html":{}}}],["ac42869a",{"_index":929,"title":{},"body":{"changelog.html":{}}}],["accented",{"_index":770,"title":{},"body":{"classes/SearchEngine.html":{},"miscellaneous/functions.html":{}}}],["accents",{"_index":739,"title":{},"body":{"classes/SearchEngine.html":{},"miscellaneous/functions.html":{}}}],["access",{"_index":155,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["accessors",{"_index":345,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryBuilder.html":{}}}],["action",{"_index":1155,"title":{},"body":{"license.html":{}}}],["add",{"_index":240,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/Shard.html":{},"changelog.html":{},"index.html":{}}}],["adddocument",{"_index":265,"title":{},"body":{"classes/Indexing.html":{},"classes/Shard.html":{}}}],["adddocument(doc",{"_index":826,"title":{},"body":{"classes/Shard.html":{}}}],["adddocument(document",{"_index":279,"title":{},"body":{"classes/Indexing.html":{}}}],["adding",{"_index":237,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{}}}],["additional",{"_index":127,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["adds",{"_index":281,"title":{},"body":{"classes/Indexing.html":{},"classes/QueryCache.html":{}}}],["ae7913f1",{"_index":933,"title":{},"body":{"changelog.html":{}}}],["affecting",{"_index":132,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["against",{"_index":103,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/variables.html":{}}}],["age",{"_index":840,"title":{},"body":{"classes/Shard.html":{},"index.html":{}}}],["aliases",{"_index":1186,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":322,"title":{},"body":{"classes/Indexing.html":{},"classes/QueryCache.html":{},"index.html":{}}}],["allowing",{"_index":484,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["allows",{"_index":262,"title":{},"body":{"classes/Indexing.html":{}}}],["already",{"_index":632,"title":{},"body":{"classes/QueryBuilder.html":{},"classes/TransactionManager.html":{},"miscellaneous/variables.html":{}}}],["and/or",{"_index":118,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["any)[field",{"_index":314,"title":{},"body":{"classes/Indexing.html":{}}}],["api",{"_index":1057,"title":{},"body":{"index.html":{}}}],["applicable",{"_index":499,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["applied",{"_index":1225,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apply",{"_index":610,"title":{},"body":{"classes/QueryBuilder.html":{},"classes/SearchEngine.html":{},"classes/TransactionManager.html":{}}}],["args",{"_index":662,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["argument",{"_index":256,"title":{},"body":{"classes/IndexManager.html":{}}}],["arguments",{"_index":109,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["arising",{"_index":1158,"title":{},"body":{"license.html":{}}}],["array",{"_index":225,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"miscellaneous/functions.html":{}}}],["array(a.length",{"_index":797,"title":{},"body":{"classes/SearchEngine.html":{}}}],["array.from",{"_index":1072,"title":{},"body":{"index.html":{}}}],["array.from(this.cache.entries",{"_index":446,"title":{},"body":{"classes/LRUCache.html":{}}}],["array.from(this.cache.entries()).foreach(([key",{"_index":409,"title":{},"body":{"classes/LRUCache.html":{}}}],["array.from(this.db.values",{"_index":837,"title":{},"body":{"classes/Shard.html":{}}}],["array.isarray(sortconditions",{"_index":605,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["array.isarray(value",{"_index":1251,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arrays",{"_index":85,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["asc",{"_index":627,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["asserting",{"_index":1213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["associated",{"_index":124,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["async",{"_index":338,"title":{},"body":{"classes/LRUCache.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"index.html":{}}}],["author",{"_index":1182,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":1149,"title":{},"body":{"license.html":{}}}],["automatically",{"_index":1234,"title":{},"body":{"miscellaneous/variables.html":{}}}],["available",{"_index":878,"title":{},"body":{"classes/TransactionManager.html":{}}}],["avalue",{"_index":622,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["avoid",{"_index":438,"title":{},"body":{"classes/LRUCache.html":{},"miscellaneous/variables.html":{}}}],["await",{"_index":457,"title":{},"body":{"classes/LRUCache.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"index.html":{}}}],["b",{"_index":112,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryBuilder.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{}}}],["b.score",{"_index":816,"title":{},"body":{"classes/SearchEngine.html":{}}}],["b[typedkey",{"_index":625,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["backpressure",{"_index":1172,"title":{},"body":{"properties.html":{}}}],["base",{"_index":772,"title":{},"body":{"classes/SearchEngine.html":{},"miscellaneous/functions.html":{}}}],["based",{"_index":193,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/SearchEngine.html":{},"miscellaneous/functions.html":{}}}],["basescore",{"_index":1084,"title":{},"body":{"index.html":{}}}],["be1b5db1",{"_index":907,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":867,"title":{},"body":{"classes/TransactionManager.html":{}}}],["begins",{"_index":869,"title":{},"body":{"classes/TransactionManager.html":{}}}],["begintransaction",{"_index":852,"title":{},"body":{"classes/TransactionManager.html":{}}}],["behavior",{"_index":79,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryBuilder.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["being",{"_index":295,"title":{},"body":{"classes/Indexing.html":{}}}],["bonus",{"_index":1089,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":88,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["boot",{"_index":1069,"title":{},"body":{"index.html":{}}}],["both",{"_index":1222,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bug",{"_index":927,"title":{},"body":{"changelog.html":{}}}],["bugs",{"_index":985,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["builder",{"_index":1051,"title":{},"body":{"miscellaneous/functions.html":{}}}],["builder.exec",{"_index":667,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.exec().catch(onrejected",{"_index":666,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.then(...args",{"_index":665,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts",{"_index":547,"title":{},"body":{"classes/QueryBuilder.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["builder.ts:11",{"_index":568,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:111",{"_index":590,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:118",{"_index":575,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:124",{"_index":580,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:13",{"_index":572,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:130",{"_index":594,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:15",{"_index":571,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:17",{"_index":566,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:19",{"_index":564,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:37",{"_index":584,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:45",{"_index":588,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:5",{"_index":569,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:53",{"_index":586,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:58",{"_index":583,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:63",{"_index":578,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:7",{"_index":570,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:9",{"_index":567,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["bvalue",{"_index":624,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["c",{"_index":1100,"title":{},"body":{"license.html":{}}}],["c0bab78d",{"_index":963,"title":{},"body":{"changelog.html":{}}}],["c411d805",{"_index":947,"title":{},"body":{"changelog.html":{}}}],["cache",{"_index":329,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["cache.get(text",{"_index":788,"title":{},"body":{"classes/SearchEngine.html":{}}}],["cache.has(text",{"_index":785,"title":{},"body":{"classes/SearchEngine.html":{}}}],["cache.set(text",{"_index":787,"title":{},"body":{"classes/SearchEngine.html":{}}}],["cache.ts",{"_index":328,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryCache.html":{},"coverage.html":{}}}],["cache.ts:10",{"_index":359,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:102",{"_index":386,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:11",{"_index":673,"title":{},"body":{"classes/QueryCache.html":{}}}],["cache.ts:12",{"_index":355,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:136",{"_index":365,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:14",{"_index":360,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:140",{"_index":363,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:144",{"_index":391,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:148",{"_index":377,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:16",{"_index":356,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:160",{"_index":369,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:166",{"_index":384,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:171",{"_index":367,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:179",{"_index":393,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:18",{"_index":358,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:184",{"_index":395,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:189",{"_index":374,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:20",{"_index":353,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:23",{"_index":350,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:32",{"_index":677,"title":{},"body":{"classes/QueryCache.html":{}}}],["cache.ts:4",{"_index":351,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:45",{"_index":383,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:49",{"_index":694,"title":{},"body":{"classes/QueryCache.html":{}}}],["cache.ts:55",{"_index":380,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:57",{"_index":690,"title":{},"body":{"classes/QueryCache.html":{}}}],["cache.ts:6",{"_index":357,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryCache.html":{}}}],["cache.ts:60",{"_index":362,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:69",{"_index":683,"title":{},"body":{"classes/QueryCache.html":{}}}],["cache.ts:72",{"_index":388,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:78",{"_index":389,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:8",{"_index":361,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:84",{"_index":371,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:9",{"_index":676,"title":{},"body":{"classes/QueryCache.html":{}}}],["cached",{"_index":455,"title":{},"body":{"classes/LRUCache.html":{},"classes/SearchEngine.html":{},"miscellaneous/variables.html":{}}}],["cachehits",{"_index":669,"title":{},"body":{"classes/QueryCache.html":{}}}],["cachemisses",{"_index":670,"title":{},"body":{"classes/QueryCache.html":{}}}],["caching",{"_index":1077,"title":{},"body":{"index.html":{}}}],["callback",{"_index":464,"title":{},"body":{"classes/Mutex.html":{}}}],["caller",{"_index":478,"title":{},"body":{"classes/Mutex.html":{}}}],["capture",{"_index":472,"title":{},"body":{"classes/Mutex.html":{}}}],["case",{"_index":51,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/Indexing.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["cast",{"_index":316,"title":{},"body":{"classes/Indexing.html":{}}}],["catch",{"_index":556,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["catch(onrejected",{"_index":573,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["chain",{"_index":469,"title":{},"body":{"classes/Mutex.html":{}}}],["chaining",{"_index":650,"title":{},"body":{"classes/QueryBuilder.html":{},"classes/SearchEngine.html":{}}}],["changelog",{"_index":883,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":875,"title":{},"body":{"classes/TransactionManager.html":{},"changelog.html":{}}}],["characters",{"_index":768,"title":{},"body":{"classes/SearchEngine.html":{},"miscellaneous/functions.html":{}}}],["charge",{"_index":1108,"title":{},"body":{"license.html":{}}}],["check",{"_index":532,"title":{},"body":{"classes/PersistenceManager.html":{},"miscellaneous/variables.html":{}}}],["checks",{"_index":1253,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chores",{"_index":924,"title":{},"body":{"changelog.html":{}}}],["chunk",{"_index":1050,"title":{},"body":{"miscellaneous/functions.html":{}}}],["chunkarray",{"_index":1021,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["chunkarray(array",{"_index":1046,"title":{},"body":{"miscellaneous/functions.html":{}}}],["chunks",{"_index":1048,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ci",{"_index":962,"title":{},"body":{"changelog.html":{}}}],["claim",{"_index":1152,"title":{},"body":{"license.html":{}}}],["class",{"_index":180,"title":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"coverage.html":{}}}],["classes",{"_index":182,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"overview.html":{}}}],["cleans",{"_index":1235,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cleanup",{"_index":398,"title":{},"body":{"classes/LRUCache.html":{}}}],["cleanupexpiredentries",{"_index":334,"title":{},"body":{"classes/LRUCache.html":{}}}],["cleanupinterval",{"_index":330,"title":{},"body":{"classes/LRUCache.html":{}}}],["cleanuptimer",{"_index":331,"title":{},"body":{"classes/LRUCache.html":{}}}],["clear",{"_index":195,"title":{},"body":{"classes/IndexManager.html":{},"classes/LRUCache.html":{},"classes/PersistenceManager.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}}}],["cleared",{"_index":693,"title":{},"body":{"classes/QueryCache.html":{}}}],["clearinterval(this.cleanuptimer",{"_index":418,"title":{},"body":{"classes/LRUCache.html":{}}}],["clears",{"_index":211,"title":{},"body":{"classes/IndexManager.html":{},"classes/QueryCache.html":{}}}],["codes",{"_index":967,"title":{},"body":{"changelog.html":{}}}],["collection",{"_index":261,"title":{},"body":{"classes/Indexing.html":{}}}],["commit",{"_index":890,"title":{},"body":{"changelog.html":{}}}],["committing",{"_index":877,"title":{},"body":{"classes/TransactionManager.html":{}}}],["committransaction",{"_index":853,"title":{},"body":{"classes/TransactionManager.html":{}}}],["compare",{"_index":102,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["comparison",{"_index":97,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryBuilder.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["comparisonoperator",{"_index":23,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["comparisonresult",{"_index":615,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["comparisons",{"_index":106,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryBuilder.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["complete",{"_index":503,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["complex",{"_index":105,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["composed",{"_index":117,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["computations",{"_index":1227,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concurrent",{"_index":154,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["condition",{"_index":69,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/Indexing.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["condition.ts",{"_index":1008,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["conditionals",{"_index":441,"title":{},"body":{"classes/LRUCache.html":{}}}],["conditionnode",{"_index":120,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["conditions",{"_index":83,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"license.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["configure",{"_index":756,"title":{},"body":{"classes/SearchEngine.html":{}}}],["configuring",{"_index":143,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["connection",{"_index":1160,"title":{},"body":{"license.html":{}}}],["console.log(results.slice(0",{"_index":1094,"title":{},"body":{"index.html":{}}}],["const",{"_index":248,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":268,"title":{},"body":{"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"classes/TransactionManager.html":{}}}],["constructor(db",{"_index":490,"title":{},"body":{"classes/PersistenceManager.html":{},"classes/SearchEngine.html":{},"classes/TransactionManager.html":{}}}],["constructor(fields",{"_index":269,"title":{},"body":{"classes/Indexing.html":{}}}],["constructor(options",{"_index":349,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryCache.html":{}}}],["constructor(result",{"_index":563,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["constructs",{"_index":271,"title":{},"body":{"classes/Indexing.html":{}}}],["containing",{"_index":223,"title":{},"body":{"classes/IndexManager.html":{},"classes/QueryCache.html":{}}}],["contains",{"_index":1090,"title":{},"body":{"index.html":{}}}],["contents",{"_index":535,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["continuous",{"_index":903,"title":{},"body":{"changelog.html":{}}}],["contract",{"_index":1156,"title":{},"body":{"license.html":{}}}],["converts",{"_index":769,"title":{},"body":{"classes/SearchEngine.html":{},"miscellaneous/functions.html":{}}}],["copies",{"_index":1125,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1111,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1099,"title":{},"body":{"license.html":{}}}],["correct",{"_index":655,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["counts",{"_index":688,"title":{},"body":{"classes/QueryCache.html":{}}}],["coverage",{"_index":991,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":529,"title":{},"body":{"classes/PersistenceManager.html":{},"classes/QueryCache.html":{},"changelog.html":{},"index.html":{}}}],["createquerybuilderproxy",{"_index":1015,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createquerybuilderproxy(builder",{"_index":656,"title":{},"body":{"classes/QueryBuilder.html":{},"miscellaneous/functions.html":{}}}],["createquerybuilderproxy(result",{"_index":664,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["creates",{"_index":492,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["crud",{"_index":1056,"title":{},"body":{"index.html":{}}}],["current",{"_index":468,"title":{},"body":{"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/TransactionManager.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["currrow",{"_index":799,"title":{},"body":{"classes/SearchEngine.html":{}}}],["custom",{"_index":21,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["customcompare",{"_index":111,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/variables.html":{}}}],["customcompare(datum[field",{"_index":1200,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customscoringfn",{"_index":10,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"index.html":{}}}],["d687504c",{"_index":950,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":1153,"title":{},"body":{"license.html":{}}}],["data",{"_index":93,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["data.filter((datum",{"_index":1238,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data.find((datum",{"_index":1245,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data.json",{"_index":515,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["database",{"_index":220,"title":{},"body":{"classes/IndexManager.html":{},"classes/PersistenceManager.html":{},"classes/SearchEngine.html":{},"index.html":{},"properties.html":{}}}],["dataset",{"_index":1240,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":89,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["datum",{"_index":1199,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datum[field",{"_index":1202,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datumcache",{"_index":1207,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datumcache.get(node",{"_index":1211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datumcache.has(node",{"_index":1210,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datumcache.set(node",{"_index":1220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db",{"_index":214,"title":{},"body":{"classes/IndexManager.html":{},"classes/PersistenceManager.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}}}],["db.get(id",{"_index":254,"title":{},"body":{"classes/IndexManager.html":{}}}],["dbsnapshot",{"_index":850,"title":{},"body":{"classes/TransactionManager.html":{}}}],["dd121257",{"_index":946,"title":{},"body":{"changelog.html":{}}}],["de8a28fa",{"_index":919,"title":{},"body":{"changelog.html":{}}}],["deae21e0",{"_index":979,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":1114,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1161,"title":{},"body":{"license.html":{}}}],["decrease",{"_index":1085,"title":{},"body":{"index.html":{}}}],["default",{"_index":19,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":1079,"title":{},"body":{"index.html":{}}}],["defined",{"_index":203,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}}}],["defines",{"_index":45,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["delete",{"_index":335,"title":{},"body":{"classes/LRUCache.html":{}}}],["delete(key",{"_index":364,"title":{},"body":{"classes/LRUCache.html":{}}}],["deletebyid",{"_index":821,"title":{},"body":{"classes/Shard.html":{}}}],["deletebyid(id",{"_index":829,"title":{},"body":{"classes/Shard.html":{}}}],["deleteone",{"_index":978,"title":{},"body":{"changelog.html":{}}}],["deps",{"_index":925,"title":{},"body":{"changelog.html":{}}}],["description",{"_index":185,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"properties.html":{}}}],["deserialize",{"_index":336,"title":{},"body":{"classes/LRUCache.html":{}}}],["deserialize(serializedcache",{"_index":366,"title":{},"body":{"classes/LRUCache.html":{}}}],["desired",{"_index":41,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["determined",{"_index":637,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["determining",{"_index":631,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["diacritics",{"_index":771,"title":{},"body":{"classes/SearchEngine.html":{},"miscellaneous/functions.html":{}}}],["difference",{"_index":794,"title":{},"body":{"classes/SearchEngine.html":{}}}],["different",{"_index":641,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["dir",{"_index":518,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["directly",{"_index":1224,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disable",{"_index":401,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryBuilder.html":{}}}],["disk",{"_index":148,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["distance",{"_index":164,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"index.html":{}}}],["distribute",{"_index":1122,"title":{},"body":{"license.html":{}}}],["doc",{"_index":239,"title":{},"body":{"classes/IndexManager.html":{},"classes/Shard.html":{}}}],["docs",{"_index":905,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["document",{"_index":123,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["document's",{"_index":286,"title":{},"body":{"classes/Indexing.html":{}}}],["documentation",{"_index":900,"title":{},"body":{"changelog.html":{},"coverage.html":{},"license.html":{}}}],["documented",{"_index":886,"title":{},"body":{"changelog.html":{}}}],["documents",{"_index":134,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["documentwithid",{"_index":128,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"miscellaneous/typealiases.html":{}}}],["dot",{"_index":61,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["dpes",{"_index":945,"title":{},"body":{"changelog.html":{}}}],["e",{"_index":1102,"title":{},"body":{"license.html":{},"properties.html":{}}}],["e.g",{"_index":839,"title":{},"body":{"classes/Shard.html":{}}}],["e81eee88",{"_index":926,"title":{},"body":{"changelog.html":{}}}],["e9322431",{"_index":961,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":696,"title":{},"body":{"classes/QueryCache.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["early",{"_index":793,"title":{},"body":{"classes/SearchEngine.html":{}}}],["easy",{"_index":1055,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1243,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enable",{"_index":654,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["engine.ts",{"_index":707,"title":{},"body":{"classes/SearchEngine.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["engine.ts:106",{"_index":746,"title":{},"body":{"classes/SearchEngine.html":{}}}],["engine.ts:12",{"_index":716,"title":{},"body":{"classes/SearchEngine.html":{}}}],["engine.ts:14",{"_index":717,"title":{},"body":{"classes/SearchEngine.html":{}}}],["engine.ts:16",{"_index":718,"title":{},"body":{"classes/SearchEngine.html":{}}}],["engine.ts:18",{"_index":715,"title":{},"body":{"classes/SearchEngine.html":{}}}],["engine.ts:180",{"_index":731,"title":{},"body":{"classes/SearchEngine.html":{}}}],["engine.ts:31",{"_index":736,"title":{},"body":{"classes/SearchEngine.html":{}}}],["engine.ts:43",{"_index":762,"title":{},"body":{"classes/SearchEngine.html":{}}}],["engine.ts:62",{"_index":720,"title":{},"body":{"classes/SearchEngine.html":{}}}],["enhanced",{"_index":37,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["ensure",{"_index":620,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["ensures",{"_index":1232,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ensuring",{"_index":1206,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entire",{"_index":692,"title":{},"body":{"classes/QueryCache.html":{}}}],["entries",{"_index":337,"title":{},"body":{"classes/LRUCache.html":{},"classes/PersistenceManager.html":{}}}],["entries.foreach(([key",{"_index":452,"title":{},"body":{"classes/LRUCache.html":{},"classes/PersistenceManager.html":{}}}],["entry",{"_index":381,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryCache.html":{}}}],["entry.expiry",{"_index":406,"title":{},"body":{"classes/LRUCache.html":{}}}],["entry.value",{"_index":413,"title":{},"body":{"classes/LRUCache.html":{}}}],["environment",{"_index":965,"title":{},"body":{"changelog.html":{}}}],["eq",{"_index":24,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["equal",{"_index":1192,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["equality",{"_index":1189,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":310,"title":{},"body":{"classes/Indexing.html":{},"classes/PersistenceManager.html":{}}}],["error('no",{"_index":876,"title":{},"body":{"classes/TransactionManager.html":{}}}],["error('transaction",{"_index":863,"title":{},"body":{"classes/TransactionManager.html":{}}}],["error('unexpected",{"_index":325,"title":{},"body":{"classes/Indexing.html":{}}}],["eslint",{"_index":400,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryBuilder.html":{}}}],["etc",{"_index":758,"title":{},"body":{"classes/SearchEngine.html":{},"changelog.html":{}}}],["evaluate",{"_index":99,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/variables.html":{}}}],["evaluatecondition",{"_index":1009,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["evaluatecondition(datum",{"_index":1219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["evaluated",{"_index":1223,"title":{},"body":{"miscellaneous/variables.html":{}}}],["evaluatenode",{"_index":1012,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["evaluatenode(datum",{"_index":1216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["evaluates",{"_index":1203,"title":{},"body":{"miscellaneous/variables.html":{}}}],["evaluation",{"_index":1231,"title":{},"body":{"miscellaneous/variables.html":{}}}],["event",{"_index":1148,"title":{},"body":{"license.html":{}}}],["eviction",{"_index":675,"title":{},"body":{"classes/QueryCache.html":{}}}],["evictionstrategy",{"_index":166,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["example",{"_index":1060,"title":{},"body":{"index.html":{}}}],["exceeds",{"_index":795,"title":{},"body":{"classes/SearchEngine.html":{}}}],["excluding",{"_index":1255,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exclusion",{"_index":1195,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["exec",{"_index":557,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["existing",{"_index":236,"title":{},"body":{"classes/IndexManager.html":{}}}],["exists",{"_index":217,"title":{},"body":{"classes/IndexManager.html":{},"classes/PersistenceManager.html":{},"miscellaneous/variables.html":{}}}],["exit",{"_index":628,"title":{},"body":{"classes/QueryBuilder.html":{},"classes/SearchEngine.html":{}}}],["expanded",{"_index":766,"title":{},"body":{"classes/SearchEngine.html":{}}}],["expired",{"_index":682,"title":{},"body":{"classes/QueryCache.html":{}}}],["expiry",{"_index":442,"title":{},"body":{"classes/LRUCache.html":{}}}],["export",{"_index":22,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{}}}],["express",{"_index":1139,"title":{},"body":{"license.html":{}}}],["expression",{"_index":72,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["extended",{"_index":125,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["extends",{"_index":178,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["ezzat.vercel.app",{"_index":1184,"title":{},"body":{"properties.html":{}}}],["f\\d]{12",{"_index":1264,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f\\d]{3",{"_index":1262,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f\\d]{4",{"_index":1260,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f\\d]{8",{"_index":1259,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fahmy",{"_index":1103,"title":{},"body":{"license.html":{},"properties.html":{}}}],["false",{"_index":405,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryBuilder.html":{},"index.html":{}}}],["features",{"_index":910,"title":{},"body":{"changelog.html":{}}}],["fetch",{"_index":219,"title":{},"body":{"classes/IndexManager.html":{}}}],["fetchfn",{"_index":373,"title":{},"body":{"classes/LRUCache.html":{}}}],["field",{"_index":94,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/variables.html":{}}}],["fields",{"_index":160,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{}}}],["fields.foreach((field",{"_index":800,"title":{},"body":{"classes/SearchEngine.html":{}}}],["fieldtoken",{"_index":163,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"index.html":{}}}],["fieldtoken.includes(token",{"_index":1088,"title":{},"body":{"index.html":{}}}],["fieldtokens",{"_index":805,"title":{},"body":{"classes/SearchEngine.html":{}}}],["fieldtokens.foreach((fieldtoken",{"_index":809,"title":{},"body":{"classes/SearchEngine.html":{}}}],["fieldvalue",{"_index":801,"title":{},"body":{"classes/SearchEngine.html":{}}}],["fieldweight",{"_index":165,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"index.html":{}}}],["fieldweights",{"_index":11,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["fieldweights[field",{"_index":807,"title":{},"body":{"classes/SearchEngine.html":{}}}],["fifo",{"_index":168,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"changelog.html":{},"coverage.html":{}}}],["filepath",{"_index":487,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["files",{"_index":1113,"title":{},"body":{"license.html":{}}}],["filter",{"_index":447,"title":{},"body":{"classes/LRUCache.html":{}}}],["filtering",{"_index":92,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["filters",{"_index":1239,"title":{},"body":{"miscellaneous/variables.html":{}}}],["finally",{"_index":558,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["finally(onfinally",{"_index":579,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["find",{"_index":1241,"title":{},"body":{"miscellaneous/variables.html":{}}}],["finds",{"_index":1246,"title":{},"body":{"miscellaneous/variables.html":{}}}],["finish",{"_index":475,"title":{},"body":{"classes/Mutex.html":{}}}],["first",{"_index":429,"title":{},"body":{"classes/LRUCache.html":{},"miscellaneous/variables.html":{}}}],["fitness",{"_index":1144,"title":{},"body":{"license.html":{}}}],["fixes",{"_index":928,"title":{},"body":{"changelog.html":{}}}],["flag",{"_index":136,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["flags",{"_index":75,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["following",{"_index":1130,"title":{},"body":{"license.html":{}}}],["form",{"_index":773,"title":{},"body":{"classes/SearchEngine.html":{},"miscellaneous/functions.html":{}}}],["formed",{"_index":207,"title":{},"body":{"classes/IndexManager.html":{}}}],["found",{"_index":232,"title":{},"body":{"classes/IndexManager.html":{},"classes/QueryCache.html":{},"miscellaneous/variables.html":{}}}],["free",{"_index":1107,"title":{},"body":{"license.html":{}}}],["fs",{"_index":508,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["fs.createwritestream(this.filepath",{"_index":523,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["fs.existssync(this.filepath",{"_index":530,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["fspromises",{"_index":510,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["fspromises.access(this.filepath",{"_index":533,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["fspromises.mkdir(dir",{"_index":520,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["fspromises.readfile(this.filepath",{"_index":536,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["fspromises.writefile(this.filepath",{"_index":531,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["full",{"_index":726,"title":{},"body":{"classes/SearchEngine.html":{}}}],["function",{"_index":15,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/QueryBuilder.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["functionalities",{"_index":189,"title":{},"body":{"classes/IndexManager.html":{}}}],["functionality",{"_index":260,"title":{},"body":{"classes/Indexing.html":{}}}],["functions",{"_index":1041,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1128,"title":{},"body":{"license.html":{}}}],["further",{"_index":635,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["fuzzy",{"_index":749,"title":{},"body":{"classes/SearchEngine.html":{},"index.html":{}}}],["fuzzysearchoptions",{"_index":1,"title":{"interfaces/FuzzySearchOptions.html":{}},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"coverage.html":{},"index.html":{}}}],["g",{"_index":54,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["generate",{"_index":285,"title":{},"body":{"classes/Indexing.html":{},"classes/SearchEngine.html":{}}}],["generated",{"_index":276,"title":{},"body":{"classes/Indexing.html":{}}}],["generates",{"_index":284,"title":{},"body":{"classes/Indexing.html":{},"miscellaneous/functions.html":{}}}],["generic",{"_index":779,"title":{},"body":{"classes/SearchEngine.html":{}}}],["get(key",{"_index":370,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryCache.html":{}}}],["get(target",{"_index":658,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["getasync",{"_index":339,"title":{},"body":{"classes/LRUCache.html":{}}}],["getasync(key",{"_index":372,"title":{},"body":{"classes/LRUCache.html":{}}}],["getbyid",{"_index":822,"title":{},"body":{"classes/Shard.html":{}}}],["getbyid(id",{"_index":831,"title":{},"body":{"classes/Shard.html":{}}}],["getcurrentdb",{"_index":854,"title":{},"body":{"classes/TransactionManager.html":{}}}],["getdocuments",{"_index":823,"title":{},"body":{"classes/Shard.html":{}}}],["getfromindex",{"_index":199,"title":{},"body":{"classes/IndexManager.html":{}}}],["getfromindex(query",{"_index":213,"title":{},"body":{"classes/IndexManager.html":{}}}],["gethitrate",{"_index":392,"title":{},"body":{"classes/LRUCache.html":{}}}],["getindex",{"_index":200,"title":{},"body":{"classes/IndexManager.html":{}}}],["getindex(fields",{"_index":227,"title":{},"body":{"classes/IndexManager.html":{}}}],["getkey",{"_index":266,"title":{},"body":{"classes/Indexing.html":{}}}],["getkey(document",{"_index":282,"title":{},"body":{"classes/Indexing.html":{}}}],["getmany",{"_index":1017,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getmissrate",{"_index":394,"title":{},"body":{"classes/LRUCache.html":{}}}],["getone",{"_index":1019,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["gets",{"_index":479,"title":{},"body":{"classes/Mutex.html":{}}}],["getsize",{"_index":390,"title":{},"body":{"classes/LRUCache.html":{}}}],["getstats",{"_index":671,"title":{},"body":{"classes/QueryCache.html":{}}}],["getting",{"_index":881,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["gh",{"_index":931,"title":{},"body":{"changelog.html":{}}}],["git+https://github.com/miladezzat/memoz.git",{"_index":1181,"title":{},"body":{"properties.html":{}}}],["given",{"_index":290,"title":{},"body":{"classes/Indexing.html":{},"classes/QueryCache.html":{},"miscellaneous/variables.html":{}}}],["global",{"_index":55,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["grams",{"_index":757,"title":{},"body":{"classes/SearchEngine.html":{}}}],["granted",{"_index":1106,"title":{},"body":{"license.html":{}}}],["greater",{"_index":1191,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["gt",{"_index":26,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["gte",{"_index":27,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["guidelines",{"_index":891,"title":{},"body":{"changelog.html":{}}}],["handle",{"_index":321,"title":{},"body":{"classes/Indexing.html":{},"miscellaneous/variables.html":{}}}],["has(key",{"_index":376,"title":{},"body":{"classes/LRUCache.html":{}}}],["hash",{"_index":1176,"title":{},"body":{"properties.html":{}}}],["hereby",{"_index":1105,"title":{},"body":{"license.html":{}}}],["highest",{"_index":813,"title":{},"body":{"classes/SearchEngine.html":{}}}],["hit",{"_index":686,"title":{},"body":{"classes/QueryCache.html":{}}}],["hit/miss",{"_index":684,"title":{},"body":{"classes/QueryCache.html":{}}}],["hitcount",{"_index":332,"title":{},"body":{"classes/LRUCache.html":{}}}],["hitrate",{"_index":347,"title":{},"body":{"classes/LRUCache.html":{}}}],["hits",{"_index":680,"title":{},"body":{"classes/QueryCache.html":{}}}],["hold",{"_index":873,"title":{},"body":{"classes/TransactionManager.html":{}}}],["holders",{"_index":1150,"title":{},"body":{"license.html":{}}}],["holds",{"_index":496,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["homepage",{"_index":1177,"title":{},"body":{"properties.html":{}}}],["https://github.com/miladezzat/memoz/issues",{"_index":1179,"title":{},"body":{"properties.html":{}}}],["https://memoz.js.org",{"_index":1178,"title":{},"body":{"properties.html":{}}}],["https://milad",{"_index":1183,"title":{},"body":{"properties.html":{}}}],["husky",{"_index":960,"title":{},"body":{"changelog.html":{}}}],["id",{"_index":126,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/Indexing.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["id.ts",{"_index":994,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":34,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["identify",{"_index":230,"title":{},"body":{"classes/IndexManager.html":{}}}],["ids",{"_index":278,"title":{},"body":{"classes/Indexing.html":{},"classes/PersistenceManager.html":{}}}],["implementation",{"_index":723,"title":{},"body":{"classes/SearchEngine.html":{}}}],["implements",{"_index":548,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["implied",{"_index":1140,"title":{},"body":{"license.html":{}}}],["import",{"_index":241,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"index.html":{}}}],["improve",{"_index":1249,"title":{},"body":{"miscellaneous/variables.html":{}}}],["include",{"_index":50,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["included",{"_index":1134,"title":{},"body":{"license.html":{}}}],["includes",{"_index":73,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["including",{"_index":1117,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["inclusion",{"_index":1194,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["inclusion/exclusion",{"_index":1205,"title":{},"body":{"miscellaneous/variables.html":{}}}],["increases",{"_index":1086,"title":{},"body":{"index.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index.adddocument(doc",{"_index":245,"title":{},"body":{"classes/IndexManager.html":{}}}],["index.query(query",{"_index":252,"title":{},"body":{"classes/IndexManager.html":{}}}],["indexed",{"_index":296,"title":{},"body":{"classes/Indexing.html":{}}}],["indexedids",{"_index":251,"title":{},"body":{"classes/IndexManager.html":{}}}],["indexedids.foreach((id",{"_index":253,"title":{},"body":{"classes/IndexManager.html":{}}}],["indexes",{"_index":190,"title":{},"body":{"classes/IndexManager.html":{}}}],["indexing",{"_index":187,"title":{"classes/Indexing.html":{}},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"coverage.html":{}}}],["indexmanager",{"_index":181,"title":{"classes/IndexManager.html":{}},"body":{"classes/IndexManager.html":{},"coverage.html":{}}}],["indicates",{"_index":140,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["indicating",{"_index":150,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["inequality",{"_index":1190,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{}}}],["initial",{"_index":493,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["initialize",{"_index":872,"title":{},"body":{"classes/TransactionManager.html":{},"miscellaneous/variables.html":{}}}],["initializes",{"_index":674,"title":{},"body":{"classes/QueryCache.html":{}}}],["inner",{"_index":629,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["input",{"_index":311,"title":{},"body":{"classes/Indexing.html":{},"classes/SearchEngine.html":{}}}],["insensitive",{"_index":52,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["installation",{"_index":1058,"title":{},"body":{"index.html":{}}}],["instance",{"_index":272,"title":{},"body":{"classes/Indexing.html":{},"classes/PersistenceManager.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{}}}],["instanceof",{"_index":595,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["instead",{"_index":725,"title":{},"body":{"classes/SearchEngine.html":{}}}],["integration",{"_index":904,"title":{},"body":{"changelog.html":{}}}],["interface",{"_index":0,"title":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"coverage.html":{},"index.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"overview.html":{}}}],["interval",{"_index":399,"title":{},"body":{"classes/LRUCache.html":{}}}],["invalidate",{"_index":672,"title":{},"body":{"classes/QueryCache.html":{}}}],["invalidate(key",{"_index":689,"title":{},"body":{"classes/QueryCache.html":{}}}],["invalidates",{"_index":691,"title":{},"body":{"classes/QueryCache.html":{}}}],["isexpired",{"_index":340,"title":{},"body":{"classes/LRUCache.html":{}}}],["isexpired(entry",{"_index":378,"title":{},"body":{"classes/LRUCache.html":{}}}],["isobject",{"_index":1026,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isresolved",{"_index":550,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["isvalidmemozid",{"_index":1027,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["it's",{"_index":601,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["item",{"_index":812,"title":{},"body":{"classes/SearchEngine.html":{},"miscellaneous/variables.html":{}}}],["item[field",{"_index":802,"title":{},"body":{"classes/SearchEngine.html":{}}}],["items",{"_index":1242,"title":{},"body":{"miscellaneous/variables.html":{}}}],["iterate",{"_index":1080,"title":{},"body":{"index.html":{}}}],["iuser",{"_index":1064,"title":{},"body":{"index.html":{}}}],["join('_",{"_index":318,"title":{},"body":{"classes/Indexing.html":{}}}],["joining",{"_index":208,"title":{},"body":{"classes/IndexManager.html":{}}}],["js",{"_index":949,"title":{},"body":{"changelog.html":{}}}],["json",{"_index":507,"title":{},"body":{"classes/PersistenceManager.html":{},"changelog.html":{}}}],["json.parse(data",{"_index":538,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["json.parse(serializedcache",{"_index":451,"title":{},"body":{"classes/LRUCache.html":{}}}],["json.stringify(entries",{"_index":450,"title":{},"body":{"classes/LRUCache.html":{}}}],["json.stringify(paginatedresult",{"_index":643,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["json.stringify(this.result",{"_index":642,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["k",{"_index":173,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["key",{"_index":158,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"properties.html":{}}}],["keyof",{"_index":100,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/Indexing.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryBuilder.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{}}}],["keys",{"_index":274,"title":{},"body":{"classes/Indexing.html":{},"classes/QueryCache.html":{}}}],["keywords",{"_index":1166,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":1138,"title":{},"body":{"license.html":{}}}],["length",{"_index":1073,"title":{},"body":{"index.html":{}}}],["less",{"_index":1193,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["levenshtein",{"_index":722,"title":{},"body":{"classes/SearchEngine.html":{}}}],["levenshteincache",{"_index":708,"title":{},"body":{"classes/SearchEngine.html":{}}}],["levenshteindistance",{"_index":711,"title":{},"body":{"classes/SearchEngine.html":{}}}],["levenshteindistance(a",{"_index":719,"title":{},"body":{"classes/SearchEngine.html":{}}}],["leveraging",{"_index":1244,"title":{},"body":{"miscellaneous/variables.html":{}}}],["liability",{"_index":1154,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1151,"title":{},"body":{"license.html":{}}}],["license",{"_index":1097,"title":{"license.html":{}},"body":{"license.html":{}}}],["limit",{"_index":559,"title":{},"body":{"classes/QueryBuilder.html":{},"classes/SearchEngine.html":{}}}],["limit(limit",{"_index":730,"title":{},"body":{"classes/SearchEngine.html":{}}}],["limit(limitcount",{"_index":582,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["limitation",{"_index":1118,"title":{},"body":{"license.html":{}}}],["limitcount",{"_index":551,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["limited",{"_index":1141,"title":{},"body":{"license.html":{}}}],["line",{"_index":403,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryBuilder.html":{}}}],["list",{"_index":678,"title":{},"body":{"classes/QueryCache.html":{},"properties.html":{}}}],["literal",{"_index":379,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":534,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["loadfromdisk",{"_index":488,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["loading",{"_index":486,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["loads",{"_index":501,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["location",{"_index":1066,"title":{},"body":{"index.html":{}}}],["lock",{"_index":459,"title":{},"body":{"classes/Mutex.html":{}}}],["lock(callback",{"_index":462,"title":{},"body":{"classes/Mutex.html":{}}}],["locking",{"_index":465,"title":{},"body":{"classes/Mutex.html":{}}}],["logic",{"_index":119,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["logical",{"_index":115,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["longer",{"_index":1237,"title":{},"body":{"miscellaneous/variables.html":{}}}],["loop",{"_index":630,"title":{},"body":{"classes/QueryBuilder.html":{},"index.html":{}}}],["lowercasing",{"_index":738,"title":{},"body":{"classes/SearchEngine.html":{}}}],["lru",{"_index":167,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["lrucache",{"_index":326,"title":{"classes/LRUCache.html":{}},"body":{"classes/LRUCache.html":{},"classes/QueryCache.html":{},"coverage.html":{}}}],["lrucacheoptions",{"_index":169,"title":{"interfaces/LRUCacheOptions.html":{}},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"coverage.html":{}}}],["lt",{"_index":28,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["lte",{"_index":29,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["m",{"_index":57,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["made",{"_index":633,"title":{},"body":{"classes/QueryBuilder.html":{},"classes/TransactionManager.html":{}}}],["main",{"_index":747,"title":{},"body":{"classes/SearchEngine.html":{},"classes/TransactionManager.html":{}}}],["manage",{"_index":482,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["managed",{"_index":212,"title":{},"body":{"classes/IndexManager.html":{}}}],["manager.ts",{"_index":184,"title":{},"body":{"classes/IndexManager.html":{},"classes/PersistenceManager.html":{},"classes/TransactionManager.html":{},"coverage.html":{}}}],["manager.ts:14",{"_index":859,"title":{},"body":{"classes/TransactionManager.html":{}}}],["manager.ts:17",{"_index":204,"title":{},"body":{"classes/IndexManager.html":{}}}],["manager.ts:19",{"_index":495,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["manager.ts:24",{"_index":234,"title":{},"body":{"classes/IndexManager.html":{},"classes/TransactionManager.html":{}}}],["manager.ts:27",{"_index":497,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["manager.ts:34",{"_index":861,"title":{},"body":{"classes/TransactionManager.html":{}}}],["manager.ts:35",{"_index":491,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["manager.ts:36",{"_index":228,"title":{},"body":{"classes/IndexManager.html":{}}}],["manager.ts:4",{"_index":857,"title":{},"body":{"classes/TransactionManager.html":{}}}],["manager.ts:47",{"_index":860,"title":{},"body":{"classes/TransactionManager.html":{}}}],["manager.ts:48",{"_index":215,"title":{},"body":{"classes/IndexManager.html":{}}}],["manager.ts:57",{"_index":504,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["manager.ts:6",{"_index":858,"title":{},"body":{"classes/TransactionManager.html":{}}}],["manager.ts:66",{"_index":210,"title":{},"body":{"classes/IndexManager.html":{}}}],["manager.ts:76",{"_index":500,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["manager.ts:8",{"_index":856,"title":{},"body":{"classes/TransactionManager.html":{}}}],["manages",{"_index":186,"title":{},"body":{"classes/IndexManager.html":{}}}],["many",{"_index":546,"title":{},"body":{"classes/QueryBuilder.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["many.ts",{"_index":1016,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["map",{"_index":202,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/PersistenceManager.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"miscellaneous/variables.html":{}}}],["map(([key",{"_index":448,"title":{},"body":{"classes/LRUCache.html":{}}}],["map((field",{"_index":312,"title":{},"body":{"classes/Indexing.html":{}}}],["map(this.db",{"_index":871,"title":{},"body":{"classes/TransactionManager.html":{}}}],["maps",{"_index":1230,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mark",{"_index":649,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["match",{"_index":226,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"miscellaneous/variables.html":{}}}],["matches",{"_index":62,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matching",{"_index":53,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matrix",{"_index":727,"title":{},"body":{"classes/SearchEngine.html":{}}}],["max",{"_index":734,"title":{},"body":{"classes/SearchEngine.html":{}}}],["maxdistance",{"_index":12,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"index.html":{}}}],["maximum",{"_index":733,"title":{},"body":{"classes/SearchEngine.html":{}}}],["maxsize",{"_index":170,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["mechanism",{"_index":466,"title":{},"body":{"classes/Mutex.html":{}}}],["memocache",{"_index":1013,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["memocache.get(datum",{"_index":1208,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memocache.set(datum",{"_index":1209,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memoization",{"_index":1221,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memory",{"_index":729,"title":{},"body":{"classes/SearchEngine.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["memoz",{"_index":35,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["memoz.createmany(docs",{"_index":1075,"title":{},"body":{"index.html":{}}}],["memoz.fuzzysearch('user",{"_index":1092,"title":{},"body":{"index.html":{}}}],["memoz_id_pattern",{"_index":996,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["memoz_id_pattern.test(memozid",{"_index":1258,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memoz_id_template",{"_index":998,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["memozid",{"_index":42,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["memozid.length",{"_index":1256,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memozoptions",{"_index":145,"title":{"interfaces/MemozOptions.html":{}},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"coverage.html":{}}}],["memozusage",{"_index":1063,"title":{},"body":{"index.html":{}}}],["merchantability",{"_index":1143,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1120,"title":{},"body":{"license.html":{}}}],["method",{"_index":955,"title":{},"body":{"changelog.html":{}}}],["methods",{"_index":197,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"changelog.html":{}}}],["metrics",{"_index":699,"title":{},"body":{"classes/QueryCache.html":{}}}],["milad",{"_index":1101,"title":{},"body":{"license.html":{},"properties.html":{}}}],["miladezzat/memoz",{"_index":930,"title":{},"body":{"changelog.html":{}}}],["minute",{"_index":397,"title":{},"body":{"classes/LRUCache.html":{}}}],["miscellaneous",{"_index":1040,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["miss",{"_index":687,"title":{},"body":{"classes/QueryCache.html":{}}}],["misscount",{"_index":333,"title":{},"body":{"classes/LRUCache.html":{}}}],["misses",{"_index":681,"title":{},"body":{"classes/QueryCache.html":{}}}],["missrate",{"_index":348,"title":{},"body":{"classes/LRUCache.html":{}}}],["mit",{"_index":1098,"title":{},"body":{"license.html":{}}}],["mode",{"_index":59,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["model",{"_index":1165,"title":{},"body":{"properties.html":{}}}],["modify",{"_index":78,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"license.html":{}}}],["modules",{"_index":1162,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":104,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["multiline",{"_index":58,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["multiple",{"_index":133,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["mutex",{"_index":153,"title":{"classes/Mutex.html":{}},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"coverage.html":{},"index.html":{}}}],["n",{"_index":142,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{}}}],["name",{"_index":222,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["names",{"_index":206,"title":{},"body":{"classes/IndexManager.html":{}}}],["needed",{"_index":612,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["neq",{"_index":25,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["nested",{"_index":439,"title":{},"body":{"classes/LRUCache.html":{}}}],["never",{"_index":645,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["new",{"_index":191,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newline",{"_index":63,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["next",{"_index":402,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryBuilder.html":{}}}],["ngrams",{"_index":792,"title":{},"body":{"classes/SearchEngine.html":{}}}],["ngramsize",{"_index":13,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{}}}],["nin",{"_index":30,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["node",{"_index":113,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/Indexing.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["node.$and.every((subnode",{"_index":1215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["node.$or.some((subnode",{"_index":1218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["node.ts",{"_index":1011,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["nodejs",{"_index":1170,"title":{},"body":{"properties.html":{}}}],["nodejs.timeout",{"_index":354,"title":{},"body":{"classes/LRUCache.html":{}}}],["nodes",{"_index":116,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["non",{"_index":1254,"title":{},"body":{"miscellaneous/variables.html":{}}}],["noninfringement",{"_index":1147,"title":{},"body":{"license.html":{}}}],["normalization",{"_index":777,"title":{},"body":{"classes/SearchEngine.html":{}}}],["normalizationcache",{"_index":709,"title":{},"body":{"classes/SearchEngine.html":{}}}],["normalize",{"_index":737,"title":{},"body":{"classes/SearchEngine.html":{}}}],["normalized",{"_index":780,"title":{},"body":{"classes/SearchEngine.html":{}}}],["normalizedfieldvalue",{"_index":803,"title":{},"body":{"classes/SearchEngine.html":{}}}],["normalizewithcache",{"_index":713,"title":{},"body":{"classes/SearchEngine.html":{}}}],["normalizewithcache(text",{"_index":735,"title":{},"body":{"classes/SearchEngine.html":{}}}],["notable",{"_index":884,"title":{},"body":{"changelog.html":{}}}],["notice",{"_index":1132,"title":{},"body":{"license.html":{}}}],["now",{"_index":407,"title":{},"body":{"classes/LRUCache.html":{}}}],["npm",{"_index":1061,"title":{},"body":{"index.html":{}}}],["null",{"_index":626,"title":{},"body":{"classes/QueryBuilder.html":{},"classes/SearchEngine.html":{},"classes/TransactionManager.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":18,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["number.max_safe_integer",{"_index":565,"title":{},"body":{"classes/QueryBuilder.html":{},"classes/SearchEngine.html":{}}}],["object",{"_index":36,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["object.entries(sortobj).foreach(([key",{"_index":617,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["object.ts",{"_index":1025,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["objects",{"_index":86,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["obtaining",{"_index":1110,"title":{},"body":{"license.html":{}}}],["offering",{"_index":1054,"title":{},"body":{"index.html":{}}}],["oldest",{"_index":431,"title":{},"body":{"classes/LRUCache.html":{}}}],["oldestentry",{"_index":433,"title":{},"body":{"classes/LRUCache.html":{}}}],["oldestentry.value",{"_index":437,"title":{},"body":{"classes/LRUCache.html":{}}}],["oldestkey",{"_index":427,"title":{},"body":{"classes/LRUCache.html":{}}}],["one",{"_index":122,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/variables.html":{}}}],["one.ts",{"_index":1018,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["onevict",{"_index":172,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["onfinally",{"_index":581,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["onfulfilled",{"_index":593,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["onrejected",{"_index":577,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["operation",{"_index":131,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["operations",{"_index":48,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["operator",{"_index":95,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/variables.html":{}}}],["operators",{"_index":1188,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["optimized",{"_index":721,"title":{},"body":{"classes/SearchEngine.html":{}}}],["optional",{"_index":9,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["optionally",{"_index":320,"title":{},"body":{"classes/Indexing.html":{}}}],["options",{"_index":47,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["order",{"_index":618,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["original",{"_index":540,"title":{},"body":{"classes/PersistenceManager.html":{},"classes/TransactionManager.html":{}}}],["otherwise",{"_index":602,"title":{},"body":{"classes/QueryBuilder.html":{},"license.html":{}}}],["out",{"_index":1159,"title":{},"body":{"license.html":{}}}],["outer",{"_index":636,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["over",{"_index":1081,"title":{},"body":{"index.html":{}}}],["overriding",{"_index":698,"title":{},"body":{"classes/QueryCache.html":{}}}],["overview",{"_index":1163,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":959,"title":{"properties.html":{}},"body":{"changelog.html":{}}}],["page",{"_index":1083,"title":{},"body":{"index.html":{}}}],["pages",{"_index":932,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["paginatedresult",{"_index":639,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["pagination",{"_index":638,"title":{},"body":{"classes/QueryBuilder.html":{},"index.html":{}}}],["param",{"_index":243,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/PersistenceManager.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{}}}],["parameters",{"_index":221,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"miscellaneous/functions.html":{}}}],["parsing",{"_index":527,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["partial",{"_index":323,"title":{},"body":{"classes/Indexing.html":{}}}],["particular",{"_index":1145,"title":{},"body":{"license.html":{}}}],["partition",{"_index":838,"title":{},"body":{"classes/Shard.html":{}}}],["partitiondocumentsby",{"_index":824,"title":{},"body":{"classes/Shard.html":{}}}],["partitiondocumentsby(field",{"_index":834,"title":{},"body":{"classes/Shard.html":{}}}],["partitions",{"_index":841,"title":{},"body":{"classes/Shard.html":{}}}],["partitions[key",{"_index":844,"title":{},"body":{"classes/Shard.html":{}}}],["partitions[key].push(doc",{"_index":845,"title":{},"body":{"classes/Shard.html":{}}}],["pass",{"_index":1214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passed",{"_index":255,"title":{},"body":{"classes/IndexManager.html":{}}}],["path",{"_index":146,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["path.dirname(this.filepath",{"_index":519,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["path.resolve(filepath",{"_index":514,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["pattern",{"_index":74,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["per",{"_index":704,"title":{},"body":{"classes/QueryCache.html":{},"index.html":{}}}],["perform",{"_index":1091,"title":{},"body":{"index.html":{}}}],["performance",{"_index":743,"title":{},"body":{"classes/SearchEngine.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["performance.now",{"_index":408,"title":{},"body":{"classes/LRUCache.html":{}}}],["performs",{"_index":748,"title":{},"body":{"classes/SearchEngine.html":{}}}],["permission",{"_index":1104,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1126,"title":{},"body":{"license.html":{}}}],["persist",{"_index":151,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"index.html":{},"properties.html":{}}}],["persisted",{"_index":498,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["persistence",{"_index":483,"title":{},"body":{"classes/PersistenceManager.html":{},"index.html":{}}}],["persistencemanager",{"_index":480,"title":{"classes/PersistenceManager.html":{}},"body":{"classes/PersistenceManager.html":{},"coverage.html":{}}}],["persists",{"_index":1053,"title":{},"body":{"index.html":{},"properties.html":{}}}],["persisttodisk",{"_index":152,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"index.html":{}}}],["person",{"_index":1109,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1127,"title":{},"body":{"license.html":{}}}],["pipeline",{"_index":906,"title":{},"body":{"changelog.html":{}}}],["pipelining",{"_index":1168,"title":{},"body":{"properties.html":{}}}],["populate",{"_index":543,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["portions",{"_index":1136,"title":{},"body":{"license.html":{}}}],["presist",{"_index":911,"title":{},"body":{"changelog.html":{}}}],["prevrow",{"_index":796,"title":{},"body":{"classes/SearchEngine.html":{}}}],["primitive",{"_index":84,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["private",{"_index":196,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}}}],["process",{"_index":1096,"title":{},"body":{"index.html":{}}}],["progress",{"_index":864,"title":{},"body":{"classes/TransactionManager.html":{}}}],["project",{"_index":885,"title":{},"body":{"changelog.html":{}}}],["promise",{"_index":375,"title":{},"body":{"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{}}}],["promise.resolve",{"_index":460,"title":{},"body":{"classes/Mutex.html":{}}}],["promiselike",{"_index":549,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["promises",{"_index":509,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["prop",{"_index":659,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["property",{"_index":317,"title":{},"body":{"classes/Indexing.html":{},"miscellaneous/variables.html":{}}}],["provide",{"_index":528,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["provided",{"_index":238,"title":{},"body":{"classes/IndexManager.html":{},"classes/QueryCache.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["provides",{"_index":188,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{}}}],["proxy",{"_index":653,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["proxy(builder",{"_index":657,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["public",{"_index":198,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}}}],["publish",{"_index":1121,"title":{},"body":{"license.html":{}}}],["pubsub",{"_index":1171,"title":{},"body":{"properties.html":{}}}],["punctuation",{"_index":742,"title":{},"body":{"classes/SearchEngine.html":{}}}],["purpose",{"_index":1146,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":651,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["queries",{"_index":289,"title":{},"body":{"classes/Indexing.html":{}}}],["query",{"_index":194,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/QueryBuilder.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["query(query",{"_index":287,"title":{},"body":{"classes/Indexing.html":{}}}],["querybuilder",{"_index":544,"title":{"classes/QueryBuilder.html":{}},"body":{"classes/QueryBuilder.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["querycache",{"_index":552,"title":{"classes/QueryCache.html":{}},"body":{"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"coverage.html":{}}}],["querycacheoptions",{"_index":177,"title":{"interfaces/QueryCacheOptions.html":{}},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"coverage.html":{}}}],["querying",{"_index":264,"title":{},"body":{"classes/Indexing.html":{}}}],["querykey",{"_index":553,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["queue",{"_index":1169,"title":{},"body":{"properties.html":{}}}],["ram",{"_index":1173,"title":{},"body":{"properties.html":{}}}],["reading",{"_index":526,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["readonly",{"_index":1065,"title":{},"body":{"index.html":{}}}],["reason",{"_index":574,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["receiver",{"_index":660,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["record",{"_index":90,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryBuilder.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["recursive",{"_index":521,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["redis",{"_index":1167,"title":{},"body":{"properties.html":{}}}],["redundant",{"_index":1226,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refactors",{"_index":964,"title":{},"body":{"changelog.html":{}}}],["reference",{"_index":541,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["reflect.get(target",{"_index":661,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["reflect.ownkeys(value).length",{"_index":1252,"title":{},"body":{"miscellaneous/variables.html":{}}}],["regex",{"_index":31,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["regexcondition",{"_index":76,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["regexoptions",{"_index":68,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["regexp",{"_index":77,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["regular",{"_index":71,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["relevance",{"_index":759,"title":{},"body":{"classes/SearchEngine.html":{}}}],["remove",{"_index":294,"title":{},"body":{"classes/Indexing.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"changelog.html":{}}}],["removeaccents",{"_index":1035,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["removeaccents(text",{"_index":774,"title":{},"body":{"classes/SearchEngine.html":{},"miscellaneous/functions.html":{}}}],["removeaccents(text.tolowercase().trim()).replace(/[^\\w\\s]|_/g",{"_index":786,"title":{},"body":{"classes/SearchEngine.html":{}}}],["removedocument",{"_index":267,"title":{},"body":{"classes/Indexing.html":{}}}],["removedocument(document",{"_index":291,"title":{},"body":{"classes/Indexing.html":{}}}],["removes",{"_index":293,"title":{},"body":{"classes/Indexing.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"miscellaneous/functions.html":{}}}],["removing",{"_index":263,"title":{},"body":{"classes/Indexing.html":{},"classes/SearchEngine.html":{}}}],["reorder",{"_index":341,"title":{},"body":{"classes/LRUCache.html":{}}}],["reorder(key",{"_index":382,"title":{},"body":{"classes/LRUCache.html":{}}}],["repository",{"_index":1180,"title":{},"body":{"properties.html":{}}}],["representing",{"_index":224,"title":{},"body":{"classes/IndexManager.html":{}}}],["represents",{"_index":32,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["requested",{"_index":791,"title":{},"body":{"classes/SearchEngine.html":{}}}],["resolve",{"_index":470,"title":{},"body":{"classes/Mutex.html":{},"changelog.html":{}}}],["resolvedresult",{"_index":608,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["resolvedresult.slice(this.skipcount",{"_index":640,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["resolvedresult.sort((a",{"_index":614,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["resolveresult",{"_index":560,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["resolves",{"_index":502,"title":{},"body":{"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{}}}],["restore",{"_index":880,"title":{},"body":{"classes/TransactionManager.html":{}}}],["restriction",{"_index":1116,"title":{},"body":{"license.html":{}}}],["result",{"_index":129,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["resultlimit",{"_index":710,"title":{},"body":{"classes/SearchEngine.html":{}}}],["resultpromise",{"_index":473,"title":{},"body":{"classes/Mutex.html":{},"classes/QueryBuilder.html":{}}}],["resultpromise.then",{"_index":477,"title":{},"body":{"classes/Mutex.html":{}}}],["results",{"_index":179,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results.add(doc",{"_index":257,"title":{},"body":{"classes/IndexManager.html":{}}}],["results.push",{"_index":811,"title":{},"body":{"classes/SearchEngine.html":{}}}],["results.sort((a",{"_index":815,"title":{},"body":{"classes/SearchEngine.html":{}}}],["retrieve",{"_index":192,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/QueryCache.html":{},"miscellaneous/variables.html":{}}}],["retrieves",{"_index":216,"title":{},"body":{"classes/IndexManager.html":{},"classes/QueryCache.html":{}}}],["return",{"_index":246,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":732,"title":{},"body":{"classes/SearchEngine.html":{}}}],["returns",{"_index":110,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"miscellaneous/functions.html":{}}}],["rights",{"_index":1119,"title":{},"body":{"license.html":{}}}],["rollback",{"_index":879,"title":{},"body":{"classes/TransactionManager.html":{}}}],["rollbacktransaction",{"_index":855,"title":{},"body":{"classes/TransactionManager.html":{}}}],["rows",{"_index":724,"title":{},"body":{"classes/SearchEngine.html":{}}}],["rules",{"_index":40,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["run",{"_index":471,"title":{},"body":{"classes/Mutex.html":{}}}],["s",{"_index":60,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["safe",{"_index":1233,"title":{},"body":{"miscellaneous/variables.html":{}}}],["safely",{"_index":1212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["safety",{"_index":1068,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["same",{"_index":1228,"title":{},"body":{"miscellaneous/variables.html":{}}}],["save",{"_index":728,"title":{},"body":{"classes/SearchEngine.html":{}}}],["saves",{"_index":505,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["savetodisk",{"_index":489,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["saving",{"_index":485,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["score",{"_index":760,"title":{},"body":{"classes/SearchEngine.html":{},"index.html":{}}}],["scoring",{"_index":157,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["scoringstrategy",{"_index":14,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"index.html":{}}}],["search",{"_index":56,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["search(searchterm",{"_index":745,"title":{},"body":{"classes/SearchEngine.html":{}}}],["searchengine",{"_index":705,"title":{"classes/SearchEngine.html":{}},"body":{"classes/SearchEngine.html":{},"coverage.html":{}}}],["searchengine.normalizewithcache(fieldvalue",{"_index":804,"title":{},"body":{"classes/SearchEngine.html":{}}}],["searchengine.tokenize(normalizedfieldvalue",{"_index":806,"title":{},"body":{"classes/SearchEngine.html":{}}}],["searching",{"_index":753,"title":{},"body":{"classes/SearchEngine.html":{}}}],["searchterm",{"_index":751,"title":{},"body":{"classes/SearchEngine.html":{}}}],["searchtokens.foreach((token",{"_index":808,"title":{},"body":{"classes/SearchEngine.html":{}}}],["see",{"_index":887,"title":{},"body":{"changelog.html":{}}}],["sell",{"_index":1124,"title":{},"body":{"license.html":{}}}],["serialize",{"_index":342,"title":{},"body":{"classes/LRUCache.html":{}}}],["serializedcache",{"_index":368,"title":{},"body":{"classes/LRUCache.html":{}}}],["set",{"_index":249,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["set(key",{"_index":385,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryCache.html":{}}}],["setinterval",{"_index":416,"title":{},"body":{"classes/LRUCache.html":{}}}],["sets",{"_index":277,"title":{},"body":{"classes/Indexing.html":{},"classes/SearchEngine.html":{}}}],["setup",{"_index":940,"title":{},"body":{"changelog.html":{}}}],["shall",{"_index":1133,"title":{},"body":{"license.html":{}}}],["shard",{"_index":819,"title":{"classes/Shard.html":{}},"body":{"classes/Shard.html":{},"coverage.html":{}}}],["simple",{"_index":91,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["simplecondition",{"_index":98,"title":{"interfaces/SimpleCondition.html":{}},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["size",{"_index":346,"title":{},"body":{"classes/LRUCache.html":{},"miscellaneous/functions.html":{}}}],["skip",{"_index":561,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["skip(skipcount",{"_index":585,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["skipcount",{"_index":554,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["smaller",{"_index":1047,"title":{},"body":{"miscellaneous/functions.html":{}}}],["snapshot",{"_index":866,"title":{},"body":{"classes/TransactionManager.html":{}}}],["software",{"_index":1112,"title":{},"body":{"license.html":{}}}],["solve",{"_index":972,"title":{},"body":{"changelog.html":{}}}],["soon",{"_index":1248,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sort",{"_index":562,"title":{},"body":{"classes/QueryBuilder.html":{},"classes/SearchEngine.html":{}}}],["sort(sortconditions",{"_index":587,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["sortconditions",{"_index":555,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["sorted",{"_index":1175,"title":{},"body":{"properties.html":{}}}],["sortedresults",{"_index":814,"title":{},"body":{"classes/SearchEngine.html":{}}}],["sortedresults.slice(0",{"_index":818,"title":{},"body":{"classes/SearchEngine.html":{}}}],["sorting",{"_index":611,"title":{},"body":{"classes/QueryBuilder.html":{},"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{}}}],["specific",{"_index":697,"title":{},"body":{"classes/QueryCache.html":{},"classes/Shard.html":{}}}],["specified",{"_index":229,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"miscellaneous/functions.html":{}}}],["split",{"_index":1049,"title":{},"body":{"miscellaneous/functions.html":{}}}],["splits",{"_index":790,"title":{},"body":{"classes/SearchEngine.html":{},"miscellaneous/functions.html":{}}}],["src/.../evaluate",{"_index":1197,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../get",{"_index":1043,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../helper.ts",{"_index":1042,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../is",{"_index":1198,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../memoz",{"_index":1044,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../search",{"_index":1045,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../types.ts",{"_index":1187,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/constants/memoz",{"_index":993,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/memoz.ts",{"_index":999,"title":{},"body":{"coverage.html":{}}}],["src/types.ts",{"_index":6,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/utils/evaluate",{"_index":1007,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/get",{"_index":545,"title":{},"body":{"classes/QueryBuilder.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/utils/helper.ts",{"_index":1020,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/index",{"_index":183,"title":{},"body":{"classes/IndexManager.html":{},"coverage.html":{}}}],["src/utils/indexing.ts",{"_index":259,"title":{},"body":{"classes/Indexing.html":{},"coverage.html":{}}}],["src/utils/indexing.ts:14",{"_index":273,"title":{},"body":{"classes/Indexing.html":{}}}],["src/utils/indexing.ts:21",{"_index":270,"title":{},"body":{"classes/Indexing.html":{}}}],["src/utils/indexing.ts:39",{"_index":280,"title":{},"body":{"classes/Indexing.html":{}}}],["src/utils/indexing.ts:53",{"_index":292,"title":{},"body":{"classes/Indexing.html":{}}}],["src/utils/indexing.ts:69",{"_index":288,"title":{},"body":{"classes/Indexing.html":{}}}],["src/utils/indexing.ts:82",{"_index":283,"title":{},"body":{"classes/Indexing.html":{}}}],["src/utils/is",{"_index":1024,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/lru",{"_index":327,"title":{},"body":{"classes/LRUCache.html":{},"coverage.html":{}}}],["src/utils/memoz",{"_index":1029,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/mutex.ts",{"_index":458,"title":{},"body":{"classes/Mutex.html":{},"coverage.html":{}}}],["src/utils/mutex.ts:2",{"_index":461,"title":{},"body":{"classes/Mutex.html":{}}}],["src/utils/mutex.ts:4",{"_index":463,"title":{},"body":{"classes/Mutex.html":{}}}],["src/utils/persistence",{"_index":481,"title":{},"body":{"classes/PersistenceManager.html":{},"coverage.html":{}}}],["src/utils/query",{"_index":668,"title":{},"body":{"classes/QueryCache.html":{},"coverage.html":{}}}],["src/utils/search",{"_index":706,"title":{},"body":{"classes/SearchEngine.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/shared.ts",{"_index":820,"title":{},"body":{"classes/Shard.html":{},"coverage.html":{}}}],["src/utils/shared.ts:14",{"_index":833,"title":{},"body":{"classes/Shard.html":{}}}],["src/utils/shared.ts:19",{"_index":835,"title":{},"body":{"classes/Shard.html":{}}}],["src/utils/shared.ts:33",{"_index":832,"title":{},"body":{"classes/Shard.html":{}}}],["src/utils/shared.ts:37",{"_index":830,"title":{},"body":{"classes/Shard.html":{}}}],["src/utils/shared.ts:45",{"_index":828,"title":{},"body":{"classes/Shard.html":{}}}],["src/utils/shared.ts:6",{"_index":825,"title":{},"body":{"classes/Shard.html":{}}}],["src/utils/shared.ts:9",{"_index":827,"title":{},"body":{"classes/Shard.html":{}}}],["src/utils/transaction",{"_index":849,"title":{},"body":{"classes/TransactionManager.html":{},"coverage.html":{}}}],["standard",{"_index":888,"title":{},"body":{"changelog.html":{}}}],["start",{"_index":1095,"title":{},"body":{"index.html":{}}}],["startcleanup",{"_index":343,"title":{},"body":{"classes/LRUCache.html":{}}}],["started",{"_index":882,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["state",{"_index":506,"title":{},"body":{"classes/PersistenceManager.html":{},"classes/TransactionManager.html":{}}}],["statements",{"_index":992,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":712,"title":{},"body":{"classes/SearchEngine.html":{}}}],["statistics",{"_index":685,"title":{},"body":{"classes/QueryCache.html":{}}}],["stayalive",{"_index":176,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["stemming/lemmatization",{"_index":767,"title":{},"body":{"classes/SearchEngine.html":{}}}],["sticky",{"_index":67,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["stop",{"_index":634,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["stopcleanup",{"_index":344,"title":{},"body":{"classes/LRUCache.html":{}}}],["stopping",{"_index":1247,"title":{},"body":{"miscellaneous/variables.html":{}}}],["storage",{"_index":144,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"properties.html":{}}}],["storagepath",{"_index":149,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"index.html":{}}}],["store",{"_index":781,"title":{},"body":{"classes/SearchEngine.html":{},"index.html":{}}}],["stored",{"_index":511,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["stores",{"_index":205,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/QueryCache.html":{}}}],["storing",{"_index":147,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["strategy",{"_index":161,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["stricter",{"_index":38,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["string",{"_index":43,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["string((document",{"_index":313,"title":{},"body":{"classes/Indexing.html":{}}}],["string(doc[field",{"_index":843,"title":{},"body":{"classes/Shard.html":{}}}],["strings",{"_index":275,"title":{},"body":{"classes/Indexing.html":{}}}],["strip",{"_index":778,"title":{},"body":{"classes/SearchEngine.html":{}}}],["structure",{"_index":114,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["subject",{"_index":1129,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":1123,"title":{},"body":{"license.html":{}}}],["subnode",{"_index":1217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["substantial",{"_index":1135,"title":{},"body":{"license.html":{}}}],["success",{"_index":135,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["successful",{"_index":141,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["supported",{"_index":49,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["supports",{"_index":695,"title":{},"body":{"classes/QueryCache.html":{},"classes/SearchEngine.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["switch",{"_index":1201,"title":{},"body":{"miscellaneous/variables.html":{}}}],["symbol.tostringtag",{"_index":652,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["t",{"_index":101,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":1039,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1038,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":865,"title":{},"body":{"classes/TransactionManager.html":{}}}],["takes",{"_index":107,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["template",{"_index":242,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/PersistenceManager.html":{},"miscellaneous/functions.html":{}}}],["temporary",{"_index":874,"title":{},"body":{"classes/TransactionManager.html":{}}}],["term",{"_index":750,"title":{},"body":{"classes/SearchEngine.html":{}}}],["terms",{"_index":765,"title":{},"body":{"classes/SearchEngine.html":{}}}],["ternaries",{"_index":440,"title":{},"body":{"classes/LRUCache.html":{}}}],["test",{"_index":1076,"title":{},"body":{"index.html":{}}}],["testing",{"_index":989,"title":{},"body":{"changelog.html":{}}}],["tests",{"_index":987,"title":{},"body":{"changelog.html":{}}}],["text",{"_index":744,"title":{},"body":{"classes/SearchEngine.html":{},"miscellaneous/functions.html":{}}}],["text.normalize('nfd').replace(/[\\u0300",{"_index":775,"title":{},"body":{"classes/SearchEngine.html":{}}}],["text.split(/\\s",{"_index":789,"title":{},"body":{"classes/SearchEngine.html":{}}}],["themselves",{"_index":138,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["then(onfulfilled",{"_index":589,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.cache",{"_index":701,"title":{},"body":{"classes/QueryCache.html":{}}}],["this.cache.clear",{"_index":445,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryCache.html":{}}}],["this.cache.delete(key",{"_index":410,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryCache.html":{}}}],["this.cache.delete(oldestkey",{"_index":435,"title":{},"body":{"classes/LRUCache.html":{}}}],["this.cache.get(key",{"_index":419,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryCache.html":{}}}],["this.cache.get(oldestkey",{"_index":434,"title":{},"body":{"classes/LRUCache.html":{}}}],["this.cache.has(key",{"_index":424,"title":{},"body":{"classes/LRUCache.html":{}}}],["this.cache.keys().next().value",{"_index":430,"title":{},"body":{"classes/LRUCache.html":{}}}],["this.cache.keys()].shift",{"_index":432,"title":{},"body":{"classes/LRUCache.html":{}}}],["this.cache.set(key",{"_index":444,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryCache.html":{}}}],["this.cache.size",{"_index":425,"title":{},"body":{"classes/LRUCache.html":{}}}],["this.cachehits",{"_index":702,"title":{},"body":{"classes/QueryCache.html":{}}}],["this.cachemisses",{"_index":703,"title":{},"body":{"classes/QueryCache.html":{}}}],["this.cleanupexpiredentries",{"_index":417,"title":{},"body":{"classes/LRUCache.html":{}}}],["this.cleanupinterval",{"_index":414,"title":{},"body":{"classes/LRUCache.html":{}}}],["this.cleanuptimer",{"_index":415,"title":{},"body":{"classes/LRUCache.html":{}}}],["this.db",{"_index":512,"title":{},"body":{"classes/PersistenceManager.html":{},"classes/SearchEngine.html":{},"classes/TransactionManager.html":{}}}],["this.db.clear",{"_index":539,"title":{},"body":{"classes/PersistenceManager.html":{},"classes/Shard.html":{}}}],["this.db.delete(id",{"_index":847,"title":{},"body":{"classes/Shard.html":{}}}],["this.db.get(id",{"_index":846,"title":{},"body":{"classes/Shard.html":{}}}],["this.db.set(doc.id",{"_index":836,"title":{},"body":{"classes/Shard.html":{}}}],["this.db.set(key",{"_index":542,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["this.dbsnapshot",{"_index":870,"title":{},"body":{"classes/TransactionManager.html":{}}}],["this.entries",{"_index":449,"title":{},"body":{"classes/LRUCache.html":{}}}],["this.evictionstrategy",{"_index":428,"title":{},"body":{"classes/LRUCache.html":{}}}],["this.exec().catch(onrejected",{"_index":647,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.exec().finally(onfinally",{"_index":648,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.exec().then(onfulfilled",{"_index":646,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.fields",{"_index":297,"title":{},"body":{"classes/Indexing.html":{}}}],["this.filepath",{"_index":513,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["this.get(key",{"_index":456,"title":{},"body":{"classes/LRUCache.html":{}}}],["this.getdocuments().foreach((doc",{"_index":842,"title":{},"body":{"classes/Shard.html":{}}}],["this.getindex(object.keys(query",{"_index":250,"title":{},"body":{"classes/IndexManager.html":{}}}],["this.getkey(document",{"_index":299,"title":{},"body":{"classes/Indexing.html":{}}}],["this.getkey(query",{"_index":307,"title":{},"body":{"classes/Indexing.html":{}}}],["this.hitcount",{"_index":422,"title":{},"body":{"classes/LRUCache.html":{}}}],["this.index",{"_index":298,"title":{},"body":{"classes/Indexing.html":{}}}],["this.index.delete(key",{"_index":306,"title":{},"body":{"classes/Indexing.html":{}}}],["this.index.get(key",{"_index":308,"title":{},"body":{"classes/Indexing.html":{}}}],["this.index.get(key)!.add(document.id",{"_index":302,"title":{},"body":{"classes/Indexing.html":{}}}],["this.index.get(key)!.delete(document.id",{"_index":303,"title":{},"body":{"classes/Indexing.html":{}}}],["this.index.get(key)!.size",{"_index":304,"title":{},"body":{"classes/Indexing.html":{}}}],["this.index.has(key",{"_index":300,"title":{},"body":{"classes/Indexing.html":{}}}],["this.index.set(key",{"_index":301,"title":{},"body":{"classes/Indexing.html":{}}}],["this.indexes.clear",{"_index":258,"title":{},"body":{"classes/IndexManager.html":{}}}],["this.indexes.foreach((index",{"_index":244,"title":{},"body":{"classes/IndexManager.html":{}}}],["this.indexes.get(fields.join('_",{"_index":247,"title":{},"body":{"classes/IndexManager.html":{}}}],["this.isexpired(entry",{"_index":421,"title":{},"body":{"classes/LRUCache.html":{}}}],["this.isresolved",{"_index":598,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.levenshteincache",{"_index":782,"title":{},"body":{"classes/SearchEngine.html":{}}}],["this.levenshteindistance(token",{"_index":810,"title":{},"body":{"classes/SearchEngine.html":{}}}],["this.limitcount",{"_index":607,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.maxsize",{"_index":426,"title":{},"body":{"classes/LRUCache.html":{}}}],["this.misscount",{"_index":420,"title":{},"body":{"classes/LRUCache.html":{}}}],["this.mutex",{"_index":476,"title":{},"body":{"classes/Mutex.html":{}}}],["this.mutex.then",{"_index":474,"title":{},"body":{"classes/Mutex.html":{}}}],["this.normalizationcache",{"_index":783,"title":{},"body":{"classes/SearchEngine.html":{}}}],["this.onevict",{"_index":411,"title":{},"body":{"classes/LRUCache.html":{}}}],["this.onevict(key",{"_index":412,"title":{},"body":{"classes/LRUCache.html":{}}}],["this.onevict(oldestkey",{"_index":436,"title":{},"body":{"classes/LRUCache.html":{}}}],["this.persisttodisk",{"_index":516,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["this.querycache",{"_index":599,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.querycache.set(this.querykey",{"_index":644,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.querykey",{"_index":600,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.reorder(key",{"_index":423,"title":{},"body":{"classes/LRUCache.html":{}}}],["this.resolveresult",{"_index":609,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.result",{"_index":597,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.resultlimit",{"_index":784,"title":{},"body":{"classes/SearchEngine.html":{}}}],["this.resultpromise",{"_index":596,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.set(key",{"_index":453,"title":{},"body":{"classes/LRUCache.html":{}}}],["this.skipcount",{"_index":606,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.sortconditions",{"_index":604,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.sortconditions.foreach((sortobj",{"_index":616,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.sortconditions.length",{"_index":613,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.transactiondb",{"_index":862,"title":{},"body":{"classes/TransactionManager.html":{}}}],["this.ttl",{"_index":443,"title":{},"body":{"classes/LRUCache.html":{}}}],["thread",{"_index":1067,"title":{},"body":{"index.html":{}}}],["throw",{"_index":324,"title":{},"body":{"classes/Indexing.html":{},"classes/TransactionManager.html":{}}}],["throws",{"_index":309,"title":{},"body":{"classes/Indexing.html":{},"classes/PersistenceManager.html":{}}}],["timestamp",{"_index":1052,"title":{},"body":{"miscellaneous/functions.html":{}}}],["titlebonus",{"_index":1087,"title":{},"body":{"index.html":{}}}],["token",{"_index":162,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"index.html":{}}}],["tokencount",{"_index":20,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["tokenize",{"_index":714,"title":{},"body":{"classes/SearchEngine.html":{}}}],["tokenize(text",{"_index":761,"title":{},"body":{"classes/SearchEngine.html":{}}}],["tokenizes",{"_index":763,"title":{},"body":{"classes/SearchEngine.html":{}}}],["tort",{"_index":1157,"title":{},"body":{"license.html":{}}}],["total",{"_index":454,"title":{},"body":{"classes/LRUCache.html":{},"index.html":{}}}],["totalpages",{"_index":1078,"title":{},"body":{"index.html":{}}}],["tracks",{"_index":679,"title":{},"body":{"classes/QueryCache.html":{}}}],["transaction",{"_index":868,"title":{},"body":{"classes/TransactionManager.html":{},"changelog.html":{},"properties.html":{}}}],["transactiondb",{"_index":851,"title":{},"body":{"classes/TransactionManager.html":{}}}],["transactionmanager",{"_index":848,"title":{"classes/TransactionManager.html":{}},"body":{"classes/TransactionManager.html":{},"coverage.html":{}}}],["treated",{"_index":621,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["tresult",{"_index":576,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["tresult1",{"_index":591,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["tresult2",{"_index":592,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["trimming",{"_index":740,"title":{},"body":{"classes/SearchEngine.html":{}}}],["true",{"_index":121,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["ttl",{"_index":171,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["two",{"_index":108,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{}}}],["type",{"_index":16,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1185,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedkey",{"_index":619,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["typeof",{"_index":319,"title":{},"body":{"classes/Indexing.html":{},"classes/QueryBuilder.html":{},"classes/SearchEngine.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":80,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"miscellaneous/typealiases.html":{}}}],["typescript",{"_index":1174,"title":{},"body":{"properties.html":{}}}],["typing",{"_index":39,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["u",{"_index":64,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["u036f]/g",{"_index":776,"title":{},"body":{"classes/SearchEngine.html":{}}}],["uncomment",{"_index":1070,"title":{},"body":{"index.html":{}}}],["undef",{"_index":404,"title":{},"body":{"classes/LRUCache.html":{}}}],["undefined",{"_index":231,"title":{},"body":{"classes/IndexManager.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/Shard.html":{},"miscellaneous/variables.html":{}}}],["underscore",{"_index":209,"title":{},"body":{"classes/IndexManager.html":{}}}],["unicode",{"_index":65,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["unique",{"_index":33,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/Indexing.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["unit",{"_index":988,"title":{},"body":{"changelog.html":{}}}],["unknown",{"_index":1250,"title":{},"body":{"miscellaneous/variables.html":{}}}],["up",{"_index":1236,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update",{"_index":130,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["updated",{"_index":137,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["updateindexes",{"_index":201,"title":{},"body":{"classes/IndexManager.html":{}}}],["updateindexes(doc",{"_index":233,"title":{},"body":{"classes/IndexManager.html":{}}}],["updatemanyresult",{"_index":139,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["updates",{"_index":235,"title":{},"body":{"classes/IndexManager.html":{},"classes/QueryCache.html":{}}}],["usage",{"_index":1059,"title":{},"body":{"index.html":{}}}],["use",{"_index":315,"title":{},"body":{"classes/Indexing.html":{},"classes/QueryBuilder.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":81,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["usemutex",{"_index":156,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"index.html":{}}}],["user",{"_index":752,"title":{},"body":{"classes/SearchEngine.html":{},"classes/Shard.html":{},"index.html":{}}}],["users",{"_index":1071,"title":{},"body":{"index.html":{}}}],["usersperpage",{"_index":1082,"title":{},"body":{"index.html":{}}}],["uses",{"_index":218,"title":{},"body":{"classes/IndexManager.html":{},"classes/SearchEngine.html":{},"miscellaneous/variables.html":{}}}],["using",{"_index":70,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["utf8",{"_index":537,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["v",{"_index":174,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["valid",{"_index":46,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/Indexing.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["value",{"_index":96,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["value.apply(target",{"_index":663,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["values",{"_index":82,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["valuetypes",{"_index":87,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["variable",{"_index":995,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1196,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":1204,"title":{},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":889,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["void",{"_index":175,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{}}}],["wait",{"_index":467,"title":{},"body":{"classes/Mutex.html":{}}}],["warranties",{"_index":1142,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1137,"title":{},"body":{"license.html":{}}}],["weakmap",{"_index":1229,"title":{},"body":{"miscellaneous/variables.html":{}}}],["weights",{"_index":159,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"classes/SearchEngine.html":{},"interfaces/SimpleCondition.html":{}}}],["whether",{"_index":494,"title":{},"body":{"classes/PersistenceManager.html":{},"index.html":{},"license.html":{}}}],["whitespace",{"_index":741,"title":{},"body":{"classes/SearchEngine.html":{}}}],["within",{"_index":754,"title":{},"body":{"classes/SearchEngine.html":{}}}],["without",{"_index":1115,"title":{},"body":{"license.html":{}}}],["words",{"_index":764,"title":{},"body":{"classes/SearchEngine.html":{}}}],["wrap",{"_index":603,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["writestream",{"_index":522,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["writestream.end",{"_index":525,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["writestream.write(json.stringify(array.from(this.db.entries",{"_index":524,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["writing",{"_index":517,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["xxxx",{"_index":1269,"title":{},"body":{"miscellaneous/variables.html":{}}}],["xxxxxxxx",{"_index":1268,"title":{},"body":{"miscellaneous/variables.html":{}}}],["xxxxxxxxxxxx",{"_index":1272,"title":{},"body":{"miscellaneous/variables.html":{}}}],["y",{"_index":66,"title":{},"body":{"interfaces/FuzzySearchOptions.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["yarn",{"_index":1062,"title":{},"body":{"index.html":{}}}],["yes",{"_index":387,"title":{},"body":{"classes/LRUCache.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{}}}],["yxxx",{"_index":1271,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z0",{"_index":1266,"title":{},"body":{"miscellaneous/variables.html":{}}}],["za",{"_index":1265,"title":{},"body":{"miscellaneous/variables.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/FuzzySearchOptions.html":{"url":"interfaces/FuzzySearchOptions.html","title":"interface - FuzzySearchOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FuzzySearchOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            customScoringFn\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fieldWeights\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxDistance\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            nGramSize\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            scoringStrategy\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        customScoringFn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customScoringFn:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldWeights\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fieldWeights:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxDistance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxDistance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nGramSize\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nGramSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scoringStrategy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scoringStrategy:     \"default\" | \"tokenCount\" | \"custom\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"default\" | \"tokenCount\" | \"custom\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type ComparisonOperator =\n    | '$eq'\n    | '$neq'\n    | '$gt'\n    | '$gte'\n    | '$lt'\n    | '$lte'\n    | '$in'\n    | '$nin'\n    | 'custom'\n    | '$regex';\n\n/**\n * Represents a unique identifier for a MEMOZ object.\n * This type can be enhanced with stricter typing rules if desired.\n */\nexport type MEMOZID = string & { __brand__: 'MEMOZID' };\n\n/**\n * Defines valid regex options for regex operations.\n * Supported options include:\n * - 'i': Case-insensitive matching\n * - 'g': Global search\n * - 'm': Multiline mode\n * - 's': Dot all (dot matches newline)\n * - 'u': Unicode matching\n * - 'y': Sticky matching\n */\nexport type RegexOptions = 'i' | 'g' | 'm' | 's' | 'u' | 'y';\n\n/**\n * Represents a condition using a regular expression.\n * The condition includes a regex pattern and optional flags.\n */\nexport type RegexCondition = {\n    /**\n     * The regex pattern, which can be a string or a RegExp object.\n     */\n    $regex: string | RegExp;\n\n    /**\n     * Optional regex options to modify the regex behavior.\n     */\n    $options?: RegexOptions;\n};\n\n/**\n * Defines the valid types that can be used as values in conditions.\n * This includes primitive types, arrays, objects, and RegexCondition.\n */\nexport type ValueTypes = string | number | boolean | Date | any[] | object | RegexCondition | Record;\n\n/**\n * Represents a simple condition for filtering data.\n * It includes a field, an operator, a value, and an optional custom comparison function.\n */\nexport interface SimpleCondition {\n    /**\n     * The field in the object to evaluate.\n     */\n    field: keyof T;\n\n    /**\n     * The operator used for the comparison.\n     */\n    operator: ComparisonOperator;\n\n    /**\n     * The value to compare against the field.\n     */\n    value: ValueTypes;\n\n    /**\n     * An optional custom comparison function for more complex comparisons.\n     * Takes two arguments and returns a boolean.\n     */\n    customCompare?: (a: any, b: any) => boolean;\n}\n\n/**\n * Defines a node structure for logical conditions.\n * Nodes can be composed of AND/OR logic or simple conditions.\n */\nexport type ConditionNode =\n    | { $and: ConditionNode[] } // All conditions must be true.\n    | { $or: ConditionNode[] } // At least one condition must be true.\n    | SimpleCondition; // A simple condition.\n\n/**\n * Represents a document with an associated unique identifier.\n * The document type is extended with an id of type MEMOZID and can include additional properties.\n */\nexport type DocumentWithId = T & { id: MEMOZID; };\n\n/**\n * Represents the result of an update operation affecting multiple documents.\n * It includes a success flag, the number of documents updated, and the documents themselves.\n */\nexport type UpdateManyResult = {\n    updated: boolean; // Indicates if the update was successful.\n    n: number; // The number of documents updated.\n    documents: DocumentWithId[]; // The updated documents.\n};\n\n/**\n * Options for configuring the Memoz storage and behavior.\n */\nexport interface MemozOptions {\n    /**\n     * Optional path for storing data on disk.\n     */\n    storagePath?: string;\n\n    /**\n     * Flag indicating if data should persist to disk.\n     */\n    persistToDisk?: boolean;\n\n    /**\n     * Flag indicating if mutex should be used for concurrent access.\n     */\n    useMutex?: boolean;\n}\n\n// Modify the FuzzySearchOptions to include custom scoring logic\nexport interface FuzzySearchOptions {\n    maxDistance?: number;\n    nGramSize?: number;\n    fieldWeights?: { [key in string]?: number }; // Optional weights for fields\n    scoringStrategy?: 'default' | 'tokenCount' | 'custom'; // Strategy for scoring\n    customScoringFn?: (\n      token: string,\n      fieldToken: string,\n      distance: number,\n      fieldWeight: number,\n      options: FuzzySearchOptions\n    ) => number; // Custom scoring function\n  }\n\nexport type EvictionStrategy = 'LRU' | 'FIFO';\n\nexport interface LRUCacheOptions {\n    maxSize: number;\n    ttl?: number;\n    onEvict?: (key: K, value: V) => void;\n    evictionStrategy?: EvictionStrategy;\n    stayAlive?: boolean;\n}\n\nexport interface QueryCacheOptions extends LRUCacheOptions[]> {\n    ttl?: number;\n    evictionStrategy?: 'LRU' | 'FIFO';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IndexManager.html":{"url":"classes/IndexManager.html","title":"class - IndexManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IndexManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/index-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                The IndexManager class manages indexing for documents of type T.\nIt provides functionalities to update indexes with new documents,\nretrieve indexes based on fields, query documents using indexes, and clear all indexes.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                indexes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                getFromIndex\n                            \n                            \n                                    Public\n                                getIndex\n                            \n                            \n                                    Public\n                                updateIndexes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        indexes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/utils/index-manager.ts:17\n                        \n                    \n\n            \n                \n                    A map that stores indexes by field names.\nThe key is a string formed by joining field names with an underscore.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clear\n                        \n                    \n                \n            \n            \n                \n                        \n                    clear()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/index-manager.ts:66\n                        \n                    \n\n\n            \n                \n                        Clears all indexes managed by the IndexManager.\n\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getFromIndex\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFromIndex(query: ConditionNode>, db: Map>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/index-manager.ts:48\n                        \n                    \n\n\n            \n                \n                        Retrieves documents from the index based on the query object.\nIf an index exists for the query fields, it uses that index to fetch documents from the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            ConditionNode>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe query object containing conditions for fields and values to search for.\n\n\n                                            \n                                        \n                                        \n                                                db\n                                            \n                                                        Map>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA Map representing the database of documents.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DocumentWithId[]\n\n                        \n                            \n                                \nAn array of documents that match the query.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getIndex\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIndex(fields: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/index-manager.ts:36\n                        \n                    \n\n\n            \n                \n                        Retrieves an index based on the specified fields.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                fields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe array of field names used to identify the index.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Indexing | undefined\n\n                        \n                            \n                                \nThe index for the specified fields, or undefined if not found.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updateIndexes\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateIndexes(doc: DocumentWithId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/index-manager.ts:24\n                        \n                    \n\n\n            \n                \n                        Updates all existing indexes by adding the provided document.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                doc\n                                            \n                                                            DocumentWithId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe document to add to the indexes.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConditionNode, DocumentWithId, MEMOZID } from '../types';\nimport { Indexing } from './indexing';\n\n/**\n * The `IndexManager` class manages indexing for documents of type `T`.\n * It provides functionalities to update indexes with new documents,\n * retrieve indexes based on fields, query documents using indexes, and clear all indexes.\n *\n * @template T - The document type.\n */\nexport class IndexManager {\n  /**\n     * A map that stores indexes by field names.\n     * The key is a string formed by joining field names with an underscore.\n     */\n  private indexes: Map> = new Map();\n\n  /**\n     * Updates all existing indexes by adding the provided document.\n     *\n     * @param {DocumentWithId} doc - The document to add to the indexes.\n     */\n  public updateIndexes(doc: DocumentWithId): void {\n    this.indexes.forEach((index) => {\n      index.addDocument(doc);\n    });\n  }\n\n  /**\n     * Retrieves an index based on the specified fields.\n     *\n     * @param {string[]} fields - The array of field names used to identify the index.\n     * @returns {Indexing | undefined} - The index for the specified fields, or undefined if not found.\n     */\n  public getIndex(fields: string[]): Indexing | undefined {\n    return this.indexes.get(fields.join('_'));\n  }\n\n  /**\n    * Retrieves documents from the index based on the query object.\n    * If an index exists for the query fields, it uses that index to fetch documents from the database.\n    *\n    * @param {ConditionNode>} query - The query object containing conditions for fields and values to search for.\n    * @param {Map>} db - A Map representing the database of documents.\n    * @returns {DocumentWithId[]} - An array of documents that match the query.\n    */\n  public getFromIndex(query: ConditionNode>, db: Map>): DocumentWithId[] {\n    const results: Set> = new Set();\n    const index = this.getIndex(Object.keys(query));\n    if (index) {\n      const indexedIds = index.query(query);\n      indexedIds.forEach((id) => {\n        const doc = db.get(id); // Access the db Map passed as an argument\n        if (doc) results.add(doc);\n      });\n    }\n    return [...results];\n  }\n\n  /**\n     * Clears all indexes managed by the `IndexManager`.\n     *\n     * @returns {void}\n     */\n  public clear(): void {\n    return this.indexes.clear();\n  }\n}\n\nexport default IndexManager;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Indexing.html":{"url":"classes/Indexing.html","title":"class - Indexing","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Indexing\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/indexing.ts\n        \n\n\n            \n                Description\n            \n            \n                A class that provides indexing functionality for a collection of documents.\nIt allows adding, removing, and querying documents based on specified fields.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fields\n                            \n                            \n                                    Private\n                                index\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addDocument\n                            \n                            \n                                    Private\n                                getKey\n                            \n                            \n                                    Public\n                                query\n                            \n                            \n                                    Public\n                                removeDocument\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fields: ()[])\n                    \n                \n                        \n                            \n                                Defined in src/utils/indexing.ts:21\n                            \n                        \n\n                \n                    \n                            Constructs an instance of the Indexing class.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        fields\n                                                  \n                                                        \n                                                                    ()[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe fields to be used for indexing.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        fields\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ()[]\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/indexing.ts:14\n                        \n                    \n\n            \n                \n                    Fields that are used as keys for indexing the documents.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/indexing.ts:21\n                        \n                    \n\n            \n                \n                    A map that stores the index, where keys are strings generated from document fields,\nand the values are sets of document IDs.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        addDocument\n                        \n                    \n                \n            \n            \n                \n                        \n                    addDocument(document: DocumentWithId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/indexing.ts:39\n                        \n                    \n\n\n            \n                \n                        Adds a document to the index.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                document\n                                            \n                                                            DocumentWithId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe document to add to the index.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKey(document: DocumentWithId | ConditionNode>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/indexing.ts:82\n                        \n                    \n\n\n            \n                \n                        Generates a unique key for indexing based on the specified fields of a document.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                document\n                                            \n                                                        DocumentWithId | ConditionNode>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe document or query condition to generate the key from.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nThe generated key based on the document's field values.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        query\n                        \n                    \n                \n            \n            \n                \n                        \n                    query(query: ConditionNode>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/indexing.ts:69\n                        \n                    \n\n\n            \n                \n                        Queries the index to retrieve a set of document IDs that match the given conditions.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            ConditionNode>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe query conditions used to search the index.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Set\n\n                        \n                            \n                                \nA set of document IDs that match the query.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removeDocument\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeDocument(document: DocumentWithId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/indexing.ts:53\n                        \n                    \n\n\n            \n                \n                        Removes a document from the index.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                document\n                                            \n                                                            DocumentWithId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe document to remove from the index.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConditionNode, DocumentWithId, MEMOZID } from '../types';\n\n/**\n * A class that provides indexing functionality for a collection of documents.\n * It allows adding, removing, and querying documents based on specified fields.\n *\n * @template T - The type of the documents being indexed.\n */\nexport class Indexing {\n  /**\n   * Fields that are used as keys for indexing the documents.\n   * @private\n   */\n  private fields: (keyof T)[];\n\n  /**\n   * A map that stores the index, where keys are strings generated from document fields,\n   * and the values are sets of document IDs.\n   * @private\n   */\n  private index: Map>;\n\n  /**\n   * Constructs an instance of the Indexing class.\n   *\n   * @param {Array} fields - The fields to be used for indexing.\n   */\n  constructor(fields: (keyof T)[]) {\n    this.fields = fields;\n    this.index = new Map();\n  }\n\n  /**\n   * Adds a document to the index.\n   *\n   * @param {DocumentWithId} document - The document to add to the index.\n   * @returns {void}\n   */\n  public addDocument(document: DocumentWithId): void {\n    const key = this.getKey(document);\n    if (!this.index.has(key)) {\n      this.index.set(key, new Set());\n    }\n    this.index.get(key)!.add(document.id);\n  }\n\n  /**\n   * Removes a document from the index.\n   *\n   * @param {DocumentWithId} document - The document to remove from the index.\n   * @returns {void}\n   */\n  public removeDocument(document: DocumentWithId): void {\n    const key = this.getKey(document);\n    if (this.index.has(key)) {\n      this.index.get(key)!.delete(document.id);\n      if (this.index.get(key)!.size === 0) {\n        this.index.delete(key);\n      }\n    }\n  }\n\n  /**\n   * Queries the index to retrieve a set of document IDs that match the given conditions.\n   *\n   * @param {ConditionNode>} query - The query conditions used to search the index.\n   * @returns {Set} - A set of document IDs that match the query.\n   */\n  public query(query: ConditionNode>): Set {\n    const key = this.getKey(query);\n    return this.index.has(key) ? this.index.get(key)! : new Set();\n  }\n\n  /**\n   * Generates a unique key for indexing based on the specified fields of a document.\n   *\n   * @private\n   * @param {DocumentWithId | ConditionNode>} document - The document or query condition to generate the key from.\n   * @returns {string} - The generated key based on the document's field values.\n   * @throws {Error} If the input is not a valid document for indexing.\n   */\n  private getKey(document: DocumentWithId | ConditionNode>): string {\n    if ('id' in document) {\n      return this.fields\n        .map((field: keyof T) => String((document as any)[field])) // Use 'any' to cast document property access\n        .join('_');\n    } if (typeof document === 'object') {\n      // Optionally handle condition node queries\n      return this.fields\n        .map((field: keyof T) => String((document as any)[field] || '')) // Allow partial matching in queries\n        .join('_');\n    }\n    // Handle the case where the input is not a valid document\n    throw new Error('Unexpected document type for indexing');\n  }\n}\n\nexport default Indexing;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LRUCache.html":{"url":"classes/LRUCache.html","title":"class - LRUCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LRUCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/lru-cache.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                cache\n                            \n                            \n                                    Private\n                                cleanupInterval\n                            \n                            \n                                    Private\n                                    Optional\n                                cleanupTimer\n                            \n                            \n                                    Private\n                                evictionStrategy\n                            \n                            \n                                    Private\n                                hitCount\n                            \n                            \n                                    Private\n                                maxSize\n                            \n                            \n                                    Private\n                                missCount\n                            \n                            \n                                    Private\n                                    Optional\n                                onEvict\n                            \n                            \n                                    Private\n                                    Optional\n                                stayAlive\n                            \n                            \n                                    Private\n                                    Optional\n                                ttl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                cleanupExpiredEntries\n                            \n                            \n                                clear\n                            \n                            \n                                delete\n                            \n                            \n                                deserialize\n                            \n                            \n                                entries\n                            \n                            \n                                get\n                            \n                            \n                                    Async\n                                getAsync\n                            \n                            \n                                has\n                            \n                            \n                                    Private\n                                isExpired\n                            \n                            \n                                    Private\n                                reorder\n                            \n                            \n                                serialize\n                            \n                            \n                                set\n                            \n                            \n                                    Private\n                                startCleanup\n                            \n                            \n                                stopCleanup\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    size\n                                \n                                \n                                    hitRate\n                                \n                                \n                                    missRate\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options: LRUCacheOptions)\n                    \n                \n                        \n                            \n                                Defined in src/utils/lru-cache.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        LRUCacheOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cache\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cleanupInterval\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 60000\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        cleanupTimer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     NodeJS.Timeout\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        evictionStrategy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EvictionStrategy\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hitCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        maxSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        missCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        onEvict\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        stayAlive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        ttl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:8\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cleanupExpiredEntries\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanupExpiredEntries()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:60\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:140\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(key: K)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:136\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(serializedCache: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:171\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                serializedCache\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n            \n                \nentries()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:160\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Array<>\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(key: K)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     V | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAsync\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAsync(key: K, fetchFn: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:189\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fetchFn\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has\n                        \n                    \n                \n            \n            \n                \nhas(key: K)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:148\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isExpired\n                        \n                    \n                \n            \n            \n                \n                        \n                    isExpired(entry: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entry\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        reorder\n                        \n                    \n                \n            \n            \n                \n                        \n                    reorder(key: K)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:166\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(key: K, value: V, ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                        V\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        startCleanup\n                        \n                    \n                \n            \n            \n                \n                        \n                    startCleanup()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:72\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stopCleanup\n                        \n                    \n                \n            \n            \n                \nstopCleanup()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:78\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        size\n                    \n                \n\n                \n                    \n                        getsize()\n                    \n                \n                            \n                                \n                                    Defined in src/utils/lru-cache.ts:144\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        hitRate\n                    \n                \n\n                \n                    \n                        gethitRate()\n                    \n                \n                            \n                                \n                                    Defined in src/utils/lru-cache.ts:179\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        missRate\n                    \n                \n\n                \n                    \n                        getmissRate()\n                    \n                \n                            \n                                \n                                    Defined in src/utils/lru-cache.ts:184\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { EvictionStrategy, LRUCacheOptions } from '../types';\n\nexport class LRUCache {\n  private cache: Map = new Map();\n\n  private maxSize: number;\n\n  private ttl?: number;\n\n  private onEvict?: (key: K, value: V) => void;\n\n  private evictionStrategy: EvictionStrategy;\n\n  private stayAlive?: boolean;\n\n  private hitCount: number = 0;\n\n  private missCount: number = 0;\n\n  private cleanupInterval: number = 60000; // 1 minute cleanup interval\n\n  // eslint-disable-next-line no-undef\n  private cleanupTimer?: NodeJS.Timeout;\n\n  constructor(options: LRUCacheOptions) {\n    const {\n      maxSize,\n      ttl, onEvict,\n      evictionStrategy = 'LRU',\n      stayAlive = false,\n    } = options;\n\n    if (maxSize  entry.expiry;\n  }\n\n  private cleanupExpiredEntries(): void {\n    const now = performance.now();\n    Array.from(this.cache.entries()).forEach(([key, entry]) => {\n      if (entry.expiry !== undefined && now > entry.expiry) {\n        this.cache.delete(key);\n        if (this.onEvict) {\n          this.onEvict(key, entry.value);\n        }\n      }\n    });\n  }\n\n  private startCleanup(): void {\n    if (this.cleanupInterval) {\n      this.cleanupTimer = setInterval(() => this.cleanupExpiredEntries(), this.cleanupInterval);\n    }\n  }\n\n  stopCleanup(): void {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n    }\n  }\n\n  get(key: K): V | undefined {\n    const entry = this.cache.get(key);\n    if (!entry) {\n      this.missCount += 1;\n      return undefined;\n    }\n\n    if (this.isExpired(entry)) {\n      this.cache.delete(key);\n      this.missCount += 1;\n      return undefined;\n    }\n\n    this.hitCount += 1;\n    this.reorder(key);\n    return entry.value;\n  }\n\n  set(key: K, value: V, ttl?: number): void {\n    if (this.cache.has(key)) {\n      this.reorder(key);\n    } else if (this.cache.size === this.maxSize) {\n      let oldestKey: K | undefined;\n\n      if (this.evictionStrategy === 'LRU') {\n        // Get the first key for LRU strategy\n        oldestKey = this.cache.keys().next().value;\n      } else if (this.evictionStrategy === 'FIFO') {\n        // Get the oldest key for FIFO strategy\n        oldestKey = [...this.cache.keys()].shift();\n      }\n\n      if (oldestKey !== undefined) {\n        const oldestEntry = this.cache.get(oldestKey);\n        this.cache.delete(oldestKey);\n        if (this.onEvict && oldestEntry) {\n          this.onEvict(oldestKey, oldestEntry.value);\n        }\n      }\n    }\n\n    // Avoid nested ternaries by using simple conditionals\n    let expiry: number | undefined;\n    if (ttl !== undefined) {\n      expiry = performance.now() + ttl;\n    } else if (this.ttl !== undefined) {\n      expiry = performance.now() + this.ttl;\n    }\n\n    this.cache.set(key, { value, expiry });\n  }\n\n  delete(key: K): boolean {\n    return this.cache.delete(key);\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n\n  get size(): number {\n    return this.cache.size;\n  }\n\n  has(key: K): boolean {\n    const entry = this.cache.get(key);\n    if (!entry) return false;\n\n    if (this.isExpired(entry)) {\n      this.cache.delete(key);\n      return false;\n    }\n\n    return true;\n  }\n\n  entries(): Array {\n    return Array.from(this.cache.entries())\n      .filter(([, entry]) => !this.isExpired(entry))\n      .map(([key, entry]) => [key, entry.value]);\n  }\n\n  serialize(): string {\n    const entries = this.entries();\n    return JSON.stringify(entries);\n  }\n\n  deserialize(serializedCache: string): void {\n    const entries: [K, V][] = JSON.parse(serializedCache);\n    this.cache.clear();\n    entries.forEach(([key, value]) => {\n      this.set(key, value);\n    });\n  }\n\n  get hitRate(): number {\n    const total = this.hitCount + this.missCount;\n    return total === 0 ? 0 : this.hitCount / total;\n  }\n\n  get missRate(): number {\n    const total = this.hitCount + this.missCount;\n    return total === 0 ? 0 : this.missCount / total;\n  }\n\n  async getAsync(key: K, fetchFn: () => Promise): Promise {\n    const cached = this.get(key);\n    if (cached) {\n      return cached;\n    }\n\n    const result = await fetchFn();\n    this.set(key, result);\n    return result;\n  }\n}\n\nexport default LRUCache;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LRUCacheOptions.html":{"url":"interfaces/LRUCacheOptions.html","title":"interface - LRUCacheOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LRUCacheOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            evictionStrategy\n                                        \n                                \n                                \n                                        \n                                            maxSize\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onEvict\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stayAlive\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ttl\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        evictionStrategy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        evictionStrategy:         EvictionStrategy\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EvictionStrategy\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxSize\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onEvict\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onEvict:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stayAlive\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stayAlive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ttl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ttl:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type ComparisonOperator =\n    | '$eq'\n    | '$neq'\n    | '$gt'\n    | '$gte'\n    | '$lt'\n    | '$lte'\n    | '$in'\n    | '$nin'\n    | 'custom'\n    | '$regex';\n\n/**\n * Represents a unique identifier for a MEMOZ object.\n * This type can be enhanced with stricter typing rules if desired.\n */\nexport type MEMOZID = string & { __brand__: 'MEMOZID' };\n\n/**\n * Defines valid regex options for regex operations.\n * Supported options include:\n * - 'i': Case-insensitive matching\n * - 'g': Global search\n * - 'm': Multiline mode\n * - 's': Dot all (dot matches newline)\n * - 'u': Unicode matching\n * - 'y': Sticky matching\n */\nexport type RegexOptions = 'i' | 'g' | 'm' | 's' | 'u' | 'y';\n\n/**\n * Represents a condition using a regular expression.\n * The condition includes a regex pattern and optional flags.\n */\nexport type RegexCondition = {\n    /**\n     * The regex pattern, which can be a string or a RegExp object.\n     */\n    $regex: string | RegExp;\n\n    /**\n     * Optional regex options to modify the regex behavior.\n     */\n    $options?: RegexOptions;\n};\n\n/**\n * Defines the valid types that can be used as values in conditions.\n * This includes primitive types, arrays, objects, and RegexCondition.\n */\nexport type ValueTypes = string | number | boolean | Date | any[] | object | RegexCondition | Record;\n\n/**\n * Represents a simple condition for filtering data.\n * It includes a field, an operator, a value, and an optional custom comparison function.\n */\nexport interface SimpleCondition {\n    /**\n     * The field in the object to evaluate.\n     */\n    field: keyof T;\n\n    /**\n     * The operator used for the comparison.\n     */\n    operator: ComparisonOperator;\n\n    /**\n     * The value to compare against the field.\n     */\n    value: ValueTypes;\n\n    /**\n     * An optional custom comparison function for more complex comparisons.\n     * Takes two arguments and returns a boolean.\n     */\n    customCompare?: (a: any, b: any) => boolean;\n}\n\n/**\n * Defines a node structure for logical conditions.\n * Nodes can be composed of AND/OR logic or simple conditions.\n */\nexport type ConditionNode =\n    | { $and: ConditionNode[] } // All conditions must be true.\n    | { $or: ConditionNode[] } // At least one condition must be true.\n    | SimpleCondition; // A simple condition.\n\n/**\n * Represents a document with an associated unique identifier.\n * The document type is extended with an id of type MEMOZID and can include additional properties.\n */\nexport type DocumentWithId = T & { id: MEMOZID; };\n\n/**\n * Represents the result of an update operation affecting multiple documents.\n * It includes a success flag, the number of documents updated, and the documents themselves.\n */\nexport type UpdateManyResult = {\n    updated: boolean; // Indicates if the update was successful.\n    n: number; // The number of documents updated.\n    documents: DocumentWithId[]; // The updated documents.\n};\n\n/**\n * Options for configuring the Memoz storage and behavior.\n */\nexport interface MemozOptions {\n    /**\n     * Optional path for storing data on disk.\n     */\n    storagePath?: string;\n\n    /**\n     * Flag indicating if data should persist to disk.\n     */\n    persistToDisk?: boolean;\n\n    /**\n     * Flag indicating if mutex should be used for concurrent access.\n     */\n    useMutex?: boolean;\n}\n\n// Modify the FuzzySearchOptions to include custom scoring logic\nexport interface FuzzySearchOptions {\n    maxDistance?: number;\n    nGramSize?: number;\n    fieldWeights?: { [key in string]?: number }; // Optional weights for fields\n    scoringStrategy?: 'default' | 'tokenCount' | 'custom'; // Strategy for scoring\n    customScoringFn?: (\n      token: string,\n      fieldToken: string,\n      distance: number,\n      fieldWeight: number,\n      options: FuzzySearchOptions\n    ) => number; // Custom scoring function\n  }\n\nexport type EvictionStrategy = 'LRU' | 'FIFO';\n\nexport interface LRUCacheOptions {\n    maxSize: number;\n    ttl?: number;\n    onEvict?: (key: K, value: V) => void;\n    evictionStrategy?: EvictionStrategy;\n    stayAlive?: boolean;\n}\n\nexport interface QueryCacheOptions extends LRUCacheOptions[]> {\n    ttl?: number;\n    evictionStrategy?: 'LRU' | 'FIFO';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MemozOptions.html":{"url":"interfaces/MemozOptions.html","title":"interface - MemozOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MemozOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types.ts\n        \n\n\n            \n                Description\n            \n            \n                Options for configuring the Memoz storage and behavior.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            persistToDisk\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            storagePath\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            useMutex\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        persistToDisk\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        persistToDisk:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Flag indicating if data should persist to disk.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        storagePath\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        storagePath:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional path for storing data on disk.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useMutex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useMutex:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Flag indicating if mutex should be used for concurrent access.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export type ComparisonOperator =\n    | '$eq'\n    | '$neq'\n    | '$gt'\n    | '$gte'\n    | '$lt'\n    | '$lte'\n    | '$in'\n    | '$nin'\n    | 'custom'\n    | '$regex';\n\n/**\n * Represents a unique identifier for a MEMOZ object.\n * This type can be enhanced with stricter typing rules if desired.\n */\nexport type MEMOZID = string & { __brand__: 'MEMOZID' };\n\n/**\n * Defines valid regex options for regex operations.\n * Supported options include:\n * - 'i': Case-insensitive matching\n * - 'g': Global search\n * - 'm': Multiline mode\n * - 's': Dot all (dot matches newline)\n * - 'u': Unicode matching\n * - 'y': Sticky matching\n */\nexport type RegexOptions = 'i' | 'g' | 'm' | 's' | 'u' | 'y';\n\n/**\n * Represents a condition using a regular expression.\n * The condition includes a regex pattern and optional flags.\n */\nexport type RegexCondition = {\n    /**\n     * The regex pattern, which can be a string or a RegExp object.\n     */\n    $regex: string | RegExp;\n\n    /**\n     * Optional regex options to modify the regex behavior.\n     */\n    $options?: RegexOptions;\n};\n\n/**\n * Defines the valid types that can be used as values in conditions.\n * This includes primitive types, arrays, objects, and RegexCondition.\n */\nexport type ValueTypes = string | number | boolean | Date | any[] | object | RegexCondition | Record;\n\n/**\n * Represents a simple condition for filtering data.\n * It includes a field, an operator, a value, and an optional custom comparison function.\n */\nexport interface SimpleCondition {\n    /**\n     * The field in the object to evaluate.\n     */\n    field: keyof T;\n\n    /**\n     * The operator used for the comparison.\n     */\n    operator: ComparisonOperator;\n\n    /**\n     * The value to compare against the field.\n     */\n    value: ValueTypes;\n\n    /**\n     * An optional custom comparison function for more complex comparisons.\n     * Takes two arguments and returns a boolean.\n     */\n    customCompare?: (a: any, b: any) => boolean;\n}\n\n/**\n * Defines a node structure for logical conditions.\n * Nodes can be composed of AND/OR logic or simple conditions.\n */\nexport type ConditionNode =\n    | { $and: ConditionNode[] } // All conditions must be true.\n    | { $or: ConditionNode[] } // At least one condition must be true.\n    | SimpleCondition; // A simple condition.\n\n/**\n * Represents a document with an associated unique identifier.\n * The document type is extended with an id of type MEMOZID and can include additional properties.\n */\nexport type DocumentWithId = T & { id: MEMOZID; };\n\n/**\n * Represents the result of an update operation affecting multiple documents.\n * It includes a success flag, the number of documents updated, and the documents themselves.\n */\nexport type UpdateManyResult = {\n    updated: boolean; // Indicates if the update was successful.\n    n: number; // The number of documents updated.\n    documents: DocumentWithId[]; // The updated documents.\n};\n\n/**\n * Options for configuring the Memoz storage and behavior.\n */\nexport interface MemozOptions {\n    /**\n     * Optional path for storing data on disk.\n     */\n    storagePath?: string;\n\n    /**\n     * Flag indicating if data should persist to disk.\n     */\n    persistToDisk?: boolean;\n\n    /**\n     * Flag indicating if mutex should be used for concurrent access.\n     */\n    useMutex?: boolean;\n}\n\n// Modify the FuzzySearchOptions to include custom scoring logic\nexport interface FuzzySearchOptions {\n    maxDistance?: number;\n    nGramSize?: number;\n    fieldWeights?: { [key in string]?: number }; // Optional weights for fields\n    scoringStrategy?: 'default' | 'tokenCount' | 'custom'; // Strategy for scoring\n    customScoringFn?: (\n      token: string,\n      fieldToken: string,\n      distance: number,\n      fieldWeight: number,\n      options: FuzzySearchOptions\n    ) => number; // Custom scoring function\n  }\n\nexport type EvictionStrategy = 'LRU' | 'FIFO';\n\nexport interface LRUCacheOptions {\n    maxSize: number;\n    ttl?: number;\n    onEvict?: (key: K, value: V) => void;\n    evictionStrategy?: EvictionStrategy;\n    stayAlive?: boolean;\n}\n\nexport interface QueryCacheOptions extends LRUCacheOptions[]> {\n    ttl?: number;\n    evictionStrategy?: 'LRU' | 'FIFO';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Mutex.html":{"url":"classes/Mutex.html","title":"class - Mutex","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Mutex\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/mutex.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                mutex\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                lock\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mutex\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Promise\n\n                    \n                \n                \n                    \n                        Default value : Promise.resolve()\n                    \n                \n                    \n                        \n                                Defined in src/utils/mutex.ts:2\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        lock\n                        \n                    \n                \n            \n            \n                \n                        \n                    lock(callback: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/mutex.ts:4\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                callback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Mutex {\n  private mutex: Promise = Promise.resolve();\n\n  public lock(callback: () => T | Promise): Promise {\n    // Locking mechanism: Wait for the current mutex chain to resolve,\n    // then run the callback and capture its result\n    const resultPromise = this.mutex.then(() => callback());\n\n    // Update the mutex to wait for the current operation to finish\n    this.mutex = resultPromise.then(() => undefined, () => undefined);\n\n    // Return the result of the callback, so the caller gets its value\n    return resultPromise;\n  }\n}\nexport default Mutex;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PersistenceManager.html":{"url":"classes/PersistenceManager.html","title":"class - PersistenceManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PersistenceManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/persistence-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                A class to manage persistence of data in a Map structure, allowing\nfor saving to and loading from disk.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                db\n                            \n                            \n                                    Private\n                                filePath\n                            \n                            \n                                    Private\n                                persistToDisk\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                loadFromDisk\n                            \n                            \n                                    Public\n                                    Async\n                                saveToDisk\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(db: Map>, filePath: string | undefined, persistToDisk?: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/utils/persistence-manager.ts:35\n                            \n                        \n\n                \n                    \n                            Creates an instance of PersistenceManager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                    Map>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe initial database as a Map.\n\n\n                                                        \n                                                \n                                                \n                                                        filePath\n                                                  \n                                                        \n                                                                    string | undefined\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe path to the file for persistence.\n\n\n                                                        \n                                                \n                                                \n                                                        persistToDisk\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nFlag indicating whether to persist data to disk.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map>\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/persistence-manager.ts:19\n                        \n                    \n\n            \n                \n                    A Map that holds the documents with their associated IDs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        filePath\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/persistence-manager.ts:27\n                        \n                    \n\n            \n                \n                    The file path where data will be persisted, if applicable.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        persistToDisk\n                        \n                    \n                \n            \n                \n                    \n                        Type :     boolean | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/persistence-manager.ts:35\n                        \n                    \n\n            \n                \n                    A flag indicating whether to persist data to disk.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        loadFromDisk\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadFromDisk()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/persistence-manager.ts:76\n                        \n                    \n\n\n            \n                \n                        Loads data from disk into the Map.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves when the operation is complete.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        saveToDisk\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveToDisk()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/persistence-manager.ts:57\n                        \n                    \n\n\n            \n                \n                        Saves the current state of the Map to disk as a JSON file.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves when the operation is complete.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import fs, { promises as fsPromises } from 'fs';\nimport path from 'path';\nimport { DocumentWithId, MEMOZID } from '../types';\n\n/**\n * A class to manage persistence of data in a Map structure, allowing\n * for saving to and loading from disk.\n *\n * @template T - The type of documents stored in the Map.\n */\nexport class PersistenceManager {\n  /**\n   * A Map that holds the documents with their associated IDs.\n   *\n   * @private\n   * @type {Map>}\n   */\n  private db: Map>;\n\n  /**\n   * The file path where data will be persisted, if applicable.\n   *\n   * @private\n   * @type {string | undefined}\n   */\n  private filePath: string | undefined;\n\n  /**\n   * A flag indicating whether to persist data to disk.\n   *\n   * @private\n   * @type {boolean | undefined}\n   */\n  private persistToDisk: boolean | undefined;\n\n  /**\n   * Creates an instance of PersistenceManager.\n   *\n   * @param {Map>} db - The initial database as a Map.\n   * @param {string | undefined} filePath - The path to the file for persistence.\n   * @param {boolean} [persistToDisk] - Flag indicating whether to persist data to disk.\n   */\n  constructor(db: Map>, filePath: string | undefined, persistToDisk?: boolean) {\n    this.db = db;\n    this.filePath = filePath ? path.resolve(filePath) : './data.json';\n    this.persistToDisk = persistToDisk;\n  }\n\n  /**\n   * Saves the current state of the Map to disk as a JSON file.\n   *\n   * @returns {Promise} A promise that resolves when the operation is complete.\n   *\n   * @throws {Error} If there is an error writing to the file.\n   */\n  public async saveToDisk(): Promise {\n    if (this.persistToDisk && this.filePath) {\n      const dir = path.dirname(this.filePath);\n\n      await fsPromises.mkdir(dir, { recursive: true });\n      const writeStream = fs.createWriteStream(this.filePath);\n\n      writeStream.write(JSON.stringify(Array.from(this.db.entries())));\n      writeStream.end();\n    }\n  }\n\n  /**\n   * Loads data from disk into the Map.\n   *\n   * @returns {Promise} A promise that resolves when the operation is complete.\n   *\n   * @throws {Error} If there is an error reading the file or parsing the JSON data.\n   */\n  public async loadFromDisk(): Promise {\n    // if filePath is provide and node exists create the file\n    if (this.filePath && !fs.existsSync(this.filePath)) {\n      await fsPromises.writeFile(this.filePath, []);\n    }\n\n    if (this.filePath && this.persistToDisk) {\n      // Check if the file exists\n      await fsPromises.access(this.filePath);\n      // Load the file contents\n      const data = await fsPromises.readFile(this.filePath, 'utf8');\n      if (data) {\n        const entries = JSON.parse(data) as [MEMOZID, DocumentWithId][];\n\n        this.db.clear(); // Clear the original Map reference\n        entries.forEach(([key, value]) => {\n          this.db.set(key, value); // Populate the original Map\n        });\n      }\n    }\n  }\n}\n\nexport default PersistenceManager;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryBuilder.html":{"url":"classes/QueryBuilder.html","title":"class - QueryBuilder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryBuilder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/get-many-query-builder.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        PromiseLike\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                isResolved\n                            \n                            \n                                    Private\n                                limitCount\n                            \n                            \n                                    Private\n                                queryCache\n                            \n                            \n                                    Private\n                                queryKey\n                            \n                            \n                                    Private\n                                result\n                            \n                            \n                                    Private\n                                    Optional\n                                resultPromise\n                            \n                            \n                                    Private\n                                skipCount\n                            \n                            \n                                    Private\n                                sortConditions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                catch\n                            \n                            \n                                    Public\n                                    Async\n                                exec\n                            \n                            \n                                    Public\n                                finally\n                            \n                            \n                                    Public\n                                limit\n                            \n                            \n                                    Private\n                                    Async\n                                resolveResult\n                            \n                            \n                                    Public\n                                skip\n                            \n                            \n                                    Public\n                                sort\n                            \n                            \n                                    Public\n                                then\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(result: DocumentWithId[] | Promise, queryCache: QueryCache, queryKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/utils/get-many-query-builder.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        result\n                                                  \n                                                        \n                                                                        DocumentWithId[] | Promise\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryCache\n                                                  \n                                                        \n                                                                        QueryCache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isResolved\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        limitCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : Number.MAX_SAFE_INTEGER\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        queryCache\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueryCache\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        queryKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        result\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentWithId[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        resultPromise\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Promise\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        skipCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sortConditions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array>\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:13\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        catch\n                        \n                    \n                \n            \n            \n                \n                        \n                    catch(onrejected?: (reason?: any) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:118\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    TResult\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                onrejected\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        exec\n                        \n                    \n                \n            \n            \n                \n                        \n                    exec()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:63\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        finally\n                        \n                    \n                \n            \n            \n                \n                        \n                    finally(onfinally?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:124\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                onfinally\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        limit\n                        \n                    \n                \n            \n            \n                \n                        \n                    limit(limitCount: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                limitCount\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        resolveResult\n                        \n                    \n                \n            \n            \n                \n                        \n                    resolveResult()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        skip\n                        \n                    \n                \n            \n            \n                \n                        \n                    skip(skipCount: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                skipCount\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sort\n                        \n                    \n                \n            \n            \n                \n                        \n                    sort(sortConditions?: Record | Record[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sortConditions\n                                            \n                                                        Record | Record[]\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        then\n                        \n                    \n                \n            \n            \n                \n                        \n                    then(onfulfilled?: (value?: DocumentWithId[]) => void, onrejected?: (reason?: any) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:111\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    TResult1\n                                    TResult2\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                onfulfilled\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                onrejected\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in src/utils/get-many-query-builder.ts:130\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { DocumentWithId } from '../types';\nimport { QueryCache } from './query-cache';\n\nexport class QueryBuilder implements PromiseLike[]> {\n  private result: DocumentWithId[] = [];\n\n  private resultPromise?: Promise[]>;\n\n  private queryCache: QueryCache;\n\n  private queryKey: string;\n\n  private sortConditions: Array> = [];\n\n  private skipCount: number = 0;\n\n  private limitCount: number = Number.MAX_SAFE_INTEGER;\n\n  private isResolved: boolean = false;\n\n  constructor(\n    result: DocumentWithId[] | Promise[]>,\n    queryCache: QueryCache,\n    queryKey: string,\n  ) {\n    if (result instanceof Promise) {\n      this.resultPromise = result;\n    } else {\n      this.result = result;\n      this.isResolved = true;\n    }\n    this.queryCache = queryCache;\n    this.queryKey = queryKey;\n  }\n\n  // Resolves the result if it's a promise, otherwise returns the result\n  private async resolveResult(): Promise[]> {\n    if (!this.isResolved && this.resultPromise) {\n      this.result = await this.resultPromise;\n      this.isResolved = true;\n    }\n    return this.result;\n  }\n\n  public sort(sortConditions?: Record | Record[]): this {\n    if (sortConditions) {\n      // If sortConditions is an array, use it as is, otherwise wrap it in an array\n      this.sortConditions = Array.isArray(sortConditions) ? sortConditions : [sortConditions];\n    }\n    return this;\n  }\n\n  public skip(skipCount: number): this {\n    this.skipCount = skipCount;\n    return this;\n  }\n\n  public limit(limitCount: number): this {\n    this.limitCount = limitCount;\n    return this;\n  }\n\n  public async exec(): Promise[]> {\n    const resolvedResult = await this.resolveResult();\n\n    // Apply sorting if needed\n    if (this.sortConditions.length > 0) {\n      resolvedResult.sort((a, b) => {\n        let comparisonResult = 0;\n\n        this.sortConditions.forEach((sortObj) => {\n          Object.entries(sortObj).forEach(([key, order]) => {\n            const typedKey = key as keyof T; // Ensure the key is treated as keyof T\n            const aValue = a[typedKey];\n            const bValue = b[typedKey];\n\n            // Skip undefined or null values\n            if (aValue === undefined || bValue === undefined || aValue === null || bValue === null) return;\n\n            if (aValue  bValue) {\n              comparisonResult = order === 'asc' ? 1 : -1;\n              // Exit inner loop after determining order\n            }\n          });\n\n          // If a comparison has already been made, stop further comparisons\n          if (comparisonResult !== 0) {\n            // Exit outer loop if already determined\n          }\n        });\n\n        return comparisonResult;\n      });\n    }\n\n    // Apply pagination\n    const paginatedResult = resolvedResult.slice(this.skipCount, this.skipCount + this.limitCount);\n\n    // Cache the result only if it's different\n    if (JSON.stringify(this.result) !== JSON.stringify(paginatedResult)) {\n      this.queryCache.set(this.queryKey, paginatedResult);\n    }\n\n    return paginatedResult;\n  }\n\n  public then[], TResult2 = never>(\n    onfulfilled?: (value: DocumentWithId[]) => TResult1 | PromiseLike,\n    onrejected?: (reason: any) => TResult2 | PromiseLike,\n  ): Promise {\n    return this.exec().then(onfulfilled, onrejected);\n  }\n\n  public catch(\n    onrejected?: (reason: any) => TResult | PromiseLike,\n  ): Promise[] | TResult> {\n    return this.exec().catch(onrejected);\n  }\n\n  public finally(onfinally?: () => void): Promise[]> {\n    return this.exec().finally(onfinally);\n  }\n\n  // Mark the class as Promise-like for chaining purposes\n  // eslint-disable-next-line class-methods-use-this\n  get [Symbol.toStringTag](): string {\n    return 'Promise';\n  }\n}\n\n// Proxy to enable chaining and ensure correct promise-like behavior\nexport function createQueryBuilderProxy(builder: QueryBuilder): QueryBuilder {\n  return new Proxy(builder, {\n    get(target, prop, receiver) {\n      const value = Reflect.get(target, prop, receiver);\n\n      if (typeof value === 'function') {\n        return (...args: any[]) => {\n          const result = value.apply(target, args);\n          return result instanceof QueryBuilder ? createQueryBuilderProxy(result) : result;\n        };\n      }\n\n      if (prop === 'then') {\n        return (...args: any[]) => builder.then(...args);\n      }\n      if (prop === 'catch') {\n        return (onrejected: (reason: any) => any) => builder.exec().catch(onrejected);\n      }\n\n      return builder.exec();\n    },\n  });\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryCache.html":{"url":"classes/QueryCache.html","title":"class - QueryCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/query-cache.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                cache\n                            \n                            \n                                    Private\n                                cacheHits\n                            \n                            \n                                    Private\n                                cacheMisses\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                getStats\n                            \n                            \n                                    Public\n                                invalidate\n                            \n                            \n                                    Public\n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options?: QueryCacheOptions)\n                    \n                \n                        \n                            \n                                Defined in src/utils/query-cache.ts:11\n                            \n                        \n\n                \n                    \n                            Initializes the QueryCache with optional maxSize, TTL, and eviction strategy.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        QueryCacheOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nObject containing maxSize, TTL, and eviction strategy.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cache\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LRUCache\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/query-cache.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cacheHits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/utils/query-cache.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cacheMisses\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/utils/query-cache.ts:11\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/query-cache.ts:32\n                        \n                    \n\n\n            \n                \n                        Retrieves a list of documents by the given key from the cache.\nTracks cache hits and misses.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     [] | undefined\n\n                        \n                            \n                                The array of DocumentWithId associated with the key, or undefined if not found or expired.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/query-cache.ts:69\n                        \n                    \n\n\n            \n                \n                        Returns cache hit/miss statistics.\n\n\n                        \n                            Returns :     literal type\n\n                        \n                            \n                                An object with hit and miss counts.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        invalidate\n                        \n                    \n                \n            \n            \n                \n                        \n                    invalidate(key?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/query-cache.ts:57\n                        \n                    \n\n\n            \n                \n                        Invalidates (removes) a cache entry by key, or clears the entire cache if no key is provided.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional key to remove from the cache. If not provided, the entire cache is cleared.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        set\n                        \n                    \n                \n            \n            \n                \n                        \n                    set(key: string, value: DocumentWithId[], ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/query-cache.ts:49\n                        \n                    \n\n\n            \n                \n                        Adds or updates a list of documents in the cache.\nSupports custom TTL for each entry.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key of the cache entry.\n\n\n                                            \n                                        \n                                        \n                                                value\n                                            \n                                                            DocumentWithId[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe array of DocumentWithId to cache.\n\n\n                                            \n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional TTL for this specific entry, overriding global TTL.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { LRUCache } from './lru-cache';\nimport { DocumentWithId, QueryCacheOptions } from '../types';\n\nexport class QueryCache {\n  // Create an LRUCache instance that stores string keys and arrays of DocumentWithId as values\n  private cache: LRUCache[]>;\n\n  // Metrics for cache hits and misses\n  private cacheHits: number = 0;\n\n  private cacheMisses: number = 0;\n\n  /**\n     * Initializes the QueryCache with optional maxSize, TTL, and eviction strategy.\n     * @param options - Object containing maxSize, TTL, and eviction strategy.\n     */\n  constructor(options?: QueryCacheOptions) {\n    const { maxSize = 1000, ttl, evictionStrategy = 'LRU' } = options || {};\n    this.cache = new LRUCache[]>({\n      maxSize,\n      ttl,\n      evictionStrategy,\n    });\n  }\n\n  /**\n     * Retrieves a list of documents by the given key from the cache.\n     * Tracks cache hits and misses.\n     * @param key - The key to retrieve.\n     * @returns The array of DocumentWithId associated with the key, or undefined if not found or expired.\n     */\n  public get(key: string): DocumentWithId[] | undefined {\n    const result = this.cache.get(key);\n    if (result) {\n      this.cacheHits += 1;\n    } else {\n      this.cacheMisses += 1;\n    }\n    return result;\n  }\n\n  /**\n     * Adds or updates a list of documents in the cache.\n     * Supports custom TTL for each entry.\n     * @param key - The key of the cache entry.\n     * @param value - The array of DocumentWithId to cache.\n     * @param ttl - Optional TTL for this specific entry, overriding global TTL.\n     */\n  public set(key: string, value: DocumentWithId[], ttl?: number): void {\n    this.cache.set(key, value, ttl); // Allow custom TTL per entry\n  }\n\n  /**\n     * Invalidates (removes) a cache entry by key, or clears the entire cache if no key is provided.\n     * @param key - Optional key to remove from the cache. If not provided, the entire cache is cleared.\n     */\n  public invalidate(key?: string): void {\n    if (key) {\n      this.cache.delete(key);\n    } else {\n      this.cache.clear();\n    }\n  }\n\n  /**\n     * Returns cache hit/miss statistics.\n     * @returns An object with hit and miss counts.\n     */\n  public getStats(): { hits: number; misses: number } {\n    return {\n      hits: this.cacheHits,\n      misses: this.cacheMisses,\n    };\n  }\n}\n\nexport default QueryCache;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QueryCacheOptions.html":{"url":"interfaces/QueryCacheOptions.html","title":"interface - QueryCacheOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QueryCacheOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            LRUCacheOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            evictionStrategy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ttl\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        evictionStrategy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        evictionStrategy:     \"LRU\" | \"FIFO\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"LRU\" | \"FIFO\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ttl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ttl:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type ComparisonOperator =\n    | '$eq'\n    | '$neq'\n    | '$gt'\n    | '$gte'\n    | '$lt'\n    | '$lte'\n    | '$in'\n    | '$nin'\n    | 'custom'\n    | '$regex';\n\n/**\n * Represents a unique identifier for a MEMOZ object.\n * This type can be enhanced with stricter typing rules if desired.\n */\nexport type MEMOZID = string & { __brand__: 'MEMOZID' };\n\n/**\n * Defines valid regex options for regex operations.\n * Supported options include:\n * - 'i': Case-insensitive matching\n * - 'g': Global search\n * - 'm': Multiline mode\n * - 's': Dot all (dot matches newline)\n * - 'u': Unicode matching\n * - 'y': Sticky matching\n */\nexport type RegexOptions = 'i' | 'g' | 'm' | 's' | 'u' | 'y';\n\n/**\n * Represents a condition using a regular expression.\n * The condition includes a regex pattern and optional flags.\n */\nexport type RegexCondition = {\n    /**\n     * The regex pattern, which can be a string or a RegExp object.\n     */\n    $regex: string | RegExp;\n\n    /**\n     * Optional regex options to modify the regex behavior.\n     */\n    $options?: RegexOptions;\n};\n\n/**\n * Defines the valid types that can be used as values in conditions.\n * This includes primitive types, arrays, objects, and RegexCondition.\n */\nexport type ValueTypes = string | number | boolean | Date | any[] | object | RegexCondition | Record;\n\n/**\n * Represents a simple condition for filtering data.\n * It includes a field, an operator, a value, and an optional custom comparison function.\n */\nexport interface SimpleCondition {\n    /**\n     * The field in the object to evaluate.\n     */\n    field: keyof T;\n\n    /**\n     * The operator used for the comparison.\n     */\n    operator: ComparisonOperator;\n\n    /**\n     * The value to compare against the field.\n     */\n    value: ValueTypes;\n\n    /**\n     * An optional custom comparison function for more complex comparisons.\n     * Takes two arguments and returns a boolean.\n     */\n    customCompare?: (a: any, b: any) => boolean;\n}\n\n/**\n * Defines a node structure for logical conditions.\n * Nodes can be composed of AND/OR logic or simple conditions.\n */\nexport type ConditionNode =\n    | { $and: ConditionNode[] } // All conditions must be true.\n    | { $or: ConditionNode[] } // At least one condition must be true.\n    | SimpleCondition; // A simple condition.\n\n/**\n * Represents a document with an associated unique identifier.\n * The document type is extended with an id of type MEMOZID and can include additional properties.\n */\nexport type DocumentWithId = T & { id: MEMOZID; };\n\n/**\n * Represents the result of an update operation affecting multiple documents.\n * It includes a success flag, the number of documents updated, and the documents themselves.\n */\nexport type UpdateManyResult = {\n    updated: boolean; // Indicates if the update was successful.\n    n: number; // The number of documents updated.\n    documents: DocumentWithId[]; // The updated documents.\n};\n\n/**\n * Options for configuring the Memoz storage and behavior.\n */\nexport interface MemozOptions {\n    /**\n     * Optional path for storing data on disk.\n     */\n    storagePath?: string;\n\n    /**\n     * Flag indicating if data should persist to disk.\n     */\n    persistToDisk?: boolean;\n\n    /**\n     * Flag indicating if mutex should be used for concurrent access.\n     */\n    useMutex?: boolean;\n}\n\n// Modify the FuzzySearchOptions to include custom scoring logic\nexport interface FuzzySearchOptions {\n    maxDistance?: number;\n    nGramSize?: number;\n    fieldWeights?: { [key in string]?: number }; // Optional weights for fields\n    scoringStrategy?: 'default' | 'tokenCount' | 'custom'; // Strategy for scoring\n    customScoringFn?: (\n      token: string,\n      fieldToken: string,\n      distance: number,\n      fieldWeight: number,\n      options: FuzzySearchOptions\n    ) => number; // Custom scoring function\n  }\n\nexport type EvictionStrategy = 'LRU' | 'FIFO';\n\nexport interface LRUCacheOptions {\n    maxSize: number;\n    ttl?: number;\n    onEvict?: (key: K, value: V) => void;\n    evictionStrategy?: EvictionStrategy;\n    stayAlive?: boolean;\n}\n\nexport interface QueryCacheOptions extends LRUCacheOptions[]> {\n    ttl?: number;\n    evictionStrategy?: 'LRU' | 'FIFO';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchEngine.html":{"url":"classes/SearchEngine.html","title":"class - SearchEngine","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchEngine\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/search-engine.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                db\n                            \n                            \n                                    Private\n                                levenshteinCache\n                            \n                            \n                                    Private\n                                normalizationCache\n                            \n                            \n                                    Private\n                                resultLimit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                levenshteinDistance\n                            \n                            \n                                    Public\n                                limit\n                            \n                            \n                                    Private\n                                    Static\n                                normalizeWithCache\n                            \n                            \n                                    Public\n                                search\n                            \n                            \n                                    Private\n                                    Static\n                                tokenize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(db: Map)\n                    \n                \n                        \n                            \n                                Defined in src/utils/search-engine.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                    Map\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/search-engine.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        levenshteinCache\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/search-engine.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        normalizationCache\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/search-engine.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        resultLimit\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/search-engine.ts:18\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        levenshteinDistance\n                        \n                    \n                \n            \n            \n                \n                        \n                    levenshteinDistance(a: string, b: string, maxDistance: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/search-engine.ts:62\n                        \n                    \n\n\n            \n                \n                        Optimized Levenshtein Distance implementation\nUses two rows instead of a full matrix to save memory\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                a\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                b\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                maxDistance\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        limit\n                        \n                    \n                \n            \n            \n                \n                        \n                    limit(limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/search-engine.ts:180\n                        \n                    \n\n\n            \n                \n                        Sets a limit on the number of results returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    Number.MAX_SAFE_INTEGER\n                                            \n\n                                            \n                                                    \nThe maximum number of results to return. default max number of results\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SearchEngine\n\n                        \n                            \n                                The SearchEngine instance for chaining.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        normalizeWithCache\n                        \n                    \n                \n            \n            \n                \n                        \n                    normalizeWithCache(text: string, cache: Map)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/search-engine.ts:31\n                        \n                    \n\n\n            \n                \n                        Normalize the string by lowercasing, removing accents, and trimming whitespace.\nExtended to remove punctuation and accents. Cached for performance.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                text\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cache\n                                            \n                                                        Map\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        search\n                        \n                    \n                \n            \n            \n                \n                        \n                    search(searchTerm: string, fields: ()[], options: FuzzySearchOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/search-engine.ts:106\n                        \n                    \n\n\n            \n                \n                        Main search function which performs fuzzy search based on the search term.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                searchTerm\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe term the user is searching for.\n\n\n                                            \n                                        \n                                        \n                                                fields\n                                            \n                                                        ()[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe fields to search within the objects.\n\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            FuzzySearchOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    { maxDistance: 2, nGramSize: 1 }\n                                            \n\n                                            \n                                                    \nOptions to configure max distance, field weights, n-grams, etc.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type[]\n\n                        \n                            \n                                Array of results with relevance score.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        tokenize\n                        \n                    \n                \n            \n            \n                \n                        \n                    tokenize(text: string, n: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/search-engine.ts:43\n                        \n                    \n\n\n            \n                \n                        Tokenizes the input string into words or terms.\nSupports n-grams and can be expanded to apply stemming/lemmatization.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                text\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                n\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FuzzySearchOptions } from '../types';\n\n/**\n * Removes accents from characters in a string.\n * This function converts accented characters (diacritics) to their base form.\n */\nexport function removeAccents(text: string): string {\n  return text.normalize('NFD').replace(/[\\u0300-\\u036f]/g, ''); // Unicode normalization + regex to strip accents\n}\n\nexport class SearchEngine {\n  private db: Map; // Generic database using a Map\n\n  private levenshteinCache: Map; // Cache for Levenshtein Distance\n\n  private normalizationCache: Map; // Cache for normalized values\n\n  private resultLimit: number | null; // Store the limit for results\n\n  constructor(db: Map) {\n    this.db = db;\n    this.levenshteinCache = new Map();\n    this.normalizationCache = new Map();\n    this.resultLimit = null; // Default limit to null (no limit)\n  }\n\n  /**\n   * Normalize the string by lowercasing, removing accents, and trimming whitespace.\n   * Extended to remove punctuation and accents. Cached for performance.\n   */\n  private static normalizeWithCache(text: string, cache: Map): string {\n    if (!cache.has(text)) {\n      const normalized = removeAccents(text.toLowerCase().trim()).replace(/[^\\w\\s]|_/g, '');\n      cache.set(text, normalized);\n    }\n    return cache.get(text)!;\n  }\n\n  /**\n   * Tokenizes the input string into words or terms.\n   * Supports n-grams and can be expanded to apply stemming/lemmatization.\n   */\n  private static tokenize(text: string, n: number = 1): string[] {\n    const words = text.split(/\\s+/); // Splits by whitespace\n\n    // Generate n-grams if requested\n    if (n > 1) {\n      const nGrams: string[] = [];\n      for (let i = 0; i  maxDistance) {\n      return maxDistance + 1; // Early exit if difference exceeds maxDistance\n    }\n\n    let prevRow = Array(a.length + 1).fill(0);\n    let currRow = Array(a.length + 1).fill(0);\n\n    for (let i = 0; i  {\n      let score = 0;\n\n      fields.forEach((field) => {\n        const fieldValue = item[field];\n        if (typeof fieldValue === 'string') {\n          const normalizedFieldValue = SearchEngine.normalizeWithCache(fieldValue, this.normalizationCache);\n          const fieldTokens = SearchEngine.tokenize(normalizedFieldValue, nGramSize);\n          const fieldWeight = fieldWeights[field as string] || 1;\n\n          searchTokens.forEach((token) => {\n            fieldTokens.forEach((fieldToken) => {\n              const distance = this.levenshteinDistance(token, fieldToken, maxDistance);\n\n              if (distance  0) {\n        results.push({ item, score });\n      }\n    });\n\n    // Sort results by highest score\n    const sortedResults = results.sort((a, b) => b.score - a.score);\n\n    // Apply limit if set\n    return this.resultLimit ? sortedResults.slice(0, this.resultLimit) : sortedResults;\n  }\n\n  /**\n   * Sets a limit on the number of results returned.\n   * @param limit - The maximum number of results to return. default max number of results\n   * @returns The SearchEngine instance for chaining.\n   */\n  public limit(limit: number = Number.MAX_SAFE_INTEGER): SearchEngine {\n    this.resultLimit = limit;\n    return this;\n  }\n}\n\nexport default SearchEngine;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Shard.html":{"url":"classes/Shard.html","title":"class - Shard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Shard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/shared.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                db\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addDocument\n                            \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                deleteById\n                            \n                            \n                                    Public\n                                getById\n                            \n                            \n                                    Public\n                                getDocuments\n                            \n                            \n                                    Public\n                                partitionDocumentsBy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/utils/shared.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        addDocument\n                        \n                    \n                \n            \n            \n                \n                        \n                    addDocument(doc: DocumentWithId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/shared.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                doc\n                                            \n                                                            DocumentWithId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clear\n                        \n                    \n                \n            \n            \n                \n                        \n                    clear()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/shared.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        deleteById\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/shared.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DocumentWithId | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/shared.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DocumentWithId | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getDocuments\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDocuments()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/shared.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         DocumentWithId[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        partitionDocumentsBy\n                        \n                    \n                \n            \n            \n                \n                        \n                    partitionDocumentsBy(field)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/shared.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                field\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DocumentWithId } from '../types';\n\nexport class Shard {\n  private db: Map> = new Map();\n\n  // Add user to this shard\n  public addDocument(doc: DocumentWithId): void {\n    this.db.set(doc.id, doc);\n  }\n\n  // Get all documents\n  public getDocuments(): DocumentWithId[] {\n    return Array.from(this.db.values());\n  }\n\n  // Partition documents by a specific field, e.g., age\n  public partitionDocumentsBy(field: keyof T): { [key: string]: DocumentWithId[] } {\n    const partitions: { [key: string]: DocumentWithId[] } = {};\n\n    this.getDocuments().forEach((doc) => {\n      const key = String(doc[field]);\n      if (!partitions[key]) {\n        partitions[key] = [];\n      }\n      partitions[key].push(doc);\n    });\n\n    return partitions;\n  }\n\n  public getById(id: string): DocumentWithId | undefined {\n    return this.db.get(id);\n  }\n\n  public deleteById(id: string): DocumentWithId | undefined {\n    const doc = this.db.get(id);\n    if (doc) {\n      this.db.delete(id);\n    }\n    return doc;\n  }\n\n  public clear(): void {\n    this.db.clear();\n  }\n}\n\nexport default Shard;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SimpleCondition.html":{"url":"interfaces/SimpleCondition.html","title":"interface - SimpleCondition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SimpleCondition\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a simple condition for filtering data.\nIt includes a field, an operator, a value, and an optional custom comparison function.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            customCompare\n                                        \n                                \n                                \n                                        \n                                            field\n                                        \n                                \n                                \n                                        \n                                            operator\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        customCompare\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customCompare:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional custom comparison function for more complex comparisons.\nTakes two arguments and returns a boolean.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    The field in the object to evaluate.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        operator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        operator:         ComparisonOperator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ComparisonOperator\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The operator used for the comparison.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         ValueTypes\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ValueTypes\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The value to compare against the field.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export type ComparisonOperator =\n    | '$eq'\n    | '$neq'\n    | '$gt'\n    | '$gte'\n    | '$lt'\n    | '$lte'\n    | '$in'\n    | '$nin'\n    | 'custom'\n    | '$regex';\n\n/**\n * Represents a unique identifier for a MEMOZ object.\n * This type can be enhanced with stricter typing rules if desired.\n */\nexport type MEMOZID = string & { __brand__: 'MEMOZID' };\n\n/**\n * Defines valid regex options for regex operations.\n * Supported options include:\n * - 'i': Case-insensitive matching\n * - 'g': Global search\n * - 'm': Multiline mode\n * - 's': Dot all (dot matches newline)\n * - 'u': Unicode matching\n * - 'y': Sticky matching\n */\nexport type RegexOptions = 'i' | 'g' | 'm' | 's' | 'u' | 'y';\n\n/**\n * Represents a condition using a regular expression.\n * The condition includes a regex pattern and optional flags.\n */\nexport type RegexCondition = {\n    /**\n     * The regex pattern, which can be a string or a RegExp object.\n     */\n    $regex: string | RegExp;\n\n    /**\n     * Optional regex options to modify the regex behavior.\n     */\n    $options?: RegexOptions;\n};\n\n/**\n * Defines the valid types that can be used as values in conditions.\n * This includes primitive types, arrays, objects, and RegexCondition.\n */\nexport type ValueTypes = string | number | boolean | Date | any[] | object | RegexCondition | Record;\n\n/**\n * Represents a simple condition for filtering data.\n * It includes a field, an operator, a value, and an optional custom comparison function.\n */\nexport interface SimpleCondition {\n    /**\n     * The field in the object to evaluate.\n     */\n    field: keyof T;\n\n    /**\n     * The operator used for the comparison.\n     */\n    operator: ComparisonOperator;\n\n    /**\n     * The value to compare against the field.\n     */\n    value: ValueTypes;\n\n    /**\n     * An optional custom comparison function for more complex comparisons.\n     * Takes two arguments and returns a boolean.\n     */\n    customCompare?: (a: any, b: any) => boolean;\n}\n\n/**\n * Defines a node structure for logical conditions.\n * Nodes can be composed of AND/OR logic or simple conditions.\n */\nexport type ConditionNode =\n    | { $and: ConditionNode[] } // All conditions must be true.\n    | { $or: ConditionNode[] } // At least one condition must be true.\n    | SimpleCondition; // A simple condition.\n\n/**\n * Represents a document with an associated unique identifier.\n * The document type is extended with an id of type MEMOZID and can include additional properties.\n */\nexport type DocumentWithId = T & { id: MEMOZID; };\n\n/**\n * Represents the result of an update operation affecting multiple documents.\n * It includes a success flag, the number of documents updated, and the documents themselves.\n */\nexport type UpdateManyResult = {\n    updated: boolean; // Indicates if the update was successful.\n    n: number; // The number of documents updated.\n    documents: DocumentWithId[]; // The updated documents.\n};\n\n/**\n * Options for configuring the Memoz storage and behavior.\n */\nexport interface MemozOptions {\n    /**\n     * Optional path for storing data on disk.\n     */\n    storagePath?: string;\n\n    /**\n     * Flag indicating if data should persist to disk.\n     */\n    persistToDisk?: boolean;\n\n    /**\n     * Flag indicating if mutex should be used for concurrent access.\n     */\n    useMutex?: boolean;\n}\n\n// Modify the FuzzySearchOptions to include custom scoring logic\nexport interface FuzzySearchOptions {\n    maxDistance?: number;\n    nGramSize?: number;\n    fieldWeights?: { [key in string]?: number }; // Optional weights for fields\n    scoringStrategy?: 'default' | 'tokenCount' | 'custom'; // Strategy for scoring\n    customScoringFn?: (\n      token: string,\n      fieldToken: string,\n      distance: number,\n      fieldWeight: number,\n      options: FuzzySearchOptions\n    ) => number; // Custom scoring function\n  }\n\nexport type EvictionStrategy = 'LRU' | 'FIFO';\n\nexport interface LRUCacheOptions {\n    maxSize: number;\n    ttl?: number;\n    onEvict?: (key: K, value: V) => void;\n    evictionStrategy?: EvictionStrategy;\n    stayAlive?: boolean;\n}\n\nexport interface QueryCacheOptions extends LRUCacheOptions[]> {\n    ttl?: number;\n    evictionStrategy?: 'LRU' | 'FIFO';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TransactionManager.html":{"url":"classes/TransactionManager.html","title":"class - TransactionManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TransactionManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/transaction-manager.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                db\n                            \n                            \n                                    Private\n                                dbSnapshot\n                            \n                            \n                                    Private\n                                transactionDb\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                beginTransaction\n                            \n                            \n                                    Public\n                                commitTransaction\n                            \n                            \n                                    Public\n                                getCurrentDb\n                            \n                            \n                                    Public\n                                rollbackTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(db: Map>)\n                    \n                \n                        \n                            \n                                Defined in src/utils/transaction-manager.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                    Map>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map>\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/transaction-manager.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dbSnapshot\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map> | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/utils/transaction-manager.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        transactionDb\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map> | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/utils/transaction-manager.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        beginTransaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    beginTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/transaction-manager.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commitTransaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    commitTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/transaction-manager.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getCurrentDb\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCurrentDb()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/transaction-manager.ts:47\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Map>\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        rollbackTransaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    rollbackTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/transaction-manager.ts:34\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DocumentWithId, MEMOZID } from '../types';\n\nexport class TransactionManager {\n  private db: Map>;\n\n  private transactionDb: Map> | null = null;\n\n  private dbSnapshot: Map> | null = null;\n\n  constructor(db: Map>) {\n    this.db = db;\n  }\n\n  public beginTransaction(): void {\n    if (this.transactionDb) {\n      throw new Error('Transaction already in progress');\n    }\n    // Take a snapshot of the current state before the transaction begins\n    this.dbSnapshot = new Map(this.db);\n    // Initialize a transaction state, which will hold temporary changes\n    this.transactionDb = new Map(this.db);\n  }\n\n  public commitTransaction(): void {\n    if (!this.transactionDb) {\n      throw new Error('No transaction in progress');\n    }\n    // Apply the changes made in the transaction to the main db\n    this.db = this.transactionDb;\n    this.transactionDb = null;\n    this.dbSnapshot = null; // Clear the snapshot after committing\n  }\n\n  public rollbackTransaction(): void {\n    if (!this.transactionDb) {\n      throw new Error('No transaction in progress');\n    }\n    if (!this.dbSnapshot) {\n      throw new Error('No snapshot available for rollback');\n    }\n    // Restore the original db state from the snapshot\n    this.db = this.dbSnapshot;\n    this.transactionDb = null;\n    this.dbSnapshot = null; // Clear the snapshot after rollback\n  }\n\n  public getCurrentDb(): Map> {\n    return this.transactionDb || this.db;\n  }\n}\n\nexport default TransactionManager;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n4.1.0 (2024-10-20)\n4.0.4 (2024-10-20)\n4.0.3 (2024-10-20)\n4.0.2 (2024-10-18)\nDocumentation Changes\n\nupdate description (42415f3b)\n\n4.0.1 (2024-10-18)\nContinuous Integration\n\nremove docs from pipeline (be1b5db1)\n\n4.0.1 (2024-10-17)\n4.0.0 (2024-10-17)\nNew Features\n\nadd new features like (transaction, presist on disk, etc) (4642966f)\n\n3.1.0 (2024-10-08)\n3.0.0 (2024-10-08)\n2.2.0 (2024-09-16)\nContinuous Integration\n\nresolve pipeline (de8a28fa)\n\n2.1.2 (2022-02-19)\nChores\n\nupdate deps (e81eee88)\n\nBug Fixes\n\nupdate docs (ac42869a)\n\nOther Changes\n\nmiladezzat/memoz into gh-pages (ae7913f1)\n\n2.1.1 (2022-02-11)\nChores\n\nupdate deps (75a1f4f1)\n\nDocumentation Changes\n\nupdate docs (4e9d1718)\n\n2.1.0 (2022-02-09)\nChores\n\nupdate docs (2886b372)\n\nNew Features\n\nsetup docs (69b61d8a)\n\n2.0.1 (2021-08-04)\nChores\n\nupdate dpes (dd121257)\nupdate deps (c411d805)\nupdate deps (4173ee67)\n\nDocumentation Changes\n\nupdate js docs (d687504c)\nupdate docs (75a86338)\n\n2.0.0 (2021-07-30)\nNew Features\n\nupdate create method (5d244251)\n\n1.1.3 (2021-07-28)\nChores\n\nupdate package  json and add husky (e9322431)\n\nContinuous Integration\n\nupdate ci (c0bab78d)\n\nRefactors\n\nsetup environment (95dd6d1e)\nupdate some codes (9b8d080d)\n\n1.1.3 (2021-07-28)\nChores\n\nupdate package  json and add husky (e9322431)\n\nContinuous Integration\n\nupdate ci (c0bab78d)\n\nRefactors\n\nsetup environment (95dd6d1e)\nupdate some codes (9b8d080d)\n\n1.1.2 (2021-07-28)\nDocumentation Changes\n\nupdate docs (5bfdc44a)\n\n1.1.1 (2021-07-28)\nBug Fixes\n\nsolve package (5eef46c0)\n\n1.1.0 (2021-07-27)\nChores\n\nupdate package json (029ad1fa)\n\nDocumentation Changes\n\nupdate docs (276f3b47)\n\nNew Features\n\nadd deleteone function (deae21e0)\n\n1.0.0 (2021-07-26)\nDocumentation Changes\n\nupdate docs (76398cb0)\n\nNew Features\n\nupdate memoz methods (85fb8daf)\nsetup (6d760f53)\n\nBug Fixes\n\nsolve some bugs (4079a95a)\n\nTests\n\nadd unit testing (39424c77)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/constants/memoz-id.ts\n            \n            variable\n            MEMOZ_ID_PATTERN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants/memoz-id.ts\n            \n            variable\n            MEMOZ_ID_TEMPLATE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/memoz.ts\n            \n            class\n            Memoz\n            \n                76 %\n                (23/30)\n            \n        \n        \n            \n                \n                src/types.ts\n            \n            interface\n            FuzzySearchOptions\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/types.ts\n            \n            interface\n            LRUCacheOptions\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/types.ts\n            \n            interface\n            MemozOptions\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/types.ts\n            \n            interface\n            QueryCacheOptions\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types.ts\n            \n            interface\n            SimpleCondition\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/utils/evaluate-condition.ts\n            \n            variable\n            evaluateCondition\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/evaluate-node.ts\n            \n            variable\n            evaluateNode\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/evaluate-node.ts\n            \n            variable\n            memoCache\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/get-many-query-builder.ts\n            \n            class\n            QueryBuilder\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/utils/get-many-query-builder.ts\n            \n            function\n            createQueryBuilderProxy\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/get-many.ts\n            \n            variable\n            getMany\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/get-one.ts\n            \n            variable\n            getOne\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/helper.ts\n            \n            function\n            chunkArray\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/index-manager.ts\n            \n            class\n            IndexManager\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/utils/indexing.ts\n            \n            class\n            Indexing\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/utils/is-object.ts\n            \n            variable\n            isObject\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/is-valid-memoz-id.ts\n            \n            variable\n            isValidMemozId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/lru-cache.ts\n            \n            class\n            LRUCache\n            \n                0 %\n                (0/26)\n            \n        \n        \n            \n                \n                src/utils/memoz-id.ts\n            \n            function\n            memozId\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/mutex.ts\n            \n            class\n            Mutex\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/persistence-manager.ts\n            \n            class\n            PersistenceManager\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/utils/query-cache.ts\n            \n            class\n            QueryCache\n            \n                55 %\n                (5/9)\n            \n        \n        \n            \n                \n                src/utils/search-engine.ts\n            \n            class\n            SearchEngine\n            \n                45 %\n                (5/11)\n            \n        \n        \n            \n                \n                src/utils/search-engine.ts\n            \n            function\n            removeAccents\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/shared.ts\n            \n            class\n            Shard\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/utils/transaction-manager.ts\n            \n            class\n            TransactionManager\n            \n                0 %\n                (0/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            chunkArray   (src/.../helper.ts)\n                        \n                        \n                            createQueryBuilderProxy   (src/.../get-many-query-builder.ts)\n                        \n                        \n                            memozId   (src/.../memoz-id.ts)\n                        \n                        \n                            removeAccents   (src/.../search-engine.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        chunkArray\n                        \n                    \n                \n            \n            \n                \nchunkArray(array, size: number)\n                \n            \n\n\n\n\n            \n                \n                        Splits an array into smaller chunks of a specified size.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                array\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe array to split into chunks.\n\n\n                                            \n                                        \n                                        \n                                                size\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe size of each chunk.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     [][]\n\n                        \n                            \n                                \nAn array of chunks.\n\n\n                            \n                \n            \n        \n    \n    src/utils/get-many-query-builder.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createQueryBuilderProxy\n                        \n                    \n                \n            \n            \n                \ncreateQueryBuilderProxy(builder: QueryBuilder)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                builder\n                                            \n                                                            QueryBuilder\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         QueryBuilder\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/utils/memoz-id.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        memozId\n                        \n                    \n                \n            \n            \n                \nmemozId()\n                \n            \n\n\n\n\n            \n                \n                        Generates a MEMOZID string based on a template and current timestamp.\n\n\n                        \n                            Returns :         MEMOZID\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/utils/search-engine.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        removeAccents\n                        \n                    \n                \n            \n            \n                \nremoveAccents(text: string)\n                \n            \n\n\n\n\n            \n                \n                        Removes accents from characters in a string.\nThis function converts accented characters (diacritics) to their base form.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                text\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nMemoz\n \n\nMemoz is an in-memory database that persists on disk, offering easy CRUD operations with a simple API. it supports document persistence to disk.\n\nMemoz\nInstallation\nUsage\n\n\n\nInstallation\nExample :npm i memoz\n# or\nyarn add memozUsage\nExample :import { Memoz, FuzzySearchOptions } from \"memoz\";\n\ninterface IUser {\n    readonly id?: string;\n    name: string;\n    age: number;\n}\n\nconst memoz = new Memoz({\n    persistToDisk: true,  // to allow persist data on disk - default false\n    storagePath: './data', // the location to persist data - default './data'\n    useMutex: true, //  Whether to use a mutex for thread safety - default false\n});\n\n\nasync function boot() {\n    // Uncomment to create and store users in the database\n    // const docs = Array.from({ length: 1000 }, (_, i) => ({ name: `User ${i}`, age: i }));\n    // await memoz.createMany(docs);\n\n    // Loop to get users with pagination and sorting to test caching\n    const totalPages = 2; // Define the total number of pages to iterate over\n    const usersPerPage = 10; // Number of users per page\n\n    for (let index = 0; index  {\n      const baseScore = fieldWeight * (1 / (distance + 1)); // Decrease score as distance increases\n      const titleBonus = fieldToken.includes(token) ? 1 : 0; // Bonus if the fieldToken contains the token\n      return baseScore + titleBonus; // Total score\n    };\n\n    // Example usage\n    const options: FuzzySearchOptions = {\n      maxDistance: 2,\n      scoringStrategy: 'custom',\n      customScoringFn,\n    };\n\n    // Perform a fuzzy search\n    const results = await memoz.fuzzySearch('User 999', ['age', 'name'], options);\n    console.log(results.slice(0, 2));\n  }\n}\n\n// Start the boot process\nboot();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2021 Milad E. Fahmy\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 4.1.0\n        \n            Description : Memoz is an in-memory database that persists on disk. The data model is key-value.\n        \n            Keywords : data, structure, database, redis, transaction, pipelining, performance, queue, nodejs, pubsub, backpressure, cache, ram, simple, storage, typescript, in-memory, disk, persist, key-value, string, list, set, sorted-set, hash\n        \n            Homepage : https://memoz.js.org\n        \n            Bugs : https://github.com/miladezzat/memoz/issues\n        \n            Repository : git+https://github.com/miladezzat/memoz.git\n        \n            Author : Milad E. Fahmy  (https://milad-ezzat.vercel.app)\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ComparisonOperator   (src/.../types.ts)\n                        \n                        \n                            ConditionNode   (src/.../types.ts)\n                        \n                        \n                            DocumentWithId   (src/.../types.ts)\n                        \n                        \n                            EvictionStrategy   (src/.../types.ts)\n                        \n                        \n                            MEMOZID   (src/.../types.ts)\n                        \n                        \n                            RegexCondition   (src/.../types.ts)\n                        \n                        \n                            RegexOptions   (src/.../types.ts)\n                        \n                        \n                            UpdateManyResult   (src/.../types.ts)\n                        \n                        \n                            ValueTypes   (src/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/types.ts\n    \n    \n        \n            \n                \n                    \n                    ComparisonOperator\n                \n            \n            \n                \n                    Defines comparison operators for query conditions.\nSupported operators include equality, inequality,\ngreater than, greater than or equal to, less than,\nless than or equal to, inclusion in a set,\nexclusion from a set, custom comparisons, and regex matching.\n\n                \n            \n            \n                \n                        \"$eq\" | \"$neq\" | \"$gt\" | \"$gte\" | \"$lt\" | \"$lte\" | \"$in\" | \"$nin\" | \"custom\" | \"$regex\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConditionNode\n                \n            \n            \n                \n                    Defines a node structure for logical conditions.\nNodes can be composed of AND/OR logic or simple conditions.\n\n                \n            \n            \n                \n                            literal type | literal type | SimpleCondition\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DocumentWithId\n                \n            \n            \n                \n                    Represents a document with an associated unique identifier.\nThe document type is extended with an id of type MEMOZID and can include additional properties.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EvictionStrategy\n                \n            \n            \n                \n                        \"LRU\" | \"FIFO\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MEMOZID\n                \n            \n            \n                \n                    Represents a unique identifier for a MEMOZ object.\nThis type can be enhanced with stricter typing rules if desired.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegexCondition\n                \n            \n            \n                \n                    Represents a condition using a regular expression.\nThe condition includes a regex pattern and optional flags.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegexOptions\n                \n            \n            \n                \n                    Defines valid regex options for regex operations.\nSupported options include:\n\n'i': Case-insensitive matching\n'g': Global search\n'm': Multiline mode\n's': Dot all (dot matches newline)\n'u': Unicode matching\n'y': Sticky matching\n\n\n                \n            \n            \n                \n                        \"i\" | \"g\" | \"m\" | \"s\" | \"u\" | \"y\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateManyResult\n                \n            \n            \n                \n                    Represents the result of an update operation affecting multiple documents.\nIt includes a success flag, the number of documents updated, and the documents themselves.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ValueTypes\n                \n            \n            \n                \n                    Defines the valid types that can be used as values in conditions.\nThis includes primitive types, arrays, objects, and RegexCondition.\n\n                \n            \n            \n                \n                            string | number | boolean | Date | any[] | object | RegexCondition | Record\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            evaluateCondition   (src/.../evaluate-condition.ts)\n                        \n                        \n                            evaluateNode   (src/.../evaluate-node.ts)\n                        \n                        \n                            getMany   (src/.../get-many.ts)\n                        \n                        \n                            getOne   (src/.../get-one.ts)\n                        \n                        \n                            isObject   (src/.../is-object.ts)\n                        \n                        \n                            isValidMemozId   (src/.../is-valid-memoz-id.ts)\n                        \n                        \n                            memoCache   (src/.../evaluate-node.ts)\n                        \n                        \n                            MEMOZ_ID_PATTERN   (src/.../memoz-id.ts)\n                        \n                        \n                            MEMOZ_ID_TEMPLATE   (src/.../memoz-id.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/evaluate-condition.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        evaluateCondition\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (datum: T, condition: SimpleCondition): boolean => {\n  const {\n    field,\n    operator,\n    value,\n    customCompare,\n  } = condition;\n\n  // If a custom comparison function is provided, use it.\n  if (customCompare) {\n    return customCompare(datum[field], value);\n  }\n\n  switch (operator) {\n    case '$eq':\n      return datum[field] === value;\n    case '$neq':\n      return datum[field] !== value;\n    case '$gt':\n      return datum[field] > value;\n    case '$gte':\n      return datum[field] >= value;\n    case '$lt':\n      return datum[field] \n                    \n                \n\n            \n                \n                    Evaluates a condition against a given datum (data object).\nThis function supports various comparison operators including equality,\ninequality, greater than, less than, inclusion/exclusion in a set,\nand regular expression matching.\n\n                \n            \n\n        \n    \n\n    src/utils/evaluate-node.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        evaluateNode\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (datum: T, node: ConditionNode): boolean => {\n  // Retrieve or initialize the cache for the current datum, ensuring type safety\n  let datumCache: Map, boolean> | undefined = memoCache.get(datum);\n  if (!datumCache) {\n    datumCache = new Map, boolean>();\n    memoCache.set(datum, datumCache);\n  }\n\n  // Check if the result is already cached for this condition node\n  if (datumCache.has(node)) {\n    return datumCache.get(node)!; // Use the cached result, safely asserting it exists\n  }\n\n  let result: boolean;\n\n  // Evaluate the condition\n  if ('$and' in node) {\n    // AND logic: all conditions must pass\n    result = node.$and.every((subNode) => evaluateNode(datum, subNode));\n  } else if ('$or' in node) {\n    // OR logic: at least one condition must pass\n    result = node.$or.some((subNode) => evaluateNode(datum, subNode));\n  } else {\n    // Handle simple condition\n    result = evaluateCondition(datum, node);\n  }\n\n  // Cache the result for the current node and datum\n  datumCache.set(node, result);\n\n  return result;\n}\n                    \n                \n\n            \n                \n                    Evaluates a logical condition node against a given datum (data object) with memoization.\nThis function supports both AND and OR logical operations:\n\nFor AND ($and), all conditions must evaluate to true.\nFor OR ($or), at least one condition must evaluate to true.\nIf the node is a simple condition, it will be evaluated directly.\n\nMemoization is applied to avoid redundant computations of the same condition for the same datum.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        memoCache\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new WeakMap, boolean>>()\n                    \n                \n\n            \n                \n                    A cache that maps a datum to a Map of condition nodes and their evaluation results.\nThe WeakMap ensures that the cache is memory-safe and automatically cleans up\nwhen the datum is no longer in use.\n\n                \n            \n\n        \n    \n\n    src/utils/get-many.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getMany\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (data: T[], query: ConditionNode): T[] => data.filter((datum) => evaluateNode(datum, query))\n                    \n                \n\n            \n                \n                    Filters the dataset to find all items that match the provided condition node.\nThis function uses evaluateNode to efficiently evaluate each datum against\nthe condition node, leveraging memoization to avoid redundant computations.\n\n                \n            \n\n        \n    \n\n    src/utils/get-one.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getOne\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (data: T[], query: ConditionNode): T | undefined => data.find((datum) => evaluateNode(datum, query))\n                    \n                \n\n            \n                \n                    Finds the first item in the dataset that matches the provided condition node.\nThis function uses evaluateNode to efficiently evaluate each datum against\nthe condition node, stopping as soon as a match is found to improve performance.\n\n                \n            \n\n        \n    \n\n    src/utils/is-object.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isObject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (value: unknown): boolean => typeof value === 'object'\n        && value !== null\n        && !Array.isArray(value)\n        && Reflect.ownKeys(value).length > 0\n                    \n                \n\n            \n                \n                    Checks if the provided value is a non-null object with at least one own property (excluding arrays).\n\n                \n            \n\n        \n    \n\n    src/utils/is-valid-memoz-id.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isValidMemozId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (memozId: string): memozId is MEMOZID => memozId.length >= 36 && MEMOZ_ID_PATTERN.test(memozId)\n                    \n                \n\n\n        \n    \n\n    src/constants/memoz-id.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MEMOZ_ID_PATTERN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[A-F\\d]{8}-[A-F\\d]{4}-4[A-F\\d]{3}-[89AB][A-F\\d]{3}-[A-F\\d]{12}-[A-Za-z0-9]{9}$/i\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MEMOZ_ID_TEMPLATE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
