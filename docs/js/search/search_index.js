var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/IndexManager.html",[0,0.116,1,2.035]],["body/classes/IndexManager.html",[0,0.12,1,3.169,2,0.905,3,0.63,4,0.63,5,0.552,6,4.259,7,1.833,8,0.428,9,0.639,10,1.211,11,4.564,12,1.209,13,1.881,14,2.295,15,4.054,16,4.054,17,4.054,18,0.555,19,0.045,20,2.272,21,0.841,22,0.552,23,1.074,24,1.696,25,2.477,26,2.477,27,1.292,28,4.054,29,2.941,30,3.036,31,1.361,32,1.211,33,0.83,34,1.43,35,1.386,36,4.054,37,0.72,38,2.477,39,2.477,40,2.941,41,1.209,42,4.054,43,2.477,44,3.723,45,1.209,46,1.518,47,0.905,48,1.137,49,0.841,50,3.036,51,3.036,52,1.211,53,3.036,54,1.146,55,0.037,56,2.154,57,3.036,58,3.036,59,3.036,60,3.036,61,3.036,62,3.036,63,3.036,64,3.036,65,3.036,66,3.036,67,0.031]],["title/classes/Indexing.html",[0,0.116,40,1.77]],["body/classes/Indexing.html",[0,0.11,2,0.824,3,0.573,4,0.573,5,0.502,8,0.44,9,0.6,10,1.427,12,1.134,13,1.798,18,0.613,19,0.045,20,1.824,21,0.573,23,1.102,24,1.739,27,1.243,31,1.465,32,1.304,33,0.893,34,2.049,35,1.444,37,0.848,39,4.008,40,2.828,45,1.397,46,1.034,47,0.824,48,1.034,49,0.789,52,1.154,54,1.023,55,0.029,56,2.489,67,0.029,68,2.253,69,3.102,70,3.803,71,3.803,72,1.301,73,3.803,74,3.803,75,2.762,76,3.803,77,2.762,78,4.243,79,3.803,80,2.816,81,2.762,82,3.803,83,2.762,84,3.803,85,2.762,86,2.762,87,2.762,88,1.297,89,3.803,90,4.348,91,2.762,92,2.762,93,2.762,94,2.762,95,0.923,96,2.762,97,2.762,98,2.762,99,2.021,100,2.253,101,2.253,102,2.762,103,2.762,104,3.102,105,2.253,106,3.102,107,2.762,108,2.762,109,2.762,110,2.762]],["title/classes/LRUCache.html",[0,0.116,111,1.381]],["body/classes/LRUCache.html",[0,0.056,2,0.421,3,0.293,4,0.293,5,0.256,8,0.132,9,0.361,10,1.494,12,0.683,14,1.569,18,0.604,19,0.045,20,1.397,21,0.76,22,0.868,23,0.539,24,1.822,27,1.308,31,1.328,32,1.182,33,0.927,37,0.578,41,1.365,45,1.506,49,0.6,52,1.308,54,1.102,55,0.017,56,1.217,67,0.017,72,0.664,88,1.397,95,1.44,111,1.363,112,3.304,113,0.664,114,1.363,115,2.36,116,2.36,117,2.367,118,2.36,119,2.37,120,2.36,121,2.989,122,2.989,123,2.764,124,2.717,125,2.291,126,2.291,127,2.725,128,1.537,129,2.291,130,2.291,131,2.291,132,2.717,133,2.717,134,2.717,135,1.869,136,2.009,137,2.36,138,2.36,139,1.383,140,1.569,141,2.291,142,1.383,143,1.151,144,1.735,145,1.869,146,1.41,147,1.869,148,1.41,149,1.41,150,1.41,151,1.41,152,0.858,153,1.41,154,1.808,155,1.41,156,1.41,157,1.41,158,1.41,159,1.869,160,4.296,161,1.41,162,1.869,163,1.41,164,1.41,165,1.41,166,1.079,167,1.383,168,1.41,169,3.515,170,1.869,171,2.717,172,1.41,173,1.537,174,1.869,175,1.41,176,1.41,177,1.383,178,1.151,179,2.602,180,1.41,181,1.41,182,1.41,183,1.383,184,1.41,185,0.852,186,1.41,187,1.41,188,1.41,189,1.41,190,1.41,191,1.41,192,1.41,193,1.41,194,1.77,195,1.537,196,0.332,197,1.77,198,1.151,199,1.151,200,1.151,201,1.151,202,1.151,203,1.151,204,1.151,205,1.151,206,1.747,207,2.36,208,1.869,209,2.36,210,1.151,211,2.011,212,1.869,213,1.151,214,2.36,215,1.869,216,1.869,217,1.151,218,1.151,219,1.151,220,1.383,221,2.989,222,2.36,223,2.717,224,1.869,225,1.151,226,1.869,227,1.151,228,2.717,229,1.869,230,1.151,231,1.383,232,1.151,233,1.151,234,1.151,235,1.869,236,1.151,237,1.151,238,1.151,239,1.151,240,1.151,241,1.151,242,1.151,243,1.151,244,0.749,245,1.151,246,2.717,247,1.869,248,0.852,249,1.383,250,0.749,251,1.151,252,1.151,253,1.151,254,1.151,255,1.151,256,1.151,257,0.979,258,1.869,259,2.725,260,2.36,261,1.151,262,1.363,263,0.749]],["title/interfaces/LRUCacheOptions.html",[140,1.381,196,0.69]],["body/interfaces/LRUCacheOptions.html",[0,0.077,3,0.405,4,0.405,5,0.355,8,0.183,9,0.467,10,1.375,14,0.92,18,0.513,19,0.046,20,1.241,21,0.405,22,0.819,23,0.459,33,0.876,37,0.467,41,1.471,45,1.437,49,0.741,52,1.405,54,1.203,55,0.022,67,0.022,88,1.277,95,1.506,111,1.394,112,1.179,113,0.92,114,0.92,115,1.593,116,1.593,117,2.717,118,1.593,119,2.826,120,1.593,121,3.675,122,3.675,123,2.98,124,1.593,127,2.48,128,1.038,132,1.593,133,1.593,134,1.593,136,1.356,137,1.593,138,1.593,139,1.179,140,1.683,142,1.179,144,1.8,145,1.593,147,1.593,152,1.108,154,1.89,159,1.593,160,4.026,162,1.593,166,0.92,167,1.179,169,3.493,170,1.593,171,2.413,173,1.572,174,1.593,179,2.826,183,1.179,194,2.117,195,1.898,196,0.459,197,2.117,198,1.593,199,1.593,200,1.593,201,1.593,202,1.593,203,1.593,204,1.593,205,1.593,206,2.156,207,2.914,208,2.413,209,2.914,210,1.593,211,2.406,212,2.413,213,1.593,214,2.914,215,2.413,216,2.413,217,1.593,218,1.593,219,1.593,220,1.786,221,3.493,222,2.914,223,3.25,224,2.413,225,1.593,226,2.413,227,1.593,228,3.25,229,2.413,230,1.593,231,1.786,232,1.593,233,1.593,234,1.593,235,2.413,236,1.593,237,1.593,238,1.593,239,1.593,240,1.593,241,1.593,242,1.593,243,1.593,244,1.038,245,1.593,246,3.25,247,2.413,248,1.179,249,1.786,250,1.038,251,1.593,252,1.593,253,1.593,254,1.593,255,1.593,256,1.593,257,1.356,258,2.413,259,3.128,260,2.914,261,1.593,262,1.683,263,1.038,264,1.038]],["title/interfaces/MemozOptions.html",[196,0.69,265,1.77]],["body/interfaces/MemozOptions.html",[3,0.692,4,0.692,5,0.606,8,0.313,9,0.68,18,0.63,19,0.045,22,0.606,33,0.974,35,1.145,37,0.825,47,1.507,49,1.132,55,0.033,67,0.033,80,2.54,88,0.995,99,1.773,144,1.115,154,2.319,196,1.015,264,1.773,265,2.604,266,2.014,267,3.051,268,3.509,269,3.509,270,2.995,271,2.014,272,2.014,273,2.014,274,2.014,275,2.014,276,2.317,277,2.317,278,1.773,279,2.722,280,2.722,281,2.317,282,2.722,283,2.722,284,2.722,285,2.032,286,2.014,287,2.317,288,2.292,289,2.317,290,2.317,291,2.317,292,2.317,293,2.722,294,2.722,295,1.773]],["title/classes/Mutex.html",[0,0.116,296,1.77]],["body/classes/Mutex.html",[0,0.14,2,1.049,3,0.73,4,0.73,5,0.639,8,0.33,9,0.704,10,1.3,12,1.33,13,1.638,18,0.558,19,0.045,21,0.926,22,0.811,24,1.491,27,0.933,31,1.33,32,0.933,33,0.639,41,1.33,45,1.049,49,0.926,52,1.184,54,0.828,55,0.034,67,0.034,152,1.317,173,2.826,262,2.102,288,2.371,296,3.373,297,2.869,298,4.462,299,4.462,300,3.517,301,4.462,302,3.517,303,5.154,304,3.517,305,3.517,306,4.462,307,3.098,308,3.517,309,2.869,310,3.517,311,3.517,312,3.64,313,3.517,314,2.869,315,3.517,316,3.517,317,3.517,318,3.517,319,3.517,320,3.517]],["title/classes/PersistenceManager.html",[0,0.116,321,2.035]],["body/classes/PersistenceManager.html",[0,0.109,2,0.818,3,0.57,4,0.57,5,0.849,7,1.657,8,0.258,9,0.597,10,1.425,12,1.129,13,1.694,14,1.293,18,0.532,19,0.045,20,2.178,21,0.57,22,0.688,24,1.694,26,2.239,27,1.004,29,2.959,31,0.818,32,0.728,33,0.499,35,1.004,37,0.737,41,1.461,46,1.622,47,1.129,48,1.027,49,0.786,54,1.099,55,0.029,67,0.029,72,1.293,100,2.239,127,1.906,128,2.693,154,1.96,173,2.482,185,1.657,250,1.458,257,1.906,263,2.482,267,3.135,321,3.009,322,4.236,323,5.291,324,4.672,325,4.672,326,3.088,327,3.786,328,2.744,329,2.744,330,2.744,331,3.786,332,2.744,333,2.744,334,3.786,335,2.744,336,2.744,337,2.239,338,4.672,339,2.744,340,2.744,341,4.334,342,2.744,343,2.744,344,2.744,345,2.744,346,2.744,347,2.744,348,2.744,349,2.744,350,2.744,351,2.239,352,3.786,353,1.458,354,2.744,355,2.744,356,2.744,357,2.744,358,2.744,359,2.286,360,2.744,361,2.744,362,2.744,363,2.239,364,3.088,365,2.744,366,2.744,367,2.744]],["title/classes/QueryBuilder.html",[0,0.116,368,1.77]],["body/classes/QueryBuilder.html",[0,0.097,2,0.456,3,0.317,4,0.317,5,0.278,8,0.143,9,0.385,10,1.457,12,0.729,13,1.785,18,0.591,19,0.045,21,0.792,22,0.832,23,0.359,24,1.748,27,1.134,31,1.365,32,1.134,33,0.832,34,2.515,35,1.178,37,0.642,41,1.138,45,1.138,46,0.915,48,0.572,49,0.507,52,1.376,54,1.044,55,0.023,67,0.019,72,1.151,88,0.456,95,1.166,114,1.151,128,2.163,135,1.994,144,1.569,152,1.524,154,1.025,166,1.644,173,2.819,185,2.304,197,1.299,206,1.475,250,1.299,262,2.368,263,1.299,291,1.061,312,2.491,368,2.304,369,3.182,370,3.659,371,1.061,372,2.444,373,3.816,374,3.054,375,3.816,376,2.635,377,4.273,378,3.816,379,4.439,380,3.49,381,3.49,382,2.444,383,2.444,384,3.49,385,3.054,386,2.444,387,1.528,388,2.444,389,2.444,390,1.528,391,1.528,392,1.528,393,1.528,394,1.528,395,1.528,396,1.528,397,1.528,398,3.816,399,1.528,400,3.054,401,4.273,402,1.528,403,2.444,404,1.528,405,1.528,406,2.444,407,1.528,408,1.528,409,2.444,410,1.528,411,2.444,412,4.07,413,1.528,414,1.528,415,1.528,416,2.444,417,3.054,418,2.444,419,1.528,420,2.444,421,3.054,422,3.054,423,3.054,424,1.528,425,1.528,426,1.528,427,2.444,428,1.994,429,1.061,430,1.528,431,2.444,432,1.528,433,2.444,434,2.444,435,1.528,436,1.246,437,1.528,438,1.528,439,1.528,440,1.994,441,1.246,442,1.528,443,1.528,444,1.528,445,1.528,446,2.444,447,1.528,448,3.054,449,1.528,450,3.054,451,1.528,452,1.061,453,1.528,454,1.528,455,1.246,456,3.054,457,1.528,458,1.528,459,1.528,460,1.528,461,1.528,462,1.528,463,1.528,464,1.528,465,1.528,466,1.528,467,2.444,468,1.528,469,1.528,470,1.528,471,1.528,472,1.528,473,1.528,474,1.528,475,1.246,476,1.528,477,1.528,478,3.49,479,2.444,480,1.528,481,1.246,482,3.054,483,1.528,484,1.528,485,1.528,486,1.528,487,1.528]],["title/classes/QueryCache.html",[0,0.116,376,1.557]],["body/classes/QueryCache.html",[0,0.077,2,0.575,3,0.4,4,0.4,5,0.35,8,0.181,9,0.462,10,1.305,12,0.874,13,1.727,18,0.547,19,0.045,21,0.735,22,0.847,23,0.454,24,1.605,27,1.274,31,1.18,32,1.05,33,0.911,35,1.331,37,0.791,41,1.18,45,1.18,46,1.097,48,0.722,49,0.735,52,0.778,54,0.689,55,0.022,56,1.557,67,0.022,72,0.908,88,1.649,95,1.323,111,2.006,113,0.908,114,2.645,117,1.883,119,2.707,123,3.306,139,1.769,140,1.38,142,2.14,143,1.573,144,1.676,166,1.865,167,1.769,177,1.164,178,1.573,179,2.969,183,1.769,185,2.14,194,1.883,195,1.025,196,0.454,197,1.557,211,1.164,220,1.164,231,2.39,248,1.164,249,1.164,262,1.67,278,1.883,295,2.104,353,1.025,376,2.262,452,1.339,488,3.415,489,2.891,490,2.891,491,3.229,492,2.93,493,2.39,494,2.93,495,2.39,496,3.229,497,2.39,498,2.749,499,2.39,500,1.928,501,1.928,502,2.39,503,2.749,504,2.39,505,2.39,506,3.473,507,3.473,508,2.39,509,2.035,510,2.39,511,2.39,512,1.928,513,2.39,514,2.39,515,2.39,516,2.39,517,2.39,518,2.39,519,2.39,520,2.39,521,2.39,522,3.229,523,2.39,524,2.035,525,2.39,526,1.928,527,2.39,528,2.39,529,2.035,530,2.035,531,2.035,532,2.39,533,2.39,534,1.573,535,1.573,536,1.573,537,1.573,538,1.339,539,1.573,540,3.657,541,1.339,542,1.573,543,2.39,544,2.39,545,1.339,546,1.339]],["title/interfaces/QueryCacheOptions.html",[196,0.69,493,1.77]],["body/interfaces/QueryCacheOptions.html",[0,0.098,3,0.514,4,0.514,5,0.45,8,0.233,9,0.556,10,1.088,13,1.493,18,0.401,19,0.045,21,0.514,22,0.745,23,0.583,27,1.088,33,0.917,35,1.302,37,0.704,41,1.051,45,1.051,46,1.319,48,0.928,49,0.851,52,0.935,54,0.829,55,0.027,67,0.027,88,1.605,95,1.178,111,2.105,113,1.168,114,2.583,117,2.606,119,2.697,123,3.356,139,1.496,140,1.932,142,2.128,144,1.724,166,1.66,167,1.496,179,2.85,183,1.496,194,2.508,195,2.18,196,0.583,197,1.873,211,1.496,220,1.496,231,2.128,248,1.496,249,1.496,262,1.932,264,1.317,278,1.873,295,1.873,353,1.317,376,2.18,452,1.721,488,1.721,489,2.022,490,2.022,491,2.022,493,2.476,495,2.022,496,2.875,498,2.447,499,2.022,502,2.022,503,2.447,504,2.022,505,2.022,506,3.644,507,3.644,508,2.022,509,1.721,510,2.022,511,2.022,513,2.022,514,2.022,515,2.022,516,2.022,517,2.022,518,2.022,519,2.022,520,2.022,521,2.022,522,2.875,523,2.128,524,1.721,525,2.022,527,2.022,528,2.022,529,1.721,530,1.721,531,1.721,532,2.022,533,2.022,534,2.875,535,2.022,536,2.022,537,2.022,538,1.721,539,2.022,540,4.001,541,1.721,542,2.022,543,2.875,544,2.875,545,1.721,546,1.721]],["title/classes/Shard.html",[0,0.116,547,2.035]],["body/classes/Shard.html",[0,0.111,2,0.835,3,0.581,4,0.581,5,0.509,8,0.263,9,0.605,10,1.162,12,1.144,13,1.914,14,2.219,18,0.562,19,0.045,20,1.976,21,0.796,22,0.509,23,0.903,24,1.745,27,1.353,29,2.644,31,1.405,32,1.25,33,0.856,35,1.474,37,0.838,41,1.405,44,4.026,45,1.405,46,1.048,48,1.048,49,0.796,52,1.25,54,1.03,55,0.029,67,0.029,69,3.13,88,1.306,99,2.039,177,1.69,286,2.317,287,1.944,288,1.487,295,2.039,363,2.283,531,1.944,547,3.271,548,2.283,549,3.837,550,3.837,551,4.711,552,3.837,553,2.799,554,3.837,555,2.799,556,2.799,557,3.837,558,2.799,559,3.837,560,2.799,561,2.799,562,3.837,563,2.799,564,1.944,565,2.283,566,2.799,567,2.799,568,2.799,569,2.799,570,2.283,571,3.837,572,2.799,573,2.799,574,3.837,575,2.799,576,3.837,577,2.799]],["title/interfaces/SimpleCondition.html",[196,0.69,285,1.381]],["body/interfaces/SimpleCondition.html",[3,0.696,4,0.696,5,0.61,8,0.315,9,0.683,18,0.63,19,0.045,22,0.92,33,0.787,35,1.149,37,0.756,47,1.51,49,1.133,55,0.033,67,0.033,80,2.547,88,1.001,99,1.783,144,1.122,152,1.621,154,2.125,196,1.019,264,1.783,265,2.026,266,2.026,267,2.026,268,2.331,269,2.331,270,3.517,271,2.026,272,2.026,273,2.026,274,2.026,275,2.026,276,2.331,277,2.331,278,1.783,279,2.738,280,2.738,281,2.331,282,2.738,283,2.738,284,2.738,285,2.258,286,3.058,287,2.331,288,2.301,289,3.517,290,3.517,291,2.331,292,2.331,293,2.738,294,2.738,295,1.783]],["title/classes/TransactionManager.html",[0,0.116,578,2.035]],["body/classes/TransactionManager.html",[0,0.106,2,0.794,3,0.552,4,0.552,5,0.484,7,1.607,8,0.25,9,0.584,10,1.415,12,1.105,13,1.841,14,1.746,18,0.525,19,0.045,20,2.29,21,0.885,22,0.674,23,1.181,24,1.755,25,2.172,27,1.224,29,3.109,31,0.794,32,0.706,33,0.484,35,0.706,38,2.172,43,3.024,45,1.497,46,0.997,47,0.794,48,0.997,49,0.769,52,0.706,55,0.028,67,0.028,72,1.254,106,3.761,307,1.848,326,3.024,337,3.761,364,2.172,440,2.172,578,2.961,579,4.351,580,4.264,581,4.264,582,4.611,583,4.611,584,4.611,585,4.611,586,2.662,587,4.492,588,2.662,589,2.662,590,2.662,591,5.252,592,2.662,593,2.662,594,4.264,595,2.662,596,4.848,597,4.264,598,2.662,599,3.366,600,2.662,601,4.848,602,3.706,603,2.662,604,2.662,605,2.662,606,3.024,607,4.264,608,2.662,609,2.662,610,2.662,611,2.662,612,3.706,613,2.662]],["title/changelog.html",[614,1.714,615,1.714,616,2.468]],["body/changelog.html",[12,0.828,19,0.029,23,1.196,55,0.029,67,0.029,152,1.039,309,2.265,314,4.73,353,1.475,497,1.676,524,1.928,564,3.417,599,1.928,606,4.249,617,2.265,618,5.209,619,3.531,620,3.815,621,3.531,622,2.776,623,3.815,624,4.694,625,4.694,626,4.444,627,3.815,628,2.776,629,3.815,630,2.776,631,5.085,632,2.776,633,1.928,634,2.776,635,2.776,636,2.776,637,4.36,638,2.776,639,2.776,640,3.815,641,2.776,642,2.776,643,2.776,644,4.36,645,4.36,646,2.776,647,5.209,648,4.694,649,2.776,650,4.36,651,4.36,652,2.776,653,2.776,654,2.776,655,2.265,656,2.776,657,2.776,658,2.776,659,2.776,660,2.776,661,2.776,662,2.776,663,4.694,664,2.776,665,2.776,666,4.328,667,2.776,668,2.776,669,2.776,670,2.776,671,2.776,672,2.776,673,2.776,674,2.776,675,2.776,676,5.209,677,2.776,678,2.776,679,2.776,680,3.815,681,4.694,682,3.83,683,4.36,684,3.815,685,3.815,686,3.815,687,3.815,688,3.815,689,3.815,690,3.815,691,3.815,692,3.815,693,2.776,694,2.776,695,2.776,696,3.815,697,2.776,698,2.776,699,2.776,700,2.776,701,2.776,702,2.776,703,2.776,704,2.776,705,2.776,706,2.776,707,1.475,708,2.776,709,2.776,710,2.265,711,2.776,712,2.776,713,2.776,714,2.776,715,2.776]],["title/coverage.html",[716,3.23]],["body/coverage.html",[0,0.22,1,2.135,5,0.559,6,2.508,7,2.773,18,0.35,19,0.045,23,0.723,34,1.926,40,1.856,47,0.917,55,0.031,67,0.031,68,2.508,95,1.933,111,1.449,112,2.468,113,2.306,140,1.449,152,1.72,196,1.152,265,1.856,266,2.468,285,1.449,296,1.856,297,2.508,321,2.135,322,2.508,368,1.856,369,2.956,370,2.839,371,2.839,376,1.634,488,2.839,493,1.856,547,2.135,548,2.508,578,2.135,579,2.508,621,2.135,707,2.173,716,2.508,717,3.075,718,3.075,719,3.335,720,3.399,721,5.432,722,2.508,723,5.24,724,2.508,725,3.075,726,3.075,727,3.075,728,3.075,729,3.075,730,3.335,731,2.508,732,2.508,733,2.508,734,2.508,735,3.075,736,2.508,737,2.508,738,2.508,739,5.097,740,5.097,741,2.508,742,2.508,743,2.508,744,2.508,745,4.088,746,4.088,747,3.335,748,2.508,749,2.508,750,2.508,751,2.508,752,3.075,753,2.508,754,4.088,755,3.075,756,3.075,757,3.075,758,3.075,759,3.075,760,3.075]],["title/miscellaneous/functions.html",[761,1.163,762,2.867]],["body/miscellaneous/functions.html",[8,0.359,18,0.536,19,0.043,27,1.351,31,1.403,32,1.248,33,0.855,34,2.216,37,0.604,47,1.626,55,0.036,67,0.036,136,3.689,144,1.573,166,2.503,307,2.659,368,3.075,369,2.312,370,3.267,371,3.267,475,3.123,497,2.312,530,2.659,720,3.267,736,3.838,743,3.123,744,3.838,753,3.123,761,1.804,762,3.123,763,3.829,764,3.123,765,3.123,766,3.829,767,3.829,768,3.829,769,5.093,770,3.829,771,3.829,772,3.829,773,3.829,774,3.829,775,3.829,776,3.829,777,3.829]],["title/index.html",[8,0.232,614,1.714,615,1.714]],["body/index.html",[8,0.411,19,0.045,21,1.002,23,0.802,32,1.161,37,0.69,54,1.199,55,0.033,67,0.033,78,2.782,95,1.14,99,1.812,128,1.812,144,1.615,152,1.277,196,0.802,206,2.641,244,1.812,250,2.325,259,2.368,263,1.812,267,2.059,268,2.368,269,2.368,296,2.059,353,1.812,359,3.076,429,2.368,441,2.782,455,2.782,529,2.368,541,2.368,545,2.368,546,2.368,564,2.368,565,2.782,570,3.569,619,2.368,626,2.782,633,3.354,655,2.782,707,2.865,778,2.782,779,3.569,780,2.782,781,3.411,782,3.411,783,3.411,784,3.411,785,3.411,786,3.411,787,4.375,788,3.411,789,4.375,790,3.411,791,3.411,792,3.411,793,3.411,794,3.411,795,3.569,796,3.411,797,2.782,798,3.411,799,3.411,800,3.411,801,3.411,802,3.411,803,4.83,804,3.411,805,3.411,806,3.411,807,3.411,808,3.411,809,3.411,810,3.411,811,3.411,812,3.411,813,3.411,814,3.411,815,3.411,816,3.411,817,3.411]],["title/license.html",[614,1.714,615,1.714,818,2.013]],["body/license.html",[19,0.035,55,0.035,67,0.035,428,2.994,429,3.183,509,2.549,523,2.216,621,2.549,666,2.994,797,2.994,818,2.994,819,3.67,820,4.997,821,3.67,822,2.994,823,2.994,824,2.994,825,4.583,826,3.67,827,3.67,828,3.67,829,3.67,830,3.67,831,3.67,832,4.583,833,5.682,834,3.67,835,3.67,836,4.997,837,3.67,838,4.583,839,3.67,840,3.67,841,3.67,842,3.67,843,3.67,844,3.67,845,3.67,846,3.67,847,3.67,848,4.583,849,3.67,850,3.67,851,3.67,852,3.67,853,3.67,854,2.994,855,3.67,856,4.583,857,4.583,858,3.67,859,3.67,860,3.67,861,3.67,862,3.67,863,3.67,864,3.67,865,3.67,866,3.67,867,3.67,868,3.67,869,3.67,870,3.67,871,3.67,872,3.67,873,3.67,874,3.67,875,3.67,876,3.67,877,3.67,878,3.67,879,3.67,880,3.67,881,3.67,882,3.67,883,3.67,884,3.67,885,3.67]],["title/modules.html",[886,3.23]],["body/modules.html",[19,0.04,55,0.04,67,0.04,886,3.754]],["title/overview.html",[887,3.23]],["body/overview.html",[2,1.357,19,0.04,55,0.04,67,0.04,264,2.419,619,3.161,887,3.714,888,4.553]],["title/properties.html",[9,0.554,682,2.013]],["body/properties.html",[9,0.625,19,0.044,22,0.873,37,0.625,55,0.036,56,2.553,67,0.036,88,1.433,114,1.868,244,2.106,359,2.901,436,3.234,497,2.393,503,2.753,599,2.753,617,3.234,633,3.337,707,2.106,710,3.234,778,3.92,779,3.92,780,3.234,795,3.234,822,3.234,823,3.234,824,3.234,889,3.964,890,3.964,891,3.964,892,3.964,893,3.964,894,3.964,895,3.964,896,3.964,897,3.964,898,3.964,899,3.964,900,3.964,901,3.964,902,3.964,903,3.964,904,3.964,905,3.964,906,3.964,907,3.964,908,3.964,909,3.964,910,3.964,911,3.964]],["title/miscellaneous/typealiases.html",[761,1.163,912,3.514]],["body/miscellaneous/typealiases.html",[8,0.377,18,0.615,19,0.045,35,1.286,47,1.445,55,0.037,67,0.037,80,2.575,112,2.428,113,2.283,117,2.575,177,3.141,194,2.136,195,2.136,266,2.428,270,3.365,271,2.428,272,2.428,273,2.428,274,2.428,275,2.428,276,2.792,277,2.792,278,2.136,285,1.894,292,3.365,761,1.894,913,4.021,914,5.528,915,4.021]],["title/miscellaneous/variables.html",[761,1.163,916,2.867]],["body/miscellaneous/variables.html",[8,0.249,18,0.302,19,0.045,21,1.089,22,1.034,34,2.169,37,0.583,41,0.791,47,1.269,52,1.414,54,0.624,55,0.028,67,0.028,80,2.262,95,0.887,101,2.165,104,3.473,105,3.95,154,1.786,244,1.41,271,1.602,272,1.602,273,1.602,274,1.602,275,1.602,281,2.568,285,1.25,286,1.602,288,2.665,289,2.568,290,2.568,351,3.756,359,2.233,369,2.233,481,2.165,498,2.568,523,1.602,538,1.843,587,3.017,707,1.965,719,2.165,720,3.362,722,3.017,724,3.017,730,3.017,731,3.017,732,3.017,733,3.017,734,3.017,737,3.017,738,3.017,741,3.017,742,3.017,747,3.017,748,3.017,749,3.017,750,3.017,751,3.017,761,1.25,764,3.017,765,3.017,854,3.473,916,2.165,917,3.698,918,3.698,919,3.698,920,4.605,921,2.654,922,2.654,923,4.842,924,4.605,925,3.698,926,2.654,927,4.605,928,3.698,929,3.698,930,2.654,931,2.654,932,2.654,933,3.698,934,3.698,935,3.698,936,4.257,937,3.698,938,3.698,939,3.698,940,2.654,941,2.654,942,2.654,943,2.654,944,2.654,945,2.654,946,2.654,947,2.654,948,2.654,949,2.654,950,2.654,951,2.654,952,3.698,953,2.654,954,2.654,955,2.654,956,2.654,957,2.654,958,2.654,959,2.654,960,2.654,961,2.654,962,2.654]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":95,"title":{},"body":{"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["0/1",{"_index":723,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":735,"title":{},"body":{"coverage.html":{}}}],["0/26",{"_index":752,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":754,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":728,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":729,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":745,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":755,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":746,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":758,"title":{},"body":{"coverage.html":{}}}],["02",{"_index":645,"title":{},"body":{"changelog.html":{}}}],["029ad1fa",{"_index":700,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":667,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":676,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":637,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":640,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":197,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["1.0.0",{"_index":704,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":698,"title":{},"body":{"changelog.html":{}}}],["1.1.1",{"_index":695,"title":{},"body":{"changelog.html":{}}}],["1.1.2",{"_index":693,"title":{},"body":{"changelog.html":{}}}],["1.1.3",{"_index":680,"title":{},"body":{"changelog.html":{}}}],["1/1",{"_index":740,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":619,"title":{},"body":{"changelog.html":{},"index.html":{},"overview.html":{}}}],["100",{"_index":739,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":541,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"index.html":{}}}],["11",{"_index":658,"title":{},"body":{"changelog.html":{}}}],["16",{"_index":641,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":629,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":620,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":646,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":812,"title":{},"body":{"index.html":{}}}],["2.0.0",{"_index":675,"title":{},"body":{"changelog.html":{}}}],["2.0.1",{"_index":665,"title":{},"body":{"changelog.html":{}}}],["2.1.0",{"_index":661,"title":{},"body":{"changelog.html":{}}}],["2.1.1",{"_index":657,"title":{},"body":{"changelog.html":{}}}],["2.1.2",{"_index":643,"title":{},"body":{"changelog.html":{}}}],["2.2.0",{"_index":639,"title":{},"body":{"changelog.html":{}}}],["2021",{"_index":666,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2022",{"_index":644,"title":{},"body":{"changelog.html":{}}}],["2024",{"_index":618,"title":{},"body":{"changelog.html":{}}}],["22/28",{"_index":727,"title":{},"body":{"coverage.html":{}}}],["26",{"_index":705,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":699,"title":{},"body":{"changelog.html":{}}}],["276f3b47",{"_index":701,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":681,"title":{},"body":{"changelog.html":{}}}],["2886b372",{"_index":662,"title":{},"body":{"changelog.html":{}}}],["3.0.0",{"_index":638,"title":{},"body":{"changelog.html":{}}}],["3.1.0",{"_index":636,"title":{},"body":{"changelog.html":{}}}],["30",{"_index":677,"title":{},"body":{"changelog.html":{}}}],["36",{"_index":947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["39424c77",{"_index":715,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":888,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":630,"title":{},"body":{"changelog.html":{}}}],["4.0.1",{"_index":623,"title":{},"body":{"changelog.html":{}}}],["4.0.2",{"_index":617,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["4079a95a",{"_index":711,"title":{},"body":{"changelog.html":{}}}],["4173ee67",{"_index":671,"title":{},"body":{"changelog.html":{}}}],["42415f3b",{"_index":622,"title":{},"body":{"changelog.html":{}}}],["4642966f",{"_index":635,"title":{},"body":{"changelog.html":{}}}],["4[a",{"_index":951,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4e9d1718",{"_index":660,"title":{},"body":{"changelog.html":{}}}],["4xxx",{"_index":960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5/9",{"_index":757,"title":{},"body":{"coverage.html":{}}}],["55",{"_index":756,"title":{},"body":{"coverage.html":{}}}],["5bfdc44a",{"_index":694,"title":{},"body":{"changelog.html":{}}}],["5d244251",{"_index":679,"title":{},"body":{"changelog.html":{}}}],["5eef46c0",{"_index":697,"title":{},"body":{"changelog.html":{}}}],["60000",{"_index":145,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["69b61d8a",{"_index":664,"title":{},"body":{"changelog.html":{}}}],["6d760f53",{"_index":709,"title":{},"body":{"changelog.html":{}}}],["75a1f4f1",{"_index":659,"title":{},"body":{"changelog.html":{}}}],["75a86338",{"_index":674,"title":{},"body":{"changelog.html":{}}}],["76398cb0",{"_index":706,"title":{},"body":{"changelog.html":{}}}],["78",{"_index":726,"title":{},"body":{"coverage.html":{}}}],["85fb8daf",{"_index":708,"title":{},"body":{"changelog.html":{}}}],["89ab][a",{"_index":953,"title":{},"body":{"miscellaneous/variables.html":{}}}],["95dd6d1e",{"_index":690,"title":{},"body":{"changelog.html":{}}}],["9]{9}$/i",{"_index":957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9b8d080d",{"_index":692,"title":{},"body":{"changelog.html":{}}}],["_",{"_index":806,"title":{},"body":{"index.html":{}}}],["__brand__",{"_index":279,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["a[key",{"_index":449,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["above",{"_index":855,"title":{},"body":{"license.html":{}}}],["ac42869a",{"_index":652,"title":{},"body":{"changelog.html":{}}}],["access",{"_index":62,"title":{},"body":{"classes/IndexManager.html":{}}}],["accessors",{"_index":135,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryBuilder.html":{}}}],["action",{"_index":879,"title":{},"body":{"license.html":{}}}],["add",{"_index":564,"title":{},"body":{"classes/Shard.html":{},"changelog.html":{},"index.html":{}}}],["adddocument",{"_index":69,"title":{},"body":{"classes/Indexing.html":{},"classes/Shard.html":{}}}],["adddocument(doc",{"_index":554,"title":{},"body":{"classes/Shard.html":{}}}],["adddocument(document",{"_index":76,"title":{},"body":{"classes/Indexing.html":{}}}],["adds",{"_index":527,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["ae7913f1",{"_index":656,"title":{},"body":{"changelog.html":{}}}],["age",{"_index":570,"title":{},"body":{"classes/Shard.html":{},"index.html":{}}}],["aliases",{"_index":913,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":545,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"index.html":{}}}],["already",{"_index":593,"title":{},"body":{"classes/TransactionManager.html":{}}}],["and/or",{"_index":846,"title":{},"body":{"license.html":{}}}],["api",{"_index":785,"title":{},"body":{"index.html":{}}}],["apply",{"_index":440,"title":{},"body":{"classes/QueryBuilder.html":{},"classes/TransactionManager.html":{}}}],["args",{"_index":482,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["argument",{"_index":64,"title":{},"body":{"classes/IndexManager.html":{}}}],["arising",{"_index":882,"title":{},"body":{"license.html":{}}}],["array",{"_index":166,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"miscellaneous/functions.html":{}}}],["array.from",{"_index":804,"title":{},"body":{"index.html":{}}}],["array.from(this.cache.entries",{"_index":251,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["array.from(this.cache.entries()).foreach(([key",{"_index":210,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["array.from(this.db.values",{"_index":567,"title":{},"body":{"classes/Shard.html":{}}}],["array.isarray(sortconditions",{"_index":432,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["array.isarray(value",{"_index":942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arrays",{"_index":538,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"miscellaneous/variables.html":{}}}],["asc",{"_index":454,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["associated",{"_index":509,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"license.html":{}}}],["async",{"_index":128,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"index.html":{}}}],["author",{"_index":909,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":873,"title":{},"body":{"license.html":{}}}],["available",{"_index":611,"title":{},"body":{"classes/TransactionManager.html":{}}}],["avalue",{"_index":448,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["avoid",{"_index":240,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["await",{"_index":263,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"index.html":{}}}],["b",{"_index":291,"title":{},"body":{"interfaces/MemozOptions.html":{},"classes/QueryBuilder.html":{},"interfaces/SimpleCondition.html":{}}}],["b[key",{"_index":451,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["backpressure",{"_index":899,"title":{},"body":{"properties.html":{}}}],["based",{"_index":775,"title":{},"body":{"miscellaneous/functions.html":{}}}],["be1b5db1",{"_index":628,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":598,"title":{},"body":{"classes/TransactionManager.html":{}}}],["begins",{"_index":600,"title":{},"body":{"classes/TransactionManager.html":{}}}],["begintransaction",{"_index":582,"title":{},"body":{"classes/TransactionManager.html":{}}}],["behavior",{"_index":474,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["boolean",{"_index":154,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/variables.html":{}}}],["boolean|undefined",{"_index":336,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["boot",{"_index":800,"title":{},"body":{"index.html":{}}}],["bug",{"_index":650,"title":{},"body":{"changelog.html":{}}}],["bugs",{"_index":710,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["builder",{"_index":773,"title":{},"body":{"miscellaneous/functions.html":{}}}],["builder.exec",{"_index":487,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.exec().catch(onrejected",{"_index":486,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.then(...args",{"_index":485,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts",{"_index":371,"title":{},"body":{"classes/QueryBuilder.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["builder.ts:10",{"_index":395,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:104",{"_index":404,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:109",{"_index":419,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:11",{"_index":390,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:12",{"_index":388,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:30",{"_index":408,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:38",{"_index":413,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:47",{"_index":410,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:5",{"_index":393,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:52",{"_index":407,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:58",{"_index":402,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:6",{"_index":394,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:7",{"_index":391,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:8",{"_index":392,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:9",{"_index":396,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:91",{"_index":415,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:98",{"_index":399,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["bvalue",{"_index":450,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["c",{"_index":821,"title":{},"body":{"license.html":{}}}],["c0bab78d",{"_index":687,"title":{},"body":{"changelog.html":{}}}],["c411d805",{"_index":670,"title":{},"body":{"changelog.html":{}}}],["cache",{"_index":114,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"properties.html":{}}}],["cache.ts",{"_index":113,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["cache.ts:109",{"_index":184,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:11",{"_index":143,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryCache.html":{}}}],["cache.ts:13",{"_index":150,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:14",{"_index":500,"title":{},"body":{"classes/QueryCache.html":{}}}],["cache.ts:143",{"_index":161,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:147",{"_index":158,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:15",{"_index":156,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:151",{"_index":189,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:155",{"_index":175,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:16",{"_index":494,"title":{},"body":{"classes/QueryCache.html":{}}}],["cache.ts:167",{"_index":165,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:17",{"_index":153,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:173",{"_index":182,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:178",{"_index":163,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:186",{"_index":191,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:19",{"_index":148,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:191",{"_index":193,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:196",{"_index":172,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:21",{"_index":155,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:23",{"_index":149,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:25",{"_index":151,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:27",{"_index":146,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:30",{"_index":141,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:37",{"_index":501,"title":{},"body":{"classes/QueryCache.html":{}}}],["cache.ts:52",{"_index":181,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:54",{"_index":526,"title":{},"body":{"classes/QueryCache.html":{}}}],["cache.ts:62",{"_index":178,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryCache.html":{}}}],["cache.ts:67",{"_index":157,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:74",{"_index":512,"title":{},"body":{"classes/QueryCache.html":{}}}],["cache.ts:79",{"_index":186,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:85",{"_index":187,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:91",{"_index":168,"title":{},"body":{"classes/LRUCache.html":{}}}],["cached",{"_index":260,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["cachehits",{"_index":489,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["cachemisses",{"_index":490,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["caching",{"_index":810,"title":{},"body":{"index.html":{}}}],["callback",{"_index":303,"title":{},"body":{"classes/Mutex.html":{}}}],["caller",{"_index":319,"title":{},"body":{"classes/Mutex.html":{}}}],["capture",{"_index":311,"title":{},"body":{"classes/Mutex.html":{}}}],["case",{"_index":105,"title":{},"body":{"classes/Indexing.html":{},"miscellaneous/variables.html":{}}}],["catch",{"_index":380,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["catch(onrejected",{"_index":397,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["chain",{"_index":308,"title":{},"body":{"classes/Mutex.html":{}}}],["chaining",{"_index":467,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["changelog",{"_index":616,"title":{"changelog.html":{}},"body":{}}],["changes",{"_index":606,"title":{},"body":{"classes/TransactionManager.html":{},"changelog.html":{}}}],["charge",{"_index":829,"title":{},"body":{"license.html":{}}}],["check",{"_index":100,"title":{},"body":{"classes/Indexing.html":{},"classes/PersistenceManager.html":{}}}],["checks",{"_index":936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chores",{"_index":647,"title":{},"body":{"changelog.html":{}}}],["chunk",{"_index":772,"title":{},"body":{"miscellaneous/functions.html":{}}}],["chunkarray",{"_index":744,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["chunkarray(array",{"_index":766,"title":{},"body":{"miscellaneous/functions.html":{}}}],["chunks",{"_index":769,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ci",{"_index":686,"title":{},"body":{"changelog.html":{}}}],["claim",{"_index":876,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"overview.html":{}}}],["cleanup",{"_index":199,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["cleanupexpiredentries",{"_index":124,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["cleanupinterval",{"_index":115,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["cleanuptimer",{"_index":116,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["clear",{"_index":14,"title":{},"body":{"classes/IndexManager.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/PersistenceManager.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}}}],["cleared",{"_index":525,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["clearinterval(this.cleanuptimer",{"_index":219,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["clears",{"_index":521,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["codes",{"_index":691,"title":{},"body":{"changelog.html":{}}}],["committing",{"_index":610,"title":{},"body":{"classes/TransactionManager.html":{}}}],["committransaction",{"_index":583,"title":{},"body":{"classes/TransactionManager.html":{}}}],["comparisonoperator",{"_index":270,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["condition",{"_index":920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["condition.ts",{"_index":731,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["conditionals",{"_index":245,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["conditionnode",{"_index":80,"title":{},"body":{"classes/Indexing.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["conditions",{"_index":854,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["connection",{"_index":884,"title":{},"body":{"license.html":{}}}],["const",{"_index":54,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":72,"title":{},"body":{"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/TransactionManager.html":{}}}],["constructor(db",{"_index":326,"title":{},"body":{"classes/PersistenceManager.html":{},"classes/TransactionManager.html":{}}}],["constructor(fields",{"_index":73,"title":{},"body":{"classes/Indexing.html":{}}}],["constructor(options",{"_index":139,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["constructor(result",{"_index":387,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["containing",{"_index":499,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["contents",{"_index":358,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["continue",{"_index":453,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["continuous",{"_index":624,"title":{},"body":{"changelog.html":{}}}],["contract",{"_index":880,"title":{},"body":{"license.html":{}}}],["copies",{"_index":848,"title":{},"body":{"license.html":{}}}],["copy",{"_index":832,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":820,"title":{},"body":{"license.html":{}}}],["correct",{"_index":473,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["counts",{"_index":517,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["coverage",{"_index":716,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":353,"title":{},"body":{"classes/PersistenceManager.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"changelog.html":{},"index.html":{}}}],["createquerybuilderproxy",{"_index":736,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createquerybuilderproxy(builder",{"_index":475,"title":{},"body":{"classes/QueryBuilder.html":{},"miscellaneous/functions.html":{}}}],["createquerybuilderproxy(result",{"_index":484,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["crud",{"_index":783,"title":{},"body":{"index.html":{}}}],["current",{"_index":307,"title":{},"body":{"classes/Mutex.html":{},"classes/TransactionManager.html":{},"miscellaneous/functions.html":{}}}],["custom",{"_index":278,"title":{},"body":{"interfaces/MemozOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["customcompare",{"_index":290,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/variables.html":{}}}],["customcompare(datum[field",{"_index":921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["d687504c",{"_index":673,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":877,"title":{},"body":{"license.html":{}}}],["data",{"_index":359,"title":{},"body":{"classes/PersistenceManager.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["data.filter((datum",{"_index":932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data.find((datum",{"_index":940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data.json",{"_index":340,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["database",{"_index":779,"title":{},"body":{"index.html":{},"properties.html":{}}}],["datum",{"_index":919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datum[field",{"_index":923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db",{"_index":29,"title":{},"body":{"classes/IndexManager.html":{},"classes/PersistenceManager.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}}}],["db.get(id",{"_index":61,"title":{},"body":{"classes/IndexManager.html":{}}}],["dbsnapshot",{"_index":580,"title":{},"body":{"classes/TransactionManager.html":{}}}],["dd121257",{"_index":669,"title":{},"body":{"changelog.html":{}}}],["de8a28fa",{"_index":642,"title":{},"body":{"changelog.html":{}}}],["deae21e0",{"_index":703,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":835,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":885,"title":{},"body":{"license.html":{}}}],["default",{"_index":21,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":813,"title":{},"body":{"index.html":{}}}],["defined",{"_index":24,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}}}],["delete",{"_index":125,"title":{},"body":{"classes/LRUCache.html":{}}}],["delete(key",{"_index":159,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["deletebyid",{"_index":549,"title":{},"body":{"classes/Shard.html":{}}}],["deletebyid(id",{"_index":557,"title":{},"body":{"classes/Shard.html":{}}}],["deleteone",{"_index":702,"title":{},"body":{"changelog.html":{}}}],["deps",{"_index":648,"title":{},"body":{"changelog.html":{}}}],["description",{"_index":497,"title":{},"body":{"classes/QueryCache.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"properties.html":{}}}],["deserialize",{"_index":126,"title":{},"body":{"classes/LRUCache.html":{}}}],["deserialize(serializedcache",{"_index":162,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["desired",{"_index":284,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["different",{"_index":458,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["differently",{"_index":109,"title":{},"body":{"classes/Indexing.html":{}}}],["dir",{"_index":342,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["disable",{"_index":202,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["disk",{"_index":633,"title":{},"body":{"changelog.html":{},"index.html":{},"properties.html":{}}}],["distribute",{"_index":844,"title":{},"body":{"license.html":{}}}],["doc",{"_index":44,"title":{},"body":{"classes/IndexManager.html":{},"classes/Shard.html":{}}}],["docs",{"_index":626,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["document",{"_index":78,"title":{},"body":{"classes/Indexing.html":{},"index.html":{}}}],["document[field]).join('_",{"_index":103,"title":{},"body":{"classes/Indexing.html":{}}}],["documentation",{"_index":621,"title":{},"body":{"changelog.html":{},"coverage.html":{},"license.html":{}}}],["documents",{"_index":295,"title":{},"body":{"interfaces/MemozOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{}}}],["documentwithid",{"_index":35,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"miscellaneous/typealiases.html":{}}}],["dpes",{"_index":668,"title":{},"body":{"changelog.html":{}}}],["e",{"_index":823,"title":{},"body":{"license.html":{},"properties.html":{}}}],["e.g",{"_index":569,"title":{},"body":{"classes/Shard.html":{}}}],["e81eee88",{"_index":649,"title":{},"body":{"changelog.html":{}}}],["e9322431",{"_index":685,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":530,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"miscellaneous/functions.html":{}}}],["early",{"_index":937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["easy",{"_index":782,"title":{},"body":{"index.html":{}}}],["effectively",{"_index":939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["empty",{"_index":108,"title":{},"body":{"classes/Indexing.html":{}}}],["enable",{"_index":471,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["enhance",{"_index":280,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["ensure",{"_index":472,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["entire",{"_index":522,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["entries",{"_index":127,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/PersistenceManager.html":{}}}],["entries.foreach(([key",{"_index":257,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/PersistenceManager.html":{}}}],["entry",{"_index":179,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["entry.expiry",{"_index":207,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["entry.value",{"_index":214,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["environment",{"_index":689,"title":{},"body":{"changelog.html":{}}}],["eq",{"_index":271,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":107,"title":{},"body":{"classes/Indexing.html":{}}}],["error('no",{"_index":607,"title":{},"body":{"classes/TransactionManager.html":{}}}],["error('transaction",{"_index":592,"title":{},"body":{"classes/TransactionManager.html":{}}}],["error('unexpected",{"_index":110,"title":{},"body":{"classes/Indexing.html":{}}}],["eslint",{"_index":201,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["etc",{"_index":634,"title":{},"body":{"changelog.html":{}}}],["evaluatecondition",{"_index":732,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["evaluatecondition(datum",{"_index":931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["evaluatenode",{"_index":734,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["evaluatenode(datum",{"_index":927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["event",{"_index":872,"title":{},"body":{"license.html":{}}}],["eviction",{"_index":496,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["evictionstrategy",{"_index":117,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"miscellaneous/typealiases.html":{}}}],["example",{"_index":789,"title":{},"body":{"index.html":{}}}],["excluding",{"_index":945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exec",{"_index":381,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["executes",{"_index":435,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["exists",{"_index":352,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["exits",{"_index":938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expired",{"_index":511,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["expiry",{"_index":246,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["export",{"_index":49,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{}}}],["express",{"_index":863,"title":{},"body":{"license.html":{}}}],["extends",{"_index":534,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["ezzat.vercel.app",{"_index":911,"title":{},"body":{"properties.html":{}}}],["f\\d]{12",{"_index":954,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f\\d]{3",{"_index":952,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f\\d]{4",{"_index":950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f\\d]{8",{"_index":949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fahmy",{"_index":824,"title":{},"body":{"license.html":{},"properties.html":{}}}],["false",{"_index":206,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryBuilder.html":{},"index.html":{}}}],["features",{"_index":631,"title":{},"body":{"changelog.html":{}}}],["fetchfn",{"_index":171,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["field",{"_index":286,"title":{},"body":{"interfaces/MemozOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/variables.html":{}}}],["fields",{"_index":39,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{}}}],["fifo",{"_index":195,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"miscellaneous/typealiases.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"coverage.html":{}}}],["filepath",{"_index":323,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["files",{"_index":834,"title":{},"body":{"license.html":{}}}],["filter",{"_index":252,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["finally",{"_index":382,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["finally(onfinally",{"_index":403,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["finish",{"_index":316,"title":{},"body":{"classes/Mutex.html":{}}}],["first",{"_index":230,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["fitness",{"_index":868,"title":{},"body":{"license.html":{}}}],["fixes",{"_index":651,"title":{},"body":{"changelog.html":{}}}],["following",{"_index":853,"title":{},"body":{"license.html":{}}}],["found",{"_index":510,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["free",{"_index":828,"title":{},"body":{"license.html":{}}}],["fs",{"_index":331,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["fs.createwritestream(this.filepath",{"_index":347,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["fs.existssync(this.filepath",{"_index":354,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["fspromises",{"_index":333,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["fspromises.access(this.filepath",{"_index":356,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["fspromises.mkdir(dir",{"_index":344,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["fspromises.readfile(this.filepath",{"_index":360,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["fspromises.writefile(this.filepath",{"_index":355,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["function",{"_index":152,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/Mutex.html":{},"classes/QueryBuilder.html":{},"interfaces/SimpleCondition.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["functions",{"_index":762,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":851,"title":{},"body":{"license.html":{}}}],["generates",{"_index":774,"title":{},"body":{"miscellaneous/functions.html":{}}}],["get(key",{"_index":167,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["get(target",{"_index":477,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["getasync",{"_index":129,"title":{},"body":{"classes/LRUCache.html":{}}}],["getasync(key",{"_index":170,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["getbyid",{"_index":550,"title":{},"body":{"classes/Shard.html":{}}}],["getbyid(id",{"_index":559,"title":{},"body":{"classes/Shard.html":{}}}],["getcurrentdb",{"_index":584,"title":{},"body":{"classes/TransactionManager.html":{}}}],["getdocuments",{"_index":551,"title":{},"body":{"classes/Shard.html":{}}}],["getfromindex",{"_index":15,"title":{},"body":{"classes/IndexManager.html":{}}}],["getfromindex(query",{"_index":28,"title":{},"body":{"classes/IndexManager.html":{}}}],["gethitrate",{"_index":190,"title":{},"body":{"classes/LRUCache.html":{}}}],["getindex",{"_index":16,"title":{},"body":{"classes/IndexManager.html":{}}}],["getindex(fields",{"_index":36,"title":{},"body":{"classes/IndexManager.html":{}}}],["getkey",{"_index":70,"title":{},"body":{"classes/Indexing.html":{}}}],["getkey(document",{"_index":79,"title":{},"body":{"classes/Indexing.html":{}}}],["getmany",{"_index":738,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getmissrate",{"_index":192,"title":{},"body":{"classes/LRUCache.html":{}}}],["getone",{"_index":742,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["gets",{"_index":320,"title":{},"body":{"classes/Mutex.html":{}}}],["getsize",{"_index":188,"title":{},"body":{"classes/LRUCache.html":{}}}],["getstats",{"_index":491,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["getting",{"_index":614,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["gh",{"_index":654,"title":{},"body":{"changelog.html":{}}}],["git+https://github.com/miladezzat/memoz.git",{"_index":908,"title":{},"body":{"properties.html":{}}}],["given",{"_index":504,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["global",{"_index":533,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["granted",{"_index":827,"title":{},"body":{"license.html":{}}}],["gt",{"_index":273,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["gte",{"_index":274,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["handle",{"_index":104,"title":{},"body":{"classes/Indexing.html":{},"miscellaneous/variables.html":{}}}],["has(key",{"_index":174,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["hash",{"_index":903,"title":{},"body":{"properties.html":{}}}],["hereby",{"_index":826,"title":{},"body":{"license.html":{}}}],["hit",{"_index":515,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["hit/miss",{"_index":513,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["hitcount",{"_index":118,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["hitrate",{"_index":137,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["hits",{"_index":506,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["hold",{"_index":604,"title":{},"body":{"classes/TransactionManager.html":{}}}],["holders",{"_index":874,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":904,"title":{},"body":{"properties.html":{}}}],["https://github.com/miladezzat/memoz/issues",{"_index":906,"title":{},"body":{"properties.html":{}}}],["https://memoz.js.org",{"_index":905,"title":{},"body":{"properties.html":{}}}],["https://milad",{"_index":910,"title":{},"body":{"properties.html":{}}}],["husky",{"_index":684,"title":{},"body":{"changelog.html":{}}}],["id",{"_index":99,"title":{},"body":{"classes/Indexing.html":{},"interfaces/MemozOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"index.html":{}}}],["id.ts",{"_index":720,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":717,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":372,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["implied",{"_index":864,"title":{},"body":{"license.html":{}}}],["import",{"_index":46,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}}}],["included",{"_index":858,"title":{},"body":{"license.html":{}}}],["including",{"_index":838,"title":{},"body":{"license.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index.adddocument(doc",{"_index":51,"title":{},"body":{"classes/IndexManager.html":{}}}],["index.query(query",{"_index":59,"title":{},"body":{"classes/IndexManager.html":{}}}],["indexedids",{"_index":58,"title":{},"body":{"classes/IndexManager.html":{}}}],["indexedids.foreach((id",{"_index":60,"title":{},"body":{"classes/IndexManager.html":{}}}],["indexes",{"_index":11,"title":{},"body":{"classes/IndexManager.html":{}}}],["indexing",{"_index":40,"title":{"classes/Indexing.html":{}},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"coverage.html":{}}}],["indexmanager",{"_index":1,"title":{"classes/IndexManager.html":{}},"body":{"classes/IndexManager.html":{},"coverage.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{}}}],["initialize",{"_index":603,"title":{},"body":{"classes/TransactionManager.html":{}}}],["initializes",{"_index":495,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["installation",{"_index":787,"title":{},"body":{"index.html":{}}}],["instance",{"_index":535,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["instanceof",{"_index":420,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["integration",{"_index":625,"title":{},"body":{"changelog.html":{}}}],["interface",{"_index":196,"title":{"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"coverage.html":{},"index.html":{}}}],["interfaces",{"_index":264,"title":{},"body":{"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"overview.html":{}}}],["interval",{"_index":200,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["invalidate",{"_index":492,"title":{},"body":{"classes/QueryCache.html":{}}}],["invalidate(key",{"_index":518,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["invalidates",{"_index":519,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["isexpired",{"_index":130,"title":{},"body":{"classes/LRUCache.html":{}}}],["isexpired(entry",{"_index":176,"title":{},"body":{"classes/LRUCache.html":{}}}],["isobject",{"_index":749,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isresolved",{"_index":374,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["isvalidmemozid",{"_index":751,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["it's",{"_index":427,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["iterate",{"_index":814,"title":{},"body":{"index.html":{}}}],["iuser",{"_index":793,"title":{},"body":{"index.html":{}}}],["js",{"_index":672,"title":{},"body":{"changelog.html":{}}}],["json",{"_index":683,"title":{},"body":{"changelog.html":{}}}],["json.parse(data",{"_index":362,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["json.parse(serializedcache",{"_index":256,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["json.stringify(entries",{"_index":255,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["json.stringify(paginatedresult",{"_index":460,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["json.stringify(this.result",{"_index":459,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["k",{"_index":160,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["key",{"_index":88,"title":{},"body":{"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"properties.html":{}}}],["keyof",{"_index":287,"title":{},"body":{"interfaces/MemozOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{}}}],["keys",{"_index":537,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["keywords",{"_index":891,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":862,"title":{},"body":{"license.html":{}}}],["length",{"_index":805,"title":{},"body":{"index.html":{}}}],["liability",{"_index":878,"title":{},"body":{"license.html":{}}}],["liable",{"_index":875,"title":{},"body":{"license.html":{}}}],["license",{"_index":818,"title":{"license.html":{}},"body":{"license.html":{}}}],["limit",{"_index":383,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["limit(limitcount",{"_index":406,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["limitation",{"_index":839,"title":{},"body":{"license.html":{}}}],["limitcount",{"_index":375,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["limited",{"_index":865,"title":{},"body":{"license.html":{}}}],["line",{"_index":204,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["list",{"_index":503,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"properties.html":{}}}],["literal",{"_index":177,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryCache.html":{},"classes/Shard.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":357,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["loadfromdisk",{"_index":324,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["location",{"_index":796,"title":{},"body":{"index.html":{}}}],["lock",{"_index":298,"title":{},"body":{"classes/Mutex.html":{}}}],["lock(callback",{"_index":301,"title":{},"body":{"classes/Mutex.html":{}}}],["locking",{"_index":304,"title":{},"body":{"classes/Mutex.html":{}}}],["logic",{"_index":924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["loop",{"_index":808,"title":{},"body":{"index.html":{}}}],["lru",{"_index":194,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"miscellaneous/typealiases.html":{}}}],["lrucache",{"_index":111,"title":{"classes/LRUCache.html":{}},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"coverage.html":{}}}],["lrucacheoptions",{"_index":140,"title":{"interfaces/LRUCacheOptions.html":{}},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"coverage.html":{}}}],["lt",{"_index":275,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["lte",{"_index":276,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["made",{"_index":608,"title":{},"body":{"classes/TransactionManager.html":{}}}],["main",{"_index":609,"title":{},"body":{"classes/TransactionManager.html":{}}}],["manager.ts",{"_index":7,"title":{},"body":{"classes/IndexManager.html":{},"classes/PersistenceManager.html":{},"classes/TransactionManager.html":{},"coverage.html":{}}}],["manager.ts:11",{"_index":327,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["manager.ts:14",{"_index":38,"title":{},"body":{"classes/IndexManager.html":{},"classes/TransactionManager.html":{}}}],["manager.ts:18",{"_index":30,"title":{},"body":{"classes/IndexManager.html":{}}}],["manager.ts:19",{"_index":330,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["manager.ts:24",{"_index":588,"title":{},"body":{"classes/TransactionManager.html":{}}}],["manager.ts:31",{"_index":26,"title":{},"body":{"classes/IndexManager.html":{},"classes/PersistenceManager.html":{}}}],["manager.ts:34",{"_index":590,"title":{},"body":{"classes/TransactionManager.html":{}}}],["manager.ts:4",{"_index":586,"title":{},"body":{"classes/TransactionManager.html":{}}}],["manager.ts:47",{"_index":589,"title":{},"body":{"classes/TransactionManager.html":{}}}],["manager.ts:6",{"_index":25,"title":{},"body":{"classes/IndexManager.html":{},"classes/TransactionManager.html":{}}}],["manager.ts:7",{"_index":328,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["manager.ts:8",{"_index":43,"title":{},"body":{"classes/IndexManager.html":{},"classes/TransactionManager.html":{}}}],["manager.ts:9",{"_index":329,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["many",{"_index":370,"title":{},"body":{"classes/QueryBuilder.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["many.ts",{"_index":737,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["map",{"_index":20,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/PersistenceManager.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}}}],["map(([key",{"_index":253,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["map(this.db",{"_index":602,"title":{},"body":{"classes/TransactionManager.html":{}}}],["mark",{"_index":466,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["matching",{"_index":67,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxsize",{"_index":119,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["mechanism",{"_index":305,"title":{},"body":{"classes/Mutex.html":{}}}],["memory",{"_index":778,"title":{},"body":{"index.html":{},"properties.html":{}}}],["memoz",{"_index":707,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["memoz.createmany(docs",{"_index":807,"title":{},"body":{"index.html":{}}}],["memoz_id_pattern",{"_index":722,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["memoz_id_pattern.test(memozid",{"_index":948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memoz_id_template",{"_index":724,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["memozid",{"_index":47,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["memozid.length",{"_index":946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memozoptions",{"_index":265,"title":{"interfaces/MemozOptions.html":{}},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"coverage.html":{}}}],["memozusage",{"_index":792,"title":{},"body":{"index.html":{}}}],["merchantability",{"_index":867,"title":{},"body":{"license.html":{}}}],["merge",{"_index":842,"title":{},"body":{"license.html":{}}}],["method",{"_index":678,"title":{},"body":{"changelog.html":{}}}],["methods",{"_index":12,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"changelog.html":{}}}],["metrics",{"_index":539,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["milad",{"_index":822,"title":{},"body":{"license.html":{},"properties.html":{}}}],["miladezzat/memoz",{"_index":653,"title":{},"body":{"changelog.html":{}}}],["minute",{"_index":198,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["miscellaneous",{"_index":761,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["miss",{"_index":516,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["misscount",{"_index":120,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["misses",{"_index":507,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["missrate",{"_index":138,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["mit",{"_index":819,"title":{},"body":{"license.html":{}}}],["model",{"_index":890,"title":{},"body":{"properties.html":{}}}],["modify",{"_index":841,"title":{},"body":{"license.html":{}}}],["modules",{"_index":886,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":281,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/variables.html":{}}}],["mutex",{"_index":296,"title":{"classes/Mutex.html":{}},"body":{"classes/Mutex.html":{},"coverage.html":{},"index.html":{}}}],["n",{"_index":294,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["name",{"_index":32,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["needed",{"_index":442,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["neq",{"_index":272,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["nested",{"_index":241,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["never",{"_index":462,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["new",{"_index":23,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["next",{"_index":203,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["nin",{"_index":277,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["node",{"_index":351,"title":{},"body":{"classes/PersistenceManager.html":{},"miscellaneous/variables.html":{}}}],["node.$and.every((subnode",{"_index":926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["node.$or.some((subnode",{"_index":930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["node.ts",{"_index":733,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["nodejs",{"_index":897,"title":{},"body":{"properties.html":{}}}],["nodejs.timeout",{"_index":147,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["non",{"_index":944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["noninfringement",{"_index":871,"title":{},"body":{"license.html":{}}}],["notice",{"_index":856,"title":{},"body":{"license.html":{}}}],["now",{"_index":208,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["npm",{"_index":790,"title":{},"body":{"index.html":{}}}],["null",{"_index":587,"title":{},"body":{"classes/TransactionManager.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":144,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["number.max_safe_integer",{"_index":389,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["object",{"_index":498,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"miscellaneous/variables.html":{}}}],["object.entries(sortobj",{"_index":447,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["object.ts",{"_index":748,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["obtaining",{"_index":831,"title":{},"body":{"license.html":{}}}],["offering",{"_index":781,"title":{},"body":{"index.html":{}}}],["oldest",{"_index":233,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["oldestentry",{"_index":235,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["oldestentry.value",{"_index":239,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["oldestkey",{"_index":228,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["one",{"_index":929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["one.ts",{"_index":741,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["onevict",{"_index":121,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["onfinally",{"_index":405,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["onfulfilled",{"_index":418,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["onrejected",{"_index":401,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["operation",{"_index":315,"title":{},"body":{"classes/Mutex.html":{}}}],["operations",{"_index":784,"title":{},"body":{"index.html":{}}}],["operator",{"_index":289,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/variables.html":{}}}],["optional",{"_index":33,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":142,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["order",{"_index":446,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["original",{"_index":364,"title":{},"body":{"classes/PersistenceManager.html":{},"classes/TransactionManager.html":{}}}],["otherwise",{"_index":428,"title":{},"body":{"classes/QueryBuilder.html":{},"license.html":{}}}],["out",{"_index":883,"title":{},"body":{"license.html":{}}}],["over",{"_index":815,"title":{},"body":{"index.html":{}}}],["overriding",{"_index":532,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["overview",{"_index":887,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":682,"title":{"properties.html":{}},"body":{"changelog.html":{}}}],["page",{"_index":817,"title":{},"body":{"index.html":{}}}],["pages",{"_index":655,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["paginated",{"_index":437,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["paginatedresult",{"_index":456,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["pagination",{"_index":455,"title":{},"body":{"classes/QueryBuilder.html":{},"index.html":{}}}],["param",{"_index":540,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["parameters",{"_index":31,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"miscellaneous/functions.html":{}}}],["particular",{"_index":869,"title":{},"body":{"license.html":{}}}],["partition",{"_index":568,"title":{},"body":{"classes/Shard.html":{}}}],["partitiondocumentsby",{"_index":552,"title":{},"body":{"classes/Shard.html":{}}}],["partitiondocumentsby(field",{"_index":562,"title":{},"body":{"classes/Shard.html":{}}}],["partitions",{"_index":571,"title":{},"body":{"classes/Shard.html":{}}}],["partitions[key",{"_index":574,"title":{},"body":{"classes/Shard.html":{}}}],["partitions[key].push(doc",{"_index":575,"title":{},"body":{"classes/Shard.html":{}}}],["pass",{"_index":925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passed",{"_index":63,"title":{},"body":{"classes/IndexManager.html":{}}}],["path",{"_index":334,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["path.dirname(this.filepath",{"_index":343,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["path.resolve(filepath",{"_index":339,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["per",{"_index":546,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"index.html":{}}}],["performance",{"_index":895,"title":{},"body":{"properties.html":{}}}],["performance.now",{"_index":209,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["permission",{"_index":825,"title":{},"body":{"license.html":{}}}],["permit",{"_index":849,"title":{},"body":{"license.html":{}}}],["persist",{"_index":795,"title":{},"body":{"index.html":{},"properties.html":{}}}],["persistence",{"_index":786,"title":{},"body":{"index.html":{}}}],["persistencemanager",{"_index":321,"title":{"classes/PersistenceManager.html":{}},"body":{"classes/PersistenceManager.html":{},"coverage.html":{}}}],["persists",{"_index":780,"title":{},"body":{"index.html":{},"properties.html":{}}}],["persisttodisk",{"_index":267,"title":{},"body":{"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"interfaces/SimpleCondition.html":{},"index.html":{}}}],["person",{"_index":830,"title":{},"body":{"license.html":{}}}],["persons",{"_index":850,"title":{},"body":{"license.html":{}}}],["pipeline",{"_index":627,"title":{},"body":{"changelog.html":{}}}],["pipelining",{"_index":894,"title":{},"body":{"properties.html":{}}}],["populate",{"_index":367,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["portions",{"_index":860,"title":{},"body":{"license.html":{}}}],["precompile",{"_index":933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["presist",{"_index":632,"title":{},"body":{"changelog.html":{}}}],["private",{"_index":10,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}}}],["progress",{"_index":594,"title":{},"body":{"classes/TransactionManager.html":{}}}],["promise",{"_index":173,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{}}}],["promise.resolve",{"_index":299,"title":{},"body":{"classes/Mutex.html":{}}}],["promiselike",{"_index":373,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["promises",{"_index":332,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["prop",{"_index":478,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"properties.html":{}}}],["property",{"_index":101,"title":{},"body":{"classes/Indexing.html":{},"miscellaneous/variables.html":{}}}],["provide",{"_index":350,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["provided",{"_index":523,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["proxy",{"_index":470,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["proxy(builder",{"_index":476,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["public",{"_index":13,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}}}],["publish",{"_index":843,"title":{},"body":{"license.html":{}}}],["pubsub",{"_index":898,"title":{},"body":{"properties.html":{}}}],["purpose",{"_index":870,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":468,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["query",{"_index":34,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/QueryBuilder.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["query(query",{"_index":82,"title":{},"body":{"classes/Indexing.html":{}}}],["querybuilder",{"_index":368,"title":{"classes/QueryBuilder.html":{}},"body":{"classes/QueryBuilder.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["querycache",{"_index":376,"title":{"classes/QueryCache.html":{}},"body":{"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"coverage.html":{}}}],["querycacheoptions",{"_index":493,"title":{"interfaces/QueryCacheOptions.html":{}},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"coverage.html":{}}}],["querykey",{"_index":377,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["queue",{"_index":896,"title":{},"body":{"properties.html":{}}}],["ram",{"_index":900,"title":{},"body":{"properties.html":{}}}],["readonly",{"_index":794,"title":{},"body":{"index.html":{}}}],["reason",{"_index":398,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["receiver",{"_index":479,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["record",{"_index":412,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["recursive",{"_index":345,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["redis",{"_index":893,"title":{},"body":{"properties.html":{}}}],["reduce",{"_index":934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refactors",{"_index":688,"title":{},"body":{"changelog.html":{}}}],["reference",{"_index":365,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["reflect.get(target",{"_index":480,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["reflect.ownkeys(value).length",{"_index":943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["remove",{"_index":524,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"changelog.html":{}}}],["removedocument",{"_index":71,"title":{},"body":{"classes/Indexing.html":{}}}],["removedocument(document",{"_index":84,"title":{},"body":{"classes/Indexing.html":{}}}],["removes",{"_index":520,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["reorder",{"_index":131,"title":{},"body":{"classes/LRUCache.html":{}}}],["reorder(key",{"_index":180,"title":{},"body":{"classes/LRUCache.html":{}}}],["repeated",{"_index":935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["repository",{"_index":907,"title":{},"body":{"properties.html":{}}}],["resolve",{"_index":309,"title":{},"body":{"classes/Mutex.html":{},"changelog.html":{}}}],["resolvedresult",{"_index":438,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["resolvedresult.slice(this.skipcount",{"_index":457,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["resolvedresult.sort((a",{"_index":444,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["resolveresult",{"_index":384,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["resolves",{"_index":426,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["restore",{"_index":613,"title":{},"body":{"classes/TransactionManager.html":{}}}],["restriction",{"_index":837,"title":{},"body":{"license.html":{}}}],["result",{"_index":262,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/Mutex.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["resultpromise",{"_index":312,"title":{},"body":{"classes/Mutex.html":{},"classes/QueryBuilder.html":{}}}],["resultpromise.then",{"_index":318,"title":{},"body":{"classes/Mutex.html":{}}}],["results",{"_index":55,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results.add(doc",{"_index":65,"title":{},"body":{"classes/IndexManager.html":{}}}],["retrieve",{"_index":508,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["retrieves",{"_index":502,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["return",{"_index":52,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/Mutex.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":27,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"miscellaneous/functions.html":{}}}],["rights",{"_index":840,"title":{},"body":{"license.html":{}}}],["rollback",{"_index":612,"title":{},"body":{"classes/TransactionManager.html":{}}}],["rollbacktransaction",{"_index":585,"title":{},"body":{"classes/TransactionManager.html":{}}}],["run",{"_index":310,"title":{},"body":{"classes/Mutex.html":{}}}],["safety",{"_index":799,"title":{},"body":{"index.html":{}}}],["savetodisk",{"_index":325,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["sell",{"_index":847,"title":{},"body":{"license.html":{}}}],["serialize",{"_index":132,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["serializedcache",{"_index":164,"title":{},"body":{"classes/LRUCache.html":{}}}],["set",{"_index":56,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/QueryCache.html":{},"properties.html":{}}}],["set(key",{"_index":183,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["setinterval",{"_index":217,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["setup",{"_index":663,"title":{},"body":{"changelog.html":{}}}],["shall",{"_index":857,"title":{},"body":{"license.html":{}}}],["shard",{"_index":547,"title":{"classes/Shard.html":{}},"body":{"classes/Shard.html":{},"coverage.html":{}}}],["simple",{"_index":244,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["simplecondition",{"_index":285,"title":{"interfaces/SimpleCondition.html":{}},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["size",{"_index":136,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"miscellaneous/functions.html":{}}}],["skip",{"_index":385,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["skip(skipcount",{"_index":409,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["skipcount",{"_index":378,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["smaller",{"_index":768,"title":{},"body":{"miscellaneous/functions.html":{}}}],["snapshot",{"_index":596,"title":{},"body":{"classes/TransactionManager.html":{}}}],["software",{"_index":833,"title":{},"body":{"license.html":{}}}],["solve",{"_index":696,"title":{},"body":{"changelog.html":{}}}],["sort",{"_index":386,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["sort(sortconditions",{"_index":411,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["sortconditions",{"_index":379,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["sorted",{"_index":436,"title":{},"body":{"classes/QueryBuilder.html":{},"properties.html":{}}}],["sorting",{"_index":441,"title":{},"body":{"classes/QueryBuilder.html":{},"index.html":{}}}],["sortobj",{"_index":445,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{}}}],["specific",{"_index":531,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{}}}],["specified",{"_index":770,"title":{},"body":{"miscellaneous/functions.html":{}}}],["split",{"_index":771,"title":{},"body":{"miscellaneous/functions.html":{}}}],["splits",{"_index":767,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../evaluate",{"_index":917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../get",{"_index":764,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../helper.ts",{"_index":763,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../is",{"_index":918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../lru",{"_index":915,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../memoz",{"_index":765,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../types.ts",{"_index":914,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/constants/memoz",{"_index":719,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/memoz.ts",{"_index":725,"title":{},"body":{"coverage.html":{}}}],["src/types.ts",{"_index":266,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/utils/evaluate",{"_index":730,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/get",{"_index":369,"title":{},"body":{"classes/QueryBuilder.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/utils/helper.ts",{"_index":743,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/index",{"_index":6,"title":{},"body":{"classes/IndexManager.html":{},"coverage.html":{}}}],["src/utils/indexing.ts",{"_index":68,"title":{},"body":{"classes/Indexing.html":{},"coverage.html":{}}}],["src/utils/indexing.ts:13",{"_index":77,"title":{},"body":{"classes/Indexing.html":{}}}],["src/utils/indexing.ts:21",{"_index":85,"title":{},"body":{"classes/Indexing.html":{}}}],["src/utils/indexing.ts:31",{"_index":83,"title":{},"body":{"classes/Indexing.html":{}}}],["src/utils/indexing.ts:36",{"_index":81,"title":{},"body":{"classes/Indexing.html":{}}}],["src/utils/indexing.ts:4",{"_index":75,"title":{},"body":{"classes/Indexing.html":{}}}],["src/utils/indexing.ts:6",{"_index":74,"title":{},"body":{"classes/Indexing.html":{}}}],["src/utils/is",{"_index":747,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/lru",{"_index":112,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/utils/memoz",{"_index":753,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/mutex.ts",{"_index":297,"title":{},"body":{"classes/Mutex.html":{},"coverage.html":{}}}],["src/utils/mutex.ts:2",{"_index":300,"title":{},"body":{"classes/Mutex.html":{}}}],["src/utils/mutex.ts:4",{"_index":302,"title":{},"body":{"classes/Mutex.html":{}}}],["src/utils/persistence",{"_index":322,"title":{},"body":{"classes/PersistenceManager.html":{},"coverage.html":{}}}],["src/utils/query",{"_index":488,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"coverage.html":{}}}],["src/utils/shared.ts",{"_index":548,"title":{},"body":{"classes/Shard.html":{},"coverage.html":{}}}],["src/utils/shared.ts:14",{"_index":561,"title":{},"body":{"classes/Shard.html":{}}}],["src/utils/shared.ts:19",{"_index":563,"title":{},"body":{"classes/Shard.html":{}}}],["src/utils/shared.ts:33",{"_index":560,"title":{},"body":{"classes/Shard.html":{}}}],["src/utils/shared.ts:37",{"_index":558,"title":{},"body":{"classes/Shard.html":{}}}],["src/utils/shared.ts:45",{"_index":556,"title":{},"body":{"classes/Shard.html":{}}}],["src/utils/shared.ts:6",{"_index":553,"title":{},"body":{"classes/Shard.html":{}}}],["src/utils/shared.ts:9",{"_index":555,"title":{},"body":{"classes/Shard.html":{}}}],["src/utils/transaction",{"_index":579,"title":{},"body":{"classes/TransactionManager.html":{},"coverage.html":{}}}],["startcleanup",{"_index":133,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["started",{"_index":615,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["state",{"_index":597,"title":{},"body":{"classes/TransactionManager.html":{}}}],["statements",{"_index":718,"title":{},"body":{"coverage.html":{}}}],["statistics",{"_index":514,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["stayalive",{"_index":122,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["stopcleanup",{"_index":134,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["storage",{"_index":901,"title":{},"body":{"properties.html":{}}}],["storagepath",{"_index":268,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"index.html":{}}}],["store",{"_index":802,"title":{},"body":{"index.html":{}}}],["stores",{"_index":536,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["strategy",{"_index":231,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["strict",{"_index":282,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["string",{"_index":37,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["string(doc[field",{"_index":573,"title":{},"body":{"classes/Shard.html":{}}}],["string|undefined",{"_index":335,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["structure",{"_index":892,"title":{},"body":{"properties.html":{}}}],["subject",{"_index":852,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":845,"title":{},"body":{"license.html":{}}}],["subnode",{"_index":928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["substantial",{"_index":859,"title":{},"body":{"license.html":{}}}],["supports",{"_index":529,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"index.html":{}}}],["switch",{"_index":922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["symbol.tostringtag",{"_index":469,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["t",{"_index":288,"title":{},"body":{"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":760,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":759,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":595,"title":{},"body":{"classes/TransactionManager.html":{}}}],["template",{"_index":776,"title":{},"body":{"miscellaneous/functions.html":{}}}],["temporary",{"_index":605,"title":{},"body":{"classes/TransactionManager.html":{}}}],["ternaries",{"_index":242,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["test",{"_index":809,"title":{},"body":{"index.html":{}}}],["testing",{"_index":714,"title":{},"body":{"changelog.html":{}}}],["tests",{"_index":712,"title":{},"body":{"changelog.html":{}}}],["then(onfulfilled",{"_index":414,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.cache",{"_index":542,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["this.cache.clear",{"_index":249,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["this.cache.delete(key",{"_index":211,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["this.cache.delete(oldestkey",{"_index":237,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.cache.get(key",{"_index":220,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["this.cache.get(oldestkey",{"_index":236,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.cache.has(key",{"_index":225,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.cache.keys().next().value",{"_index":232,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.cache.keys()].shift",{"_index":234,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.cache.set(key",{"_index":248,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["this.cache.size",{"_index":226,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.cachehits",{"_index":543,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["this.cachemisses",{"_index":544,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["this.cleanupexpiredentries",{"_index":218,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.cleanupinterval",{"_index":215,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.cleanuptimer",{"_index":216,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.db",{"_index":337,"title":{},"body":{"classes/PersistenceManager.html":{},"classes/TransactionManager.html":{}}}],["this.db.clear",{"_index":363,"title":{},"body":{"classes/PersistenceManager.html":{},"classes/Shard.html":{}}}],["this.db.delete(id",{"_index":577,"title":{},"body":{"classes/Shard.html":{}}}],["this.db.get(id",{"_index":576,"title":{},"body":{"classes/Shard.html":{}}}],["this.db.set(doc.id",{"_index":566,"title":{},"body":{"classes/Shard.html":{}}}],["this.db.set(key",{"_index":366,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["this.dbsnapshot",{"_index":601,"title":{},"body":{"classes/TransactionManager.html":{}}}],["this.entries",{"_index":254,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.evictionstrategy",{"_index":229,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.exec().catch(onrejected",{"_index":464,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.exec().finally(onfinally",{"_index":465,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.exec().then(onfulfilled",{"_index":463,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.fields",{"_index":86,"title":{},"body":{"classes/Indexing.html":{}}}],["this.fields.map((field",{"_index":102,"title":{},"body":{"classes/Indexing.html":{}}}],["this.filepath",{"_index":338,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["this.get(key",{"_index":261,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.getdocuments().foreach((doc",{"_index":572,"title":{},"body":{"classes/Shard.html":{}}}],["this.getindex(object.keys(query",{"_index":57,"title":{},"body":{"classes/IndexManager.html":{}}}],["this.getkey(document",{"_index":89,"title":{},"body":{"classes/Indexing.html":{}}}],["this.getkey(query",{"_index":97,"title":{},"body":{"classes/Indexing.html":{}}}],["this.hitcount",{"_index":223,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.index",{"_index":87,"title":{},"body":{"classes/Indexing.html":{}}}],["this.index.delete(key",{"_index":96,"title":{},"body":{"classes/Indexing.html":{}}}],["this.index.get(key",{"_index":98,"title":{},"body":{"classes/Indexing.html":{}}}],["this.index.get(key)!.add(document.id",{"_index":92,"title":{},"body":{"classes/Indexing.html":{}}}],["this.index.get(key)!.delete(document.id",{"_index":93,"title":{},"body":{"classes/Indexing.html":{}}}],["this.index.get(key)!.size",{"_index":94,"title":{},"body":{"classes/Indexing.html":{}}}],["this.index.has(key",{"_index":90,"title":{},"body":{"classes/Indexing.html":{}}}],["this.index.set(key",{"_index":91,"title":{},"body":{"classes/Indexing.html":{}}}],["this.indexes.clear",{"_index":66,"title":{},"body":{"classes/IndexManager.html":{}}}],["this.indexes.foreach((index",{"_index":50,"title":{},"body":{"classes/IndexManager.html":{}}}],["this.indexes.get(fields.join('_",{"_index":53,"title":{},"body":{"classes/IndexManager.html":{}}}],["this.isexpired(entry",{"_index":222,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.isresolved",{"_index":423,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.limitcount",{"_index":434,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.maxsize",{"_index":227,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.misscount",{"_index":221,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.mutex",{"_index":317,"title":{},"body":{"classes/Mutex.html":{}}}],["this.mutex.then",{"_index":313,"title":{},"body":{"classes/Mutex.html":{}}}],["this.onevict",{"_index":212,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.onevict(key",{"_index":213,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.onevict(oldestkey",{"_index":238,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.persisttodisk",{"_index":341,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["this.querycache",{"_index":424,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.querycache.set(this.querykey",{"_index":461,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.querykey",{"_index":425,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.reorder(key",{"_index":224,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.resolveresult",{"_index":439,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.result",{"_index":422,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.resultpromise",{"_index":421,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.set(key",{"_index":258,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.skipcount",{"_index":433,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.sortconditions",{"_index":431,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.sortconditions.length",{"_index":443,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.transactiondb",{"_index":591,"title":{},"body":{"classes/TransactionManager.html":{}}}],["this.ttl",{"_index":247,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["thread",{"_index":798,"title":{},"body":{"index.html":{}}}],["throw",{"_index":106,"title":{},"body":{"classes/Indexing.html":{},"classes/TransactionManager.html":{}}}],["timestamp",{"_index":777,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tort",{"_index":881,"title":{},"body":{"license.html":{}}}],["total",{"_index":259,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"index.html":{}}}],["totalpages",{"_index":811,"title":{},"body":{"index.html":{}}}],["tracks",{"_index":505,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["transaction",{"_index":599,"title":{},"body":{"classes/TransactionManager.html":{},"changelog.html":{},"properties.html":{}}}],["transactiondb",{"_index":581,"title":{},"body":{"classes/TransactionManager.html":{}}}],["transactionmanager",{"_index":578,"title":{"classes/TransactionManager.html":{}},"body":{"classes/TransactionManager.html":{},"coverage.html":{}}}],["tresult",{"_index":400,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["tresult1",{"_index":416,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["tresult2",{"_index":417,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["true",{"_index":250,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"index.html":{}}}],["ttl",{"_index":123,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["type",{"_index":18,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":912,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":481,"title":{},"body":{"classes/QueryBuilder.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":48,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}}}],["typescript",{"_index":902,"title":{},"body":{"properties.html":{}}}],["typing",{"_index":283,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["uncomment",{"_index":801,"title":{},"body":{"index.html":{}}}],["undef",{"_index":205,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["undefined",{"_index":41,"title":{},"body":{"classes/IndexManager.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"miscellaneous/variables.html":{}}}],["unit",{"_index":713,"title":{},"body":{"changelog.html":{}}}],["unknown",{"_index":941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update",{"_index":314,"title":{},"body":{"classes/Mutex.html":{},"changelog.html":{}}}],["updated",{"_index":293,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["updateindexes",{"_index":17,"title":{},"body":{"classes/IndexManager.html":{}}}],["updateindexes(doc",{"_index":42,"title":{},"body":{"classes/IndexManager.html":{}}}],["updatemanyresult",{"_index":292,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["updates",{"_index":528,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["usage",{"_index":788,"title":{},"body":{"index.html":{}}}],["use",{"_index":429,"title":{},"body":{"classes/QueryBuilder.html":{},"index.html":{},"license.html":{}}}],["usemutex",{"_index":269,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"index.html":{}}}],["user",{"_index":565,"title":{},"body":{"classes/Shard.html":{},"index.html":{}}}],["users",{"_index":803,"title":{},"body":{"index.html":{}}}],["usersperpage",{"_index":816,"title":{},"body":{"index.html":{}}}],["using",{"_index":243,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["utf8",{"_index":361,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["v",{"_index":169,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["valid",{"_index":750,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["value",{"_index":22,"title":{},"body":{"classes/IndexManager.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["value.apply(target",{"_index":483,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["values",{"_index":452,"title":{},"body":{"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["variable",{"_index":721,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":916,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":889,"title":{},"body":{"properties.html":{}}}],["void",{"_index":45,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/Mutex.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}}}],["wait",{"_index":306,"title":{},"body":{"classes/Mutex.html":{}}}],["warranties",{"_index":866,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":861,"title":{},"body":{"license.html":{}}}],["whether",{"_index":797,"title":{},"body":{"index.html":{},"license.html":{}}}],["without",{"_index":836,"title":{},"body":{"license.html":{}}}],["wrap",{"_index":430,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["writestream",{"_index":346,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["writestream.end",{"_index":349,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["writestream.write(json.stringify(array.from(this.db.entries",{"_index":348,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["xxxx",{"_index":959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["xxxxxxxx",{"_index":958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["xxxxxxxxxxxx",{"_index":962,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yarn",{"_index":791,"title":{},"body":{"index.html":{}}}],["yes",{"_index":185,"title":{},"body":{"classes/LRUCache.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{}}}],["yxxx",{"_index":961,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z0",{"_index":956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["za",{"_index":955,"title":{},"body":{"miscellaneous/variables.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/IndexManager.html":{"url":"classes/IndexManager.html","title":"class - IndexManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IndexManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/index-manager.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                indexes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                getFromIndex\n                            \n                            \n                                    Public\n                                getIndex\n                            \n                            \n                                    Public\n                                updateIndexes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        indexes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/utils/index-manager.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clear\n                        \n                    \n                \n            \n            \n                \n                        \n                    clear()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/index-manager.ts:31\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getFromIndex\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFromIndex(query: any, db: Map>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/index-manager.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                db\n                                            \n                                                        Map>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DocumentWithId[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getIndex\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIndex(fields: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/index-manager.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Indexing | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updateIndexes\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateIndexes(doc: DocumentWithId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/index-manager.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                doc\n                                            \n                                                            DocumentWithId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DocumentWithId, MEMOZID } from '../types';\nimport Indexing from './indexing';\n\nexport class IndexManager {\n  private indexes: Map> = new Map();\n\n  public updateIndexes(doc: DocumentWithId): void {\n    this.indexes.forEach((index) => {\n      index.addDocument(doc);\n    });\n  }\n\n  public getIndex(fields: string[]): Indexing | undefined {\n    return this.indexes.get(fields.join('_'));\n  }\n\n  public getFromIndex(query: any, db: Map>): DocumentWithId[] {\n    const results: Set> = new Set();\n    const index = this.getIndex(Object.keys(query));\n    if (index) {\n      const indexedIds = index.query(query);\n      indexedIds.forEach((id) => {\n        const doc = db.get(id); // Access the db Map passed as an argument\n        if (doc) results.add(doc);\n      });\n    }\n    return [...results];\n  }\n\n  public clear() {\n    return this.indexes.clear();\n  }\n}\n\nexport default IndexManager;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Indexing.html":{"url":"classes/Indexing.html","title":"class - Indexing","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Indexing\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/indexing.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fields\n                            \n                            \n                                    Private\n                                index\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addDocument\n                            \n                            \n                                    Private\n                                getKey\n                            \n                            \n                                    Public\n                                query\n                            \n                            \n                                    Public\n                                removeDocument\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fields: string[])\n                    \n                \n                        \n                            \n                                Defined in src/utils/indexing.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fields\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        fields\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/indexing.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/indexing.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        addDocument\n                        \n                    \n                \n            \n            \n                \n                        \n                    addDocument(document: DocumentWithId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/indexing.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                document\n                                            \n                                                            DocumentWithId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKey(document: DocumentWithId | ConditionNode>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/indexing.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                document\n                                            \n                                                        DocumentWithId | ConditionNode>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        query\n                        \n                    \n                \n            \n            \n                \n                        \n                    query(query: ConditionNode>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/indexing.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            ConditionNode>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Set\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removeDocument\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeDocument(document: DocumentWithId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/indexing.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                document\n                                            \n                                                            DocumentWithId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConditionNode, DocumentWithId, MEMOZID } from '../types';\n\nexport class Indexing {\n  private fields: string[];\n\n  private index: Map>;\n\n  constructor(fields: string[]) {\n    this.fields = fields;\n    this.index = new Map();\n  }\n\n  public addDocument(document: DocumentWithId): void {\n    const key = this.getKey(document);\n    if (!this.index.has(key)) {\n      this.index.set(key, new Set());\n    }\n      this.index.get(key)!.add(document.id);\n  }\n\n  public removeDocument(document: DocumentWithId): void {\n    const key = this.getKey(document);\n    if (this.index.has(key)) {\n        this.index.get(key)!.delete(document.id);\n        if (this.index.get(key)!.size === 0) {\n          this.index.delete(key);\n        }\n    }\n  }\n\n  public query(query: ConditionNode>): Set {\n    const key = this.getKey(query);\n    return this.index.has(key) ? this.index.get(key)! : new Set();\n  }\n\n  private getKey(document: DocumentWithId | ConditionNode>): string {\n    if ('id' in document) { // Check if document has an 'id' property\n      return this.fields.map((field: string) => document[field]).join('_');\n    }\n    // Handle the case where document is a ConditionNode type\n    // (you might throw an error, return an empty string, or handle it differently)\n    throw new Error('Unexpected document type for indexing');\n  }\n}\n\nexport default Indexing;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LRUCache.html":{"url":"classes/LRUCache.html","title":"class - LRUCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LRUCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/lru-cache.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                cache\n                            \n                            \n                                    Private\n                                cleanupInterval\n                            \n                            \n                                    Private\n                                    Optional\n                                cleanupTimer\n                            \n                            \n                                    Private\n                                evictionStrategy\n                            \n                            \n                                    Private\n                                hitCount\n                            \n                            \n                                    Private\n                                maxSize\n                            \n                            \n                                    Private\n                                missCount\n                            \n                            \n                                    Private\n                                    Optional\n                                onEvict\n                            \n                            \n                                    Private\n                                    Optional\n                                stayAlive\n                            \n                            \n                                    Private\n                                    Optional\n                                ttl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                cleanupExpiredEntries\n                            \n                            \n                                clear\n                            \n                            \n                                delete\n                            \n                            \n                                deserialize\n                            \n                            \n                                entries\n                            \n                            \n                                get\n                            \n                            \n                                    Async\n                                getAsync\n                            \n                            \n                                has\n                            \n                            \n                                    Private\n                                isExpired\n                            \n                            \n                                    Private\n                                reorder\n                            \n                            \n                                serialize\n                            \n                            \n                                set\n                            \n                            \n                                    Private\n                                startCleanup\n                            \n                            \n                                stopCleanup\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    size\n                                \n                                \n                                    hitRate\n                                \n                                \n                                    missRate\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options: LRUCacheOptions)\n                    \n                \n                        \n                            \n                                Defined in src/utils/lru-cache.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        LRUCacheOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cache\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cleanupInterval\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 60000\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        cleanupTimer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     NodeJS.Timeout\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        evictionStrategy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EvictionStrategy\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hitCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        maxSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        missCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        onEvict\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        stayAlive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        ttl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cleanupExpiredEntries\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanupExpiredEntries()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:147\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(key: K)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:143\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(serializedCache: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:178\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                serializedCache\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n            \n                \nentries()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:167\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Array<>\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(key: K)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     V | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAsync\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAsync(key: K, fetchFn: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:196\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fetchFn\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has\n                        \n                    \n                \n            \n            \n                \nhas(key: K)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:155\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isExpired\n                        \n                    \n                \n            \n            \n                \n                        \n                    isExpired(entry: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entry\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        reorder\n                        \n                    \n                \n            \n            \n                \n                        \n                    reorder(key: K)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:173\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(key: K, value: V, ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                        V\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        startCleanup\n                        \n                    \n                \n            \n            \n                \n                        \n                    startCleanup()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:79\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stopCleanup\n                        \n                    \n                \n            \n            \n                \nstopCleanup()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:85\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        size\n                    \n                \n\n                \n                    \n                        getsize()\n                    \n                \n                            \n                                \n                                    Defined in src/utils/lru-cache.ts:151\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        hitRate\n                    \n                \n\n                \n                    \n                        gethitRate()\n                    \n                \n                            \n                                \n                                    Defined in src/utils/lru-cache.ts:186\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        missRate\n                    \n                \n\n                \n                    \n                        getmissRate()\n                    \n                \n                            \n                                \n                                    Defined in src/utils/lru-cache.ts:191\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        type EvictionStrategy = 'LRU' | 'FIFO';\n\nexport interface LRUCacheOptions {\n    maxSize: number;\n    ttl?: number;\n    onEvict?: (key: K, value: V) => void;\n    evictionStrategy?: EvictionStrategy;\n    stayAlive?: boolean;\n}\nexport class LRUCache {\n  private cache: Map = new Map();\n\n  private maxSize: number;\n\n  private ttl?: number;\n\n  private onEvict?: (key: K, value: V) => void;\n\n  private evictionStrategy: EvictionStrategy;\n\n  private stayAlive?: boolean;\n\n  private hitCount: number = 0;\n\n  private missCount: number = 0;\n\n  private cleanupInterval: number = 60000; // 1 minute cleanup interval\n\n  // eslint-disable-next-line no-undef\n  private cleanupTimer?: NodeJS.Timeout;\n\n  constructor(options: LRUCacheOptions) {\n    const {\n      maxSize,\n      ttl, onEvict,\n      evictionStrategy = 'LRU',\n      stayAlive = false,\n    } = options;\n\n    if (maxSize  entry.expiry;\n  }\n\n  private cleanupExpiredEntries(): void {\n    const now = performance.now();\n    Array.from(this.cache.entries()).forEach(([key, entry]) => {\n      if (entry.expiry !== undefined && now > entry.expiry) {\n        this.cache.delete(key);\n        if (this.onEvict) {\n          this.onEvict(key, entry.value);\n        }\n      }\n    });\n  }\n\n  private startCleanup(): void {\n    if (this.cleanupInterval) {\n      this.cleanupTimer = setInterval(() => this.cleanupExpiredEntries(), this.cleanupInterval);\n    }\n  }\n\n  stopCleanup(): void {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n    }\n  }\n\n  get(key: K): V | undefined {\n    const entry = this.cache.get(key);\n    if (!entry) {\n      this.missCount += 1;\n      return undefined;\n    }\n\n    if (this.isExpired(entry)) {\n      this.cache.delete(key);\n      this.missCount += 1;\n      return undefined;\n    }\n\n    this.hitCount += 1;\n    this.reorder(key);\n    return entry.value;\n  }\n\n  set(key: K, value: V, ttl?: number): void {\n    if (this.cache.has(key)) {\n      this.reorder(key);\n    } else if (this.cache.size === this.maxSize) {\n      let oldestKey: K | undefined;\n\n      if (this.evictionStrategy === 'LRU') {\n        // Get the first key for LRU strategy\n        oldestKey = this.cache.keys().next().value;\n      } else if (this.evictionStrategy === 'FIFO') {\n        // Get the oldest key for FIFO strategy\n        oldestKey = [...this.cache.keys()].shift();\n      }\n\n      if (oldestKey !== undefined) {\n        const oldestEntry = this.cache.get(oldestKey);\n        this.cache.delete(oldestKey);\n        if (this.onEvict && oldestEntry) {\n          this.onEvict(oldestKey, oldestEntry.value);\n        }\n      }\n    }\n\n    // Avoid nested ternaries by using simple conditionals\n    let expiry: number | undefined;\n    if (ttl !== undefined) {\n      expiry = performance.now() + ttl;\n    } else if (this.ttl !== undefined) {\n      expiry = performance.now() + this.ttl;\n    }\n\n    this.cache.set(key, { value, expiry });\n  }\n\n  delete(key: K): boolean {\n    return this.cache.delete(key);\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n\n  get size(): number {\n    return this.cache.size;\n  }\n\n  has(key: K): boolean {\n    const entry = this.cache.get(key);\n    if (!entry) return false;\n\n    if (this.isExpired(entry)) {\n      this.cache.delete(key);\n      return false;\n    }\n\n    return true;\n  }\n\n  entries(): Array {\n    return Array.from(this.cache.entries())\n      .filter(([, entry]) => !this.isExpired(entry))\n      .map(([key, entry]) => [key, entry.value]);\n  }\n\n  serialize(): string {\n    const entries = this.entries();\n    return JSON.stringify(entries);\n  }\n\n  deserialize(serializedCache: string): void {\n    const entries: [K, V][] = JSON.parse(serializedCache);\n    this.cache.clear();\n    entries.forEach(([key, value]) => {\n      this.set(key, value);\n    });\n  }\n\n  get hitRate(): number {\n    const total = this.hitCount + this.missCount;\n    return total === 0 ? 0 : this.hitCount / total;\n  }\n\n  get missRate(): number {\n    const total = this.hitCount + this.missCount;\n    return total === 0 ? 0 : this.missCount / total;\n  }\n\n  async getAsync(key: K, fetchFn: () => Promise): Promise {\n    const cached = this.get(key);\n    if (cached) {\n      return cached;\n    }\n\n    const result = await fetchFn();\n    this.set(key, result);\n    return result;\n  }\n}\n\nexport default LRUCache;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LRUCacheOptions.html":{"url":"interfaces/LRUCacheOptions.html","title":"interface - LRUCacheOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LRUCacheOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/lru-cache.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            evictionStrategy\n                                        \n                                \n                                \n                                        \n                                            maxSize\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onEvict\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stayAlive\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ttl\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        evictionStrategy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        evictionStrategy:         EvictionStrategy\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EvictionStrategy\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxSize\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onEvict\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onEvict:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stayAlive\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stayAlive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ttl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ttl:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type EvictionStrategy = 'LRU' | 'FIFO';\n\nexport interface LRUCacheOptions {\n    maxSize: number;\n    ttl?: number;\n    onEvict?: (key: K, value: V) => void;\n    evictionStrategy?: EvictionStrategy;\n    stayAlive?: boolean;\n}\nexport class LRUCache {\n  private cache: Map = new Map();\n\n  private maxSize: number;\n\n  private ttl?: number;\n\n  private onEvict?: (key: K, value: V) => void;\n\n  private evictionStrategy: EvictionStrategy;\n\n  private stayAlive?: boolean;\n\n  private hitCount: number = 0;\n\n  private missCount: number = 0;\n\n  private cleanupInterval: number = 60000; // 1 minute cleanup interval\n\n  // eslint-disable-next-line no-undef\n  private cleanupTimer?: NodeJS.Timeout;\n\n  constructor(options: LRUCacheOptions) {\n    const {\n      maxSize,\n      ttl, onEvict,\n      evictionStrategy = 'LRU',\n      stayAlive = false,\n    } = options;\n\n    if (maxSize  entry.expiry;\n  }\n\n  private cleanupExpiredEntries(): void {\n    const now = performance.now();\n    Array.from(this.cache.entries()).forEach(([key, entry]) => {\n      if (entry.expiry !== undefined && now > entry.expiry) {\n        this.cache.delete(key);\n        if (this.onEvict) {\n          this.onEvict(key, entry.value);\n        }\n      }\n    });\n  }\n\n  private startCleanup(): void {\n    if (this.cleanupInterval) {\n      this.cleanupTimer = setInterval(() => this.cleanupExpiredEntries(), this.cleanupInterval);\n    }\n  }\n\n  stopCleanup(): void {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n    }\n  }\n\n  get(key: K): V | undefined {\n    const entry = this.cache.get(key);\n    if (!entry) {\n      this.missCount += 1;\n      return undefined;\n    }\n\n    if (this.isExpired(entry)) {\n      this.cache.delete(key);\n      this.missCount += 1;\n      return undefined;\n    }\n\n    this.hitCount += 1;\n    this.reorder(key);\n    return entry.value;\n  }\n\n  set(key: K, value: V, ttl?: number): void {\n    if (this.cache.has(key)) {\n      this.reorder(key);\n    } else if (this.cache.size === this.maxSize) {\n      let oldestKey: K | undefined;\n\n      if (this.evictionStrategy === 'LRU') {\n        // Get the first key for LRU strategy\n        oldestKey = this.cache.keys().next().value;\n      } else if (this.evictionStrategy === 'FIFO') {\n        // Get the oldest key for FIFO strategy\n        oldestKey = [...this.cache.keys()].shift();\n      }\n\n      if (oldestKey !== undefined) {\n        const oldestEntry = this.cache.get(oldestKey);\n        this.cache.delete(oldestKey);\n        if (this.onEvict && oldestEntry) {\n          this.onEvict(oldestKey, oldestEntry.value);\n        }\n      }\n    }\n\n    // Avoid nested ternaries by using simple conditionals\n    let expiry: number | undefined;\n    if (ttl !== undefined) {\n      expiry = performance.now() + ttl;\n    } else if (this.ttl !== undefined) {\n      expiry = performance.now() + this.ttl;\n    }\n\n    this.cache.set(key, { value, expiry });\n  }\n\n  delete(key: K): boolean {\n    return this.cache.delete(key);\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n\n  get size(): number {\n    return this.cache.size;\n  }\n\n  has(key: K): boolean {\n    const entry = this.cache.get(key);\n    if (!entry) return false;\n\n    if (this.isExpired(entry)) {\n      this.cache.delete(key);\n      return false;\n    }\n\n    return true;\n  }\n\n  entries(): Array {\n    return Array.from(this.cache.entries())\n      .filter(([, entry]) => !this.isExpired(entry))\n      .map(([key, entry]) => [key, entry.value]);\n  }\n\n  serialize(): string {\n    const entries = this.entries();\n    return JSON.stringify(entries);\n  }\n\n  deserialize(serializedCache: string): void {\n    const entries: [K, V][] = JSON.parse(serializedCache);\n    this.cache.clear();\n    entries.forEach(([key, value]) => {\n      this.set(key, value);\n    });\n  }\n\n  get hitRate(): number {\n    const total = this.hitCount + this.missCount;\n    return total === 0 ? 0 : this.hitCount / total;\n  }\n\n  get missRate(): number {\n    const total = this.hitCount + this.missCount;\n    return total === 0 ? 0 : this.missCount / total;\n  }\n\n  async getAsync(key: K, fetchFn: () => Promise): Promise {\n    const cached = this.get(key);\n    if (cached) {\n      return cached;\n    }\n\n    const result = await fetchFn();\n    this.set(key, result);\n    return result;\n  }\n}\n\nexport default LRUCache;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MemozOptions.html":{"url":"interfaces/MemozOptions.html","title":"interface - MemozOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MemozOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            persistToDisk\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            storagePath\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            useMutex\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        persistToDisk\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        persistToDisk:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        storagePath\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        storagePath:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useMutex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useMutex:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type ComparisonOperator = '$eq' | '$neq' | '$gt' | '$gte' | '$lt' | '$lte' | '$in' | '$nin' | 'custom';\nexport type MEMOZID = string & { __brand__: 'MEMOZID' }; // You can enhance this with more strict MEMOZID typing if desired\n\nexport interface SimpleCondition {\n  field: keyof T;\n  operator: ComparisonOperator;\n  value: any;\n  customCompare?: (a: any, b: any) => boolean;\n}\n\nexport type ConditionNode =\n  | { $and: ConditionNode[] }\n  | { $or: ConditionNode[] }\n  | SimpleCondition;\n\nexport type DocumentWithId = T & { id: MEMOZID; } & { [key: string]: any; };\nexport type UpdateManyResult = { updated: boolean; n: number; documents: DocumentWithId[] };\n\nexport interface MemozOptions {\n    storagePath?: string;\n    persistToDisk?: boolean;\n    useMutex?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Mutex.html":{"url":"classes/Mutex.html","title":"class - Mutex","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Mutex\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/mutex.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                mutex\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                lock\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mutex\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Promise\n\n                    \n                \n                \n                    \n                        Default value : Promise.resolve()\n                    \n                \n                    \n                        \n                                Defined in src/utils/mutex.ts:2\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        lock\n                        \n                    \n                \n            \n            \n                \n                        \n                    lock(callback: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/mutex.ts:4\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                callback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Mutex {\n  private mutex: Promise = Promise.resolve();\n\n  public lock(callback: () => T | Promise): Promise {\n    // Locking mechanism: Wait for the current mutex chain to resolve,\n    // then run the callback and capture its result\n    const resultPromise = this.mutex.then(() => callback());\n\n    // Update the mutex to wait for the current operation to finish\n    this.mutex = resultPromise.then(() => undefined, () => undefined);\n\n    // Return the result of the callback, so the caller gets its value\n    return resultPromise;\n  }\n}\nexport default Mutex;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PersistenceManager.html":{"url":"classes/PersistenceManager.html","title":"class - PersistenceManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PersistenceManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/persistence-manager.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                db\n                            \n                            \n                                    Private\n                                filePath\n                            \n                            \n                                    Private\n                                persistToDisk\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                loadFromDisk\n                            \n                            \n                                    Public\n                                    Async\n                                saveToDisk\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(db: Map>, filePath: string | undefined, persistToDisk?: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/utils/persistence-manager.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                    Map>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filePath\n                                                  \n                                                        \n                                                                    string | undefined\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        persistToDisk\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map>\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/persistence-manager.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        filePath\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/persistence-manager.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        persistToDisk\n                        \n                    \n                \n            \n                \n                    \n                        Type :     boolean | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/persistence-manager.ts:11\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        loadFromDisk\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadFromDisk()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/persistence-manager.ts:31\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        saveToDisk\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveToDisk()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/persistence-manager.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import fs, { promises as fsPromises } from 'fs';\nimport path from 'path';\nimport { DocumentWithId, MEMOZID } from '../types';\n\nexport class PersistenceManager {\n  private db: Map>;\n\n  private filePath: string|undefined;\n\n  private persistToDisk: boolean|undefined;\n\n  constructor(db: Map>, filePath: string | undefined, persistToDisk?: boolean) {\n    this.db = db;\n    this.filePath = filePath ? path.resolve(filePath) : './data.json';\n    this.persistToDisk = persistToDisk;\n  }\n\n  public async saveToDisk(): Promise {\n    if (this.persistToDisk && this.filePath) {\n      const dir = path.dirname(this.filePath);\n\n      await fsPromises.mkdir(dir, { recursive: true });\n      const writeStream = fs.createWriteStream(this.filePath);\n\n      writeStream.write(JSON.stringify(Array.from(this.db.entries())));\n      writeStream.end();\n    }\n  }\n\n  public async loadFromDisk(): Promise {\n    // if filePath is provide and node exists create the file\n    if (this.filePath && !fs.existsSync(this.filePath)) {\n      await fsPromises.writeFile(this.filePath, []);\n    }\n\n    if (this.filePath && this.persistToDisk) {\n      // Check if the file exists\n      await fsPromises.access(this.filePath);\n      // Load the file contents\n      const data = await fsPromises.readFile(this.filePath, 'utf8');\n      if (data) {\n        const entries = JSON.parse(data) as [MEMOZID, DocumentWithId][];\n\n        this.db.clear(); // Clear the original Map reference\n        entries.forEach(([key, value]) => {\n          this.db.set(key, value); // Populate the original Map\n        });\n      }\n    }\n  }\n}\n\nexport default PersistenceManager;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryBuilder.html":{"url":"classes/QueryBuilder.html","title":"class - QueryBuilder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryBuilder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/get-many-query-builder.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        PromiseLike\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                isResolved\n                            \n                            \n                                    Private\n                                limitCount\n                            \n                            \n                                    Private\n                                queryCache\n                            \n                            \n                                    Private\n                                queryKey\n                            \n                            \n                                    Private\n                                result\n                            \n                            \n                                    Private\n                                    Optional\n                                resultPromise\n                            \n                            \n                                    Private\n                                skipCount\n                            \n                            \n                                    Private\n                                sortConditions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                catch\n                            \n                            \n                                    Public\n                                    Async\n                                exec\n                            \n                            \n                                    Public\n                                finally\n                            \n                            \n                                    Public\n                                limit\n                            \n                            \n                                    Private\n                                    Async\n                                resolveResult\n                            \n                            \n                                    Public\n                                skip\n                            \n                            \n                                    Public\n                                sort\n                            \n                            \n                                    Public\n                                then\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(result: DocumentWithId[] | Promise, queryCache: QueryCache, queryKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/utils/get-many-query-builder.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        result\n                                                  \n                                                        \n                                                                        DocumentWithId[] | Promise\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryCache\n                                                  \n                                                        \n                                                                        QueryCache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isResolved\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        limitCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : Number.MAX_SAFE_INTEGER\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        queryCache\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueryCache\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        queryKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        result\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentWithId[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        resultPromise\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Promise\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        skipCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sortConditions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array>\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:9\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        catch\n                        \n                    \n                \n            \n            \n                \n                        \n                    catch(onrejected?: (reason?: any) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:98\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    TResult\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                onrejected\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        exec\n                        \n                    \n                \n            \n            \n                \n                        \n                    exec()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:58\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        finally\n                        \n                    \n                \n            \n            \n                \n                        \n                    finally(onfinally?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                onfinally\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        limit\n                        \n                    \n                \n            \n            \n                \n                        \n                    limit(limitCount: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                limitCount\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        resolveResult\n                        \n                    \n                \n            \n            \n                \n                        \n                    resolveResult()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        skip\n                        \n                    \n                \n            \n            \n                \n                        \n                    skip(skipCount: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                skipCount\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sort\n                        \n                    \n                \n            \n            \n                \n                        \n                    sort(sortConditions?: Record | Record[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sortConditions\n                                            \n                                                        Record | Record[]\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        then\n                        \n                    \n                \n            \n            \n                \n                        \n                    then(onfulfilled?: (value?: DocumentWithId[]) => void, onrejected?: (reason?: any) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:91\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    TResult1\n                                    TResult2\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                onfulfilled\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                onrejected\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in src/utils/get-many-query-builder.ts:109\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { DocumentWithId } from '../types';\nimport QueryCache from './query-cache';\n\nexport class QueryBuilder implements PromiseLike[]> {\n  private result: DocumentWithId[] = [];\n  private resultPromise?: Promise[]>;\n  private queryCache: QueryCache;\n  private queryKey: string;\n  private sortConditions: Array> = [];\n  private skipCount: number = 0;\n  private limitCount: number = Number.MAX_SAFE_INTEGER;\n  private isResolved: boolean = false;\n\n  constructor(\n    result: DocumentWithId[] | Promise[]>,\n    queryCache: QueryCache,\n    queryKey: string\n  ) {\n    if (result instanceof Promise) {\n      this.resultPromise = result;\n    } else {\n      this.result = result;\n      this.isResolved = true;\n    }\n    this.queryCache = queryCache;\n    this.queryKey = queryKey;\n  }\n\n  // Resolves the result if it's a promise, otherwise returns the result\n  private async resolveResult(): Promise[]> {\n    if (!this.isResolved && this.resultPromise) {\n      this.result = await this.resultPromise;\n      this.isResolved = true;\n    }\n    return this.result;\n  }\n\n  public sort(sortConditions?: Record | Record[]): this {\n    if (sortConditions) {\n      // If sortConditions is an array, use it as is, otherwise wrap it in an array\n      this.sortConditions = Array.isArray(sortConditions) ? sortConditions : [sortConditions];\n    }\n    return this;\n  }\n  \n\n  public skip(skipCount: number): this {\n    this.skipCount = skipCount;\n    return this;\n  }\n\n  public limit(limitCount: number): this {\n    this.limitCount = limitCount;\n    return this;\n  }\n\n  // Executes the query and returns the sorted and paginated results\n  public async exec(): Promise[]> {\n    const resolvedResult = await this.resolveResult();\n\n    // Apply sorting if needed\n    if (this.sortConditions.length > 0) {\n      resolvedResult.sort((a, b) => {\n        for (const sortObj of this.sortConditions) {\n          for (const [key, order] of Object.entries(sortObj)) {\n            const aValue = a[key];\n            const bValue = b[key];\n            \n            // Skip undefined values\n            if (aValue === undefined || bValue === undefined) continue;\n            \n            if (aValue  bValue) return order === 'asc' ? 1 : -1;\n          }\n        }\n        return 0;\n      });\n    }\n\n    // Apply pagination\n    const paginatedResult = resolvedResult.slice(this.skipCount, this.skipCount + this.limitCount);\n\n    // Cache the result only if it's different\n    if (JSON.stringify(this.result) !== JSON.stringify(paginatedResult)) {\n      this.queryCache.set(this.queryKey, paginatedResult);\n    }\n\n    return paginatedResult;\n  }\n\n  public then[], TResult2 = never>(\n    onfulfilled?: (value: DocumentWithId[]) => TResult1 | PromiseLike,\n    onrejected?: (reason: any) => TResult2 | PromiseLike\n  ): Promise {\n    return this.exec().then(onfulfilled, onrejected);\n  }\n\n  public catch(\n    onrejected?: (reason: any) => TResult | PromiseLike\n  ): Promise[] | TResult> {\n    return this.exec().catch(onrejected);\n  }\n\n  public finally(onfinally?: () => void): Promise[]> {\n    return this.exec().finally(onfinally);\n  }\n\n  // Mark the class as Promise-like for chaining purposes\n  get [Symbol.toStringTag](): string {\n    return 'Promise';\n  }\n}\n\n// Proxy to enable chaining and ensure correct promise-like behavior\nexport function createQueryBuilderProxy(builder: QueryBuilder): QueryBuilder {\n  return new Proxy(builder, {\n    get(target, prop, receiver) {\n      const value = Reflect.get(target, prop, receiver);\n\n      if (typeof value === 'function') {\n        return (...args: any[]) => {\n          const result = value.apply(target, args);\n          return result instanceof QueryBuilder ? createQueryBuilderProxy(result) : result;\n        };\n      }\n\n      if (prop === 'then') {\n        return (...args: any[]) => builder.then(...args);\n      }\n      if (prop === 'catch') {\n        return (onrejected: (reason: any) => any) => builder.exec().catch(onrejected);\n      }\n\n      return builder.exec();\n    },\n  });\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryCache.html":{"url":"classes/QueryCache.html","title":"class - QueryCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/query-cache.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                cache\n                            \n                            \n                                    Private\n                                cacheHits\n                            \n                            \n                                    Private\n                                cacheMisses\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                getStats\n                            \n                            \n                                    Public\n                                invalidate\n                            \n                            \n                                    Public\n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options?: QueryCacheOptions)\n                    \n                \n                        \n                            \n                                Defined in src/utils/query-cache.ts:16\n                            \n                        \n\n                \n                    \n                            Initializes the QueryCache with optional maxSize, TTL, and eviction strategy.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        QueryCacheOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nObject containing maxSize, TTL, and eviction strategy.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cache\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LRUCache\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/query-cache.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cacheHits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/utils/query-cache.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cacheMisses\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/utils/query-cache.ts:16\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/query-cache.ts:37\n                        \n                    \n\n\n            \n                \n                        Retrieves a list of documents by the given key from the cache.\nTracks cache hits and misses.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     [] | undefined\n\n                        \n                            \n                                The array of DocumentWithId associated with the key, or undefined if not found or expired.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/query-cache.ts:74\n                        \n                    \n\n\n            \n                \n                        Returns cache hit/miss statistics.\n\n\n                        \n                            Returns :     literal type\n\n                        \n                            \n                                An object with hit and miss counts.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        invalidate\n                        \n                    \n                \n            \n            \n                \n                        \n                    invalidate(key?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/query-cache.ts:62\n                        \n                    \n\n\n            \n                \n                        Invalidates (removes) a cache entry by key, or clears the entire cache if no key is provided.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional key to remove from the cache. If not provided, the entire cache is cleared.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        set\n                        \n                    \n                \n            \n            \n                \n                        \n                    set(key: string, value: DocumentWithId[], ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/query-cache.ts:54\n                        \n                    \n\n\n            \n                \n                        Adds or updates a list of documents in the cache.\nSupports custom TTL for each entry.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key of the cache entry.\n\n\n                                            \n                                        \n                                        \n                                                value\n                                            \n                                                            DocumentWithId[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe array of DocumentWithId to cache.\n\n\n                                            \n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional TTL for this specific entry, overriding global TTL.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { LRUCache, LRUCacheOptions } from './lru-cache';\nimport { DocumentWithId } from '../types';\n\nexport interface QueryCacheOptions extends LRUCacheOptions[]> {\n    ttl?: number;\n    evictionStrategy?: 'LRU' | 'FIFO';\n}\n\nexport class QueryCache {\n  // Create an LRUCache instance that stores string keys and arrays of DocumentWithId as values\n  private cache: LRUCache[]>;\n\n  // Metrics for cache hits and misses\n  private cacheHits: number = 0;\n\n  private cacheMisses: number = 0;\n\n  /**\n     * Initializes the QueryCache with optional maxSize, TTL, and eviction strategy.\n     * @param options - Object containing maxSize, TTL, and eviction strategy.\n     */\n  constructor(options?: QueryCacheOptions) {\n    const { maxSize = 1000, ttl, evictionStrategy = 'LRU' } = options || {};\n    this.cache = new LRUCache[]>({\n      maxSize,\n      ttl,\n      evictionStrategy,\n    });\n  }\n\n  /**\n     * Retrieves a list of documents by the given key from the cache.\n     * Tracks cache hits and misses.\n     * @param key - The key to retrieve.\n     * @returns The array of DocumentWithId associated with the key, or undefined if not found or expired.\n     */\n  public get(key: string): DocumentWithId[] | undefined {\n    const result = this.cache.get(key);\n    if (result) {\n      this.cacheHits += 1;\n    } else {\n      this.cacheMisses += 1;\n    }\n    return result;\n  }\n\n  /**\n     * Adds or updates a list of documents in the cache.\n     * Supports custom TTL for each entry.\n     * @param key - The key of the cache entry.\n     * @param value - The array of DocumentWithId to cache.\n     * @param ttl - Optional TTL for this specific entry, overriding global TTL.\n     */\n  public set(key: string, value: DocumentWithId[], ttl?: number): void {\n    this.cache.set(key, value, ttl); // Allow custom TTL per entry\n  }\n\n  /**\n     * Invalidates (removes) a cache entry by key, or clears the entire cache if no key is provided.\n     * @param key - Optional key to remove from the cache. If not provided, the entire cache is cleared.\n     */\n  public invalidate(key?: string): void {\n    if (key) {\n      this.cache.delete(key);\n    } else {\n      this.cache.clear();\n    }\n  }\n\n  /**\n     * Returns cache hit/miss statistics.\n     * @returns An object with hit and miss counts.\n     */\n  public getStats(): { hits: number; misses: number } {\n    return {\n      hits: this.cacheHits,\n      misses: this.cacheMisses,\n    };\n  }\n}\n\nexport default QueryCache;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QueryCacheOptions.html":{"url":"interfaces/QueryCacheOptions.html","title":"interface - QueryCacheOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QueryCacheOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/query-cache.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            LRUCacheOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            evictionStrategy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ttl\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        evictionStrategy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        evictionStrategy:     \"LRU\" | \"FIFO\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"LRU\" | \"FIFO\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ttl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ttl:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { LRUCache, LRUCacheOptions } from './lru-cache';\nimport { DocumentWithId } from '../types';\n\nexport interface QueryCacheOptions extends LRUCacheOptions[]> {\n    ttl?: number;\n    evictionStrategy?: 'LRU' | 'FIFO';\n}\n\nexport class QueryCache {\n  // Create an LRUCache instance that stores string keys and arrays of DocumentWithId as values\n  private cache: LRUCache[]>;\n\n  // Metrics for cache hits and misses\n  private cacheHits: number = 0;\n\n  private cacheMisses: number = 0;\n\n  /**\n     * Initializes the QueryCache with optional maxSize, TTL, and eviction strategy.\n     * @param options - Object containing maxSize, TTL, and eviction strategy.\n     */\n  constructor(options?: QueryCacheOptions) {\n    const { maxSize = 1000, ttl, evictionStrategy = 'LRU' } = options || {};\n    this.cache = new LRUCache[]>({\n      maxSize,\n      ttl,\n      evictionStrategy,\n    });\n  }\n\n  /**\n     * Retrieves a list of documents by the given key from the cache.\n     * Tracks cache hits and misses.\n     * @param key - The key to retrieve.\n     * @returns The array of DocumentWithId associated with the key, or undefined if not found or expired.\n     */\n  public get(key: string): DocumentWithId[] | undefined {\n    const result = this.cache.get(key);\n    if (result) {\n      this.cacheHits += 1;\n    } else {\n      this.cacheMisses += 1;\n    }\n    return result;\n  }\n\n  /**\n     * Adds or updates a list of documents in the cache.\n     * Supports custom TTL for each entry.\n     * @param key - The key of the cache entry.\n     * @param value - The array of DocumentWithId to cache.\n     * @param ttl - Optional TTL for this specific entry, overriding global TTL.\n     */\n  public set(key: string, value: DocumentWithId[], ttl?: number): void {\n    this.cache.set(key, value, ttl); // Allow custom TTL per entry\n  }\n\n  /**\n     * Invalidates (removes) a cache entry by key, or clears the entire cache if no key is provided.\n     * @param key - Optional key to remove from the cache. If not provided, the entire cache is cleared.\n     */\n  public invalidate(key?: string): void {\n    if (key) {\n      this.cache.delete(key);\n    } else {\n      this.cache.clear();\n    }\n  }\n\n  /**\n     * Returns cache hit/miss statistics.\n     * @returns An object with hit and miss counts.\n     */\n  public getStats(): { hits: number; misses: number } {\n    return {\n      hits: this.cacheHits,\n      misses: this.cacheMisses,\n    };\n  }\n}\n\nexport default QueryCache;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Shard.html":{"url":"classes/Shard.html","title":"class - Shard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Shard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/shared.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                db\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addDocument\n                            \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                deleteById\n                            \n                            \n                                    Public\n                                getById\n                            \n                            \n                                    Public\n                                getDocuments\n                            \n                            \n                                    Public\n                                partitionDocumentsBy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/utils/shared.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        addDocument\n                        \n                    \n                \n            \n            \n                \n                        \n                    addDocument(doc: DocumentWithId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/shared.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                doc\n                                            \n                                                            DocumentWithId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clear\n                        \n                    \n                \n            \n            \n                \n                        \n                    clear()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/shared.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        deleteById\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/shared.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DocumentWithId | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/shared.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DocumentWithId | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getDocuments\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDocuments()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/shared.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         DocumentWithId[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        partitionDocumentsBy\n                        \n                    \n                \n            \n            \n                \n                        \n                    partitionDocumentsBy(field)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/shared.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                field\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DocumentWithId } from '../types';\n\nexport class Shard {\n  private db: Map> = new Map();\n\n  // Add user to this shard\n  public addDocument(doc: DocumentWithId): void {\n    this.db.set(doc.id, doc);\n  }\n\n  // Get all documents\n  public getDocuments(): DocumentWithId[] {\n    return Array.from(this.db.values());\n  }\n\n  // Partition documents by a specific field, e.g., age\n  public partitionDocumentsBy(field: keyof T): { [key: string]: DocumentWithId[] } {\n    const partitions: { [key: string]: DocumentWithId[] } = {};\n\n    this.getDocuments().forEach((doc) => {\n      const key = String(doc[field]);\n      if (!partitions[key]) {\n        partitions[key] = [];\n      }\n      partitions[key].push(doc);\n    });\n\n    return partitions;\n  }\n\n  public getById(id: string): DocumentWithId | undefined {\n    return this.db.get(id);\n  }\n\n  public deleteById(id: string): DocumentWithId | undefined {\n    const doc = this.db.get(id);\n    if (doc) {\n      this.db.delete(id);\n    }\n    return doc;\n  }\n\n  public clear(): void {\n    this.db.clear();\n  }\n}\n\nexport default Shard;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SimpleCondition.html":{"url":"interfaces/SimpleCondition.html","title":"interface - SimpleCondition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SimpleCondition\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            customCompare\n                                        \n                                \n                                \n                                        \n                                            field\n                                        \n                                \n                                \n                                        \n                                            operator\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        customCompare\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customCompare:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        operator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        operator:         ComparisonOperator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ComparisonOperator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type ComparisonOperator = '$eq' | '$neq' | '$gt' | '$gte' | '$lt' | '$lte' | '$in' | '$nin' | 'custom';\nexport type MEMOZID = string & { __brand__: 'MEMOZID' }; // You can enhance this with more strict MEMOZID typing if desired\n\nexport interface SimpleCondition {\n  field: keyof T;\n  operator: ComparisonOperator;\n  value: any;\n  customCompare?: (a: any, b: any) => boolean;\n}\n\nexport type ConditionNode =\n  | { $and: ConditionNode[] }\n  | { $or: ConditionNode[] }\n  | SimpleCondition;\n\nexport type DocumentWithId = T & { id: MEMOZID; } & { [key: string]: any; };\nexport type UpdateManyResult = { updated: boolean; n: number; documents: DocumentWithId[] };\n\nexport interface MemozOptions {\n    storagePath?: string;\n    persistToDisk?: boolean;\n    useMutex?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TransactionManager.html":{"url":"classes/TransactionManager.html","title":"class - TransactionManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TransactionManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/transaction-manager.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                db\n                            \n                            \n                                    Private\n                                dbSnapshot\n                            \n                            \n                                    Private\n                                transactionDb\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                beginTransaction\n                            \n                            \n                                    Public\n                                commitTransaction\n                            \n                            \n                                    Public\n                                getCurrentDb\n                            \n                            \n                                    Public\n                                rollbackTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(db: Map>)\n                    \n                \n                        \n                            \n                                Defined in src/utils/transaction-manager.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                    Map>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map>\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/transaction-manager.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dbSnapshot\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map> | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/utils/transaction-manager.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        transactionDb\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map> | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/utils/transaction-manager.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        beginTransaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    beginTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/transaction-manager.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commitTransaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    commitTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/transaction-manager.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getCurrentDb\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCurrentDb()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/transaction-manager.ts:47\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Map>\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        rollbackTransaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    rollbackTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/transaction-manager.ts:34\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DocumentWithId, MEMOZID } from '../types';\n\nexport class TransactionManager {\n  private db: Map>;\n\n  private transactionDb: Map> | null = null;\n\n  private dbSnapshot: Map> | null = null;\n\n  constructor(db: Map>) {\n    this.db = db;\n  }\n\n  public beginTransaction(): void {\n    if (this.transactionDb) {\n      throw new Error('Transaction already in progress');\n    }\n    // Take a snapshot of the current state before the transaction begins\n    this.dbSnapshot = new Map(this.db);\n    // Initialize a transaction state, which will hold temporary changes\n    this.transactionDb = new Map(this.db);\n  }\n\n  public commitTransaction(): void {\n    if (!this.transactionDb) {\n      throw new Error('No transaction in progress');\n    }\n    // Apply the changes made in the transaction to the main db\n    this.db = this.transactionDb;\n    this.transactionDb = null;\n    this.dbSnapshot = null; // Clear the snapshot after committing\n  }\n\n  public rollbackTransaction(): void {\n    if (!this.transactionDb) {\n      throw new Error('No transaction in progress');\n    }\n    if (!this.dbSnapshot) {\n      throw new Error('No snapshot available for rollback');\n    }\n    // Restore the original db state from the snapshot\n    this.db = this.dbSnapshot;\n    this.transactionDb = null;\n    this.dbSnapshot = null; // Clear the snapshot after rollback\n  }\n\n  public getCurrentDb(): Map> {\n    return this.transactionDb || this.db;\n  }\n}\n\nexport default TransactionManager;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n4.0.2 (2024-10-18)\nDocumentation Changes\n\nupdate description (42415f3b)\n\n4.0.1 (2024-10-18)\nContinuous Integration\n\nremove docs from pipeline (be1b5db1)\n\n4.0.1 (2024-10-17)\n4.0.0 (2024-10-17)\nNew Features\n\nadd new features like (transaction, presist on disk, etc) (4642966f)\n\n3.1.0 (2024-10-08)\n3.0.0 (2024-10-08)\n2.2.0 (2024-09-16)\nContinuous Integration\n\nresolve pipeline (de8a28fa)\n\n2.1.2 (2022-02-19)\nChores\n\nupdate deps (e81eee88)\n\nBug Fixes\n\nupdate docs (ac42869a)\n\nOther Changes\n\nmiladezzat/memoz into gh-pages (ae7913f1)\n\n2.1.1 (2022-02-11)\nChores\n\nupdate deps (75a1f4f1)\n\nDocumentation Changes\n\nupdate docs (4e9d1718)\n\n2.1.0 (2022-02-09)\nChores\n\nupdate docs (2886b372)\n\nNew Features\n\nsetup docs (69b61d8a)\n\n2.0.1 (2021-08-04)\nChores\n\nupdate dpes (dd121257)\nupdate deps (c411d805)\nupdate deps (4173ee67)\n\nDocumentation Changes\n\nupdate js docs (d687504c)\nupdate docs (75a86338)\n\n2.0.0 (2021-07-30)\nNew Features\n\nupdate create method (5d244251)\n\n1.1.3 (2021-07-28)\nChores\n\nupdate package  json and add husky (e9322431)\n\nContinuous Integration\n\nupdate ci (c0bab78d)\n\nRefactors\n\nsetup environment (95dd6d1e)\nupdate some codes (9b8d080d)\n\n1.1.3 (2021-07-28)\nChores\n\nupdate package  json and add husky (e9322431)\n\nContinuous Integration\n\nupdate ci (c0bab78d)\n\nRefactors\n\nsetup environment (95dd6d1e)\nupdate some codes (9b8d080d)\n\n1.1.2 (2021-07-28)\nDocumentation Changes\n\nupdate docs (5bfdc44a)\n\n1.1.1 (2021-07-28)\nBug Fixes\n\nsolve package (5eef46c0)\n\n1.1.0 (2021-07-27)\nChores\n\nupdate package json (029ad1fa)\n\nDocumentation Changes\n\nupdate docs (276f3b47)\n\nNew Features\n\nadd deleteone function (deae21e0)\n\n1.0.0 (2021-07-26)\nDocumentation Changes\n\nupdate docs (76398cb0)\n\nNew Features\n\nupdate memoz methods (85fb8daf)\nsetup (6d760f53)\n\nBug Fixes\n\nsolve some bugs (4079a95a)\n\nTests\n\nadd unit testing (39424c77)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/constants/memoz-id.ts\n            \n            variable\n            MEMOZ_ID_PATTERN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants/memoz-id.ts\n            \n            variable\n            MEMOZ_ID_TEMPLATE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/memoz.ts\n            \n            class\n            Memoz\n            \n                78 %\n                (22/28)\n            \n        \n        \n            \n                \n                src/types.ts\n            \n            interface\n            MemozOptions\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/types.ts\n            \n            interface\n            SimpleCondition\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/utils/evaluate-condition.ts\n            \n            variable\n            evaluateCondition\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/evaluate-node.ts\n            \n            variable\n            evaluateNode\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/get-many-query-builder.ts\n            \n            class\n            QueryBuilder\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/utils/get-many-query-builder.ts\n            \n            function\n            createQueryBuilderProxy\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/get-many.ts\n            \n            variable\n            getMany\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/get-one.ts\n            \n            variable\n            getOne\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/helper.ts\n            \n            function\n            chunkArray\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/index-manager.ts\n            \n            class\n            IndexManager\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/utils/indexing.ts\n            \n            class\n            Indexing\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/utils/is-object.ts\n            \n            variable\n            isObject\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/is-valid-memoz-id.ts\n            \n            variable\n            isValidMemozId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/lru-cache.ts\n            \n            class\n            LRUCache\n            \n                0 %\n                (0/26)\n            \n        \n        \n            \n                \n                src/utils/lru-cache.ts\n            \n            interface\n            LRUCacheOptions\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/utils/memoz-id.ts\n            \n            function\n            memozId\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/mutex.ts\n            \n            class\n            Mutex\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/persistence-manager.ts\n            \n            class\n            PersistenceManager\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/utils/query-cache.ts\n            \n            class\n            QueryCache\n            \n                55 %\n                (5/9)\n            \n        \n        \n            \n                \n                src/utils/query-cache.ts\n            \n            interface\n            QueryCacheOptions\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/shared.ts\n            \n            class\n            Shard\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/utils/transaction-manager.ts\n            \n            class\n            TransactionManager\n            \n                0 %\n                (0/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            chunkArray   (src/.../helper.ts)\n                        \n                        \n                            createQueryBuilderProxy   (src/.../get-many-query-builder.ts)\n                        \n                        \n                            memozId   (src/.../memoz-id.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        chunkArray\n                        \n                    \n                \n            \n            \n                \nchunkArray(array, size: number)\n                \n            \n\n\n\n\n            \n                \n                        Splits an array into smaller chunks of a specified size.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                array\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe array to split into chunks.\n\n\n                                            \n                                        \n                                        \n                                                size\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe size of each chunk.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     [][]\n\n                        \n                            \n                                \nAn array of chunks.\n\n\n                            \n                \n            \n        \n    \n    src/utils/get-many-query-builder.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createQueryBuilderProxy\n                        \n                    \n                \n            \n            \n                \ncreateQueryBuilderProxy(builder: QueryBuilder)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                builder\n                                            \n                                                            QueryBuilder\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         QueryBuilder\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/utils/memoz-id.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        memozId\n                        \n                    \n                \n            \n            \n                \nmemozId()\n                \n            \n\n\n\n\n            \n                \n                        Generates a MEMOZID string based on a template and current timestamp.\n\n\n                        \n                            Returns :         MEMOZID\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nMemoz\n \n\nMemoz is an in-memory database that persists on disk, offering easy CRUD operations with a simple API. it supports document persistence to disk.\n\nMemoz\nInstallation\nUsage\n\n\n\nInstallation\nExample :npm i memoz\n# or\nyarn add memozUsage\nExample :interface IUser {\n    readonly id?: string;\n    name: string;\n    age: number;\n}\n\nconst memoz = new Memoz({\n    persistToDisk: true,  // to allow persist data on disk - default false\n    storagePath: './data', // the location to persist data - default './data'\n    useMutex: true, //  Whether to use a mutex for thread safety - default false\n});\n\n\nasync function boot() {\n    // Uncomment to create and store users in the database\n    const docs = Array.from({ length: 1000 }, (_, i) => ({ name: `User ${i}`, age: i }));\n    await memoz.createMany(docs);\n\n    // Loop to get users with pagination and sorting to test caching\n    const totalPages = 2; // Define the total number of pages to iterate over\n    const usersPerPage = 10; // Number of users per page\n\n    for (let index = 0; index \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2021 Milad E. Fahmy\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 4.0.2\n        \n            Description : Memoz is an in-memory database that persists on disk. The data model is key-value.\n        \n            Keywords : data, structure, database, redis, transaction, pipelining, performance, queue, nodejs, pubsub, backpressure, cache, ram, simple, storage, typescript, in-memory, disk, persist, key-value, string, list, set, sorted-set, hash\n        \n            Homepage : https://memoz.js.org\n        \n            Bugs : https://github.com/miladezzat/memoz/issues\n        \n            Repository : git+https://github.com/miladezzat/memoz.git\n        \n            Author : Milad E. Fahmy  (https://milad-ezzat.vercel.app)\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ComparisonOperator   (src/.../types.ts)\n                        \n                        \n                            ConditionNode   (src/.../types.ts)\n                        \n                        \n                            DocumentWithId   (src/.../types.ts)\n                        \n                        \n                            EvictionStrategy   (src/.../lru-cache.ts)\n                        \n                        \n                            MEMOZID   (src/.../types.ts)\n                        \n                        \n                            UpdateManyResult   (src/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/types.ts\n    \n    \n        \n            \n                \n                    \n                    ComparisonOperator\n                \n            \n            \n                \n                        \"$eq\" | \"$neq\" | \"$gt\" | \"$gte\" | \"$lt\" | \"$lte\" | \"$in\" | \"$nin\" | \"custom\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConditionNode\n                \n            \n            \n                \n                            literal type | literal type | SimpleCondition\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DocumentWithId\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MEMOZID\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateManyResult\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/utils/lru-cache.ts\n    \n    \n        \n            \n                \n                    \n                    EvictionStrategy\n                \n            \n            \n                \n                        \"LRU\" | \"FIFO\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            evaluateCondition   (src/.../evaluate-condition.ts)\n                        \n                        \n                            evaluateNode   (src/.../evaluate-node.ts)\n                        \n                        \n                            getMany   (src/.../get-many.ts)\n                        \n                        \n                            getOne   (src/.../get-one.ts)\n                        \n                        \n                            isObject   (src/.../is-object.ts)\n                        \n                        \n                            isValidMemozId   (src/.../is-valid-memoz-id.ts)\n                        \n                        \n                            MEMOZ_ID_PATTERN   (src/.../memoz-id.ts)\n                        \n                        \n                            MEMOZ_ID_TEMPLATE   (src/.../memoz-id.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/evaluate-condition.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        evaluateCondition\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (datum: T, condition: SimpleCondition): boolean => {\n  const {\n    field, operator, value, customCompare,\n  } = condition;\n\n  if (customCompare) {\n    return customCompare(datum[field], value);\n  }\n\n  switch (operator) {\n    case '$eq':\n      return datum[field] === value;\n    case '$neq':\n      return datum[field] !== value;\n    case '$gt':\n      return datum[field] > value;\n    case '$gte':\n      return datum[field] >= value;\n    case '$lt':\n      return datum[field] \n                    \n                \n\n\n        \n    \n\n    src/utils/evaluate-node.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        evaluateNode\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (datum: T, node: ConditionNode): boolean => {\n  if ('$and' in node) {\n    // AND logic: all conditions must pass\n    return node.$and.every((subNode) => evaluateNode(datum, subNode));\n  }\n  if ('$or' in node) {\n    // OR logic: at least one condition must pass\n    return node.$or.some((subNode) => evaluateNode(datum, subNode));\n  }\n  // Handle simple condition\n  return evaluateCondition(datum, node);\n}\n                    \n                \n\n\n        \n    \n\n    src/utils/get-many.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getMany\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (data: T[], query: ConditionNode): T[] => data.filter((datum) => evaluateNode(datum, query))\n                    \n                \n\n            \n                \n                    Precompile conditions to reduce repeated logic checks and handle early exits more effectively.\n\n                \n            \n\n        \n    \n\n    src/utils/get-one.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getOne\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (data: T[], query: ConditionNode): T | undefined => data.find((datum) => evaluateNode(datum, query))\n                    \n                \n\n            \n                \n                    Precompile conditions to reduce repeated logic checks and handle early exits more effectively.\n\n                \n            \n\n        \n    \n\n    src/utils/is-object.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isObject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (value: unknown): boolean => typeof value === 'object'\n        && value !== null\n        && !Array.isArray(value)\n        && Reflect.ownKeys(value).length > 0\n                    \n                \n\n            \n                \n                    Checks if the provided value is a non-null object with at least one own property (excluding arrays).\n\n                \n            \n\n        \n    \n\n    src/utils/is-valid-memoz-id.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isValidMemozId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (memozId: string): memozId is MEMOZID => memozId.length >= 36 && MEMOZ_ID_PATTERN.test(memozId)\n                    \n                \n\n\n        \n    \n\n    src/constants/memoz-id.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MEMOZ_ID_PATTERN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[A-F\\d]{8}-[A-F\\d]{4}-4[A-F\\d]{3}-[89AB][A-F\\d]{3}-[A-F\\d]{12}-[A-Za-z0-9]{9}$/i\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MEMOZ_ID_TEMPLATE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
