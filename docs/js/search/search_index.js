var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/IndexManager.html",[0,0.116,1,2.035]],["body/classes/IndexManager.html",[0,0.12,1,3.159,2,0.899,3,0.626,4,0.626,5,0.548,6,4.251,7,1.82,8,0.518,9,0.636,10,1.207,11,4.549,12,1.203,13,1.879,14,2.288,15,4.035,16,4.035,17,4.035,18,0.553,19,0.045,20,2.269,21,0.837,22,0.548,23,1.07,24,1.693,25,2.46,26,2.46,27,1.289,28,4.035,29,2.933,30,3.015,31,1.356,32,1.207,33,0.827,34,1.42,35,1.383,36,4.035,37,0.717,38,2.46,39,2.46,40,2.933,41,1.203,42,4.035,43,2.46,44,3.71,45,1.203,46,1.349,47,0.899,48,1.129,49,0.837,50,3.015,51,3.015,52,1.207,53,3.015,54,1.143,55,0.037,56,2.144,57,3.015,58,3.015,59,3.015,60,3.015,61,3.015,62,3.015,63,3.015,64,3.015,65,3.015,66,3.015,67,0.031]],["title/classes/Indexing.html",[0,0.116,40,1.77]],["body/classes/Indexing.html",[0,0.109,2,0.817,3,0.569,4,0.569,5,0.498,8,0.532,9,0.596,10,1.425,12,1.128,13,1.794,18,0.612,19,0.045,20,1.817,21,0.569,23,1.098,24,1.735,27,1.239,31,1.461,32,1.3,33,0.89,34,2.04,35,1.442,37,0.847,39,3.996,40,2.819,45,1.392,46,0.916,47,0.817,48,1.026,49,0.785,52,1.149,54,1.019,55,0.029,56,2.481,67,0.029,68,2.235,69,3.085,70,3.782,71,3.782,72,1.291,73,3.782,74,3.782,75,2.74,76,3.782,77,2.74,78,4.234,79,3.782,80,2.811,81,2.74,82,3.782,83,2.74,84,3.782,85,2.74,86,2.74,87,2.74,88,1.291,89,3.782,90,4.33,91,2.74,92,2.74,93,2.74,94,2.74,95,1.026,96,2.74,97,2.74,98,2.74,99,2.283,100,2.235,101,1.903,102,2.74,103,2.74,104,2.626,105,2.235,106,3.085,107,2.74,108,2.74,109,2.74,110,2.74]],["title/classes/LRUCache.html",[0,0.116,111,1.381]],["body/classes/LRUCache.html",[0,0.055,2,0.415,3,0.289,4,0.289,5,0.253,8,0.158,9,0.357,10,1.492,12,0.676,14,1.557,18,0.602,19,0.045,20,1.386,21,0.755,22,0.865,23,0.533,24,1.819,27,1.303,31,1.322,32,1.176,33,0.925,37,0.574,41,1.359,45,1.501,49,0.595,52,1.303,54,1.097,55,0.017,56,1.204,67,0.017,72,0.655,88,1.391,95,1.605,111,1.35,112,3.298,113,0.655,114,1.35,115,2.338,116,2.338,117,2.356,118,2.338,119,2.355,120,2.338,121,2.967,122,2.967,123,2.752,124,2.695,125,2.266,126,2.266,127,2.708,128,1.731,129,2.266,130,2.266,131,2.266,132,2.695,133,2.695,134,2.695,135,1.848,136,1.99,137,2.338,138,2.338,139,1.368,140,1.557,141,2.266,142,1.368,143,1.135,144,1.938,145,1.848,146,1.391,147,1.848,148,1.391,149,1.391,150,1.391,151,1.391,152,0.951,153,1.391,154,2.019,155,1.391,156,1.391,157,1.391,158,1.391,159,1.848,160,4.285,161,1.391,162,1.848,163,1.391,164,1.391,165,1.391,166,1.067,167,1.368,168,1.391,169,3.497,170,1.848,171,2.695,172,1.391,173,1.523,174,1.848,175,1.391,176,1.391,177,1.204,178,1.135,179,2.588,180,1.391,181,1.391,182,1.391,183,1.368,184,1.391,185,0.84,186,1.391,187,1.391,188,1.391,189,1.391,190,1.391,191,1.391,192,1.391,193,1.391,194,1.756,195,1.523,196,0.327,197,1.756,198,1.135,199,1.135,200,1.135,201,0.966,202,0.966,203,0.966,204,0.966,205,1.135,206,1.99,207,2.338,208,1.848,209,2.338,210,1.135,211,1.995,212,1.848,213,1.135,214,2.338,215,1.848,216,1.848,217,1.135,218,1.135,219,1.135,220,1.368,221,2.967,222,2.338,223,2.695,224,1.848,225,1.135,226,1.848,227,1.135,228,2.695,229,1.848,230,1.135,231,1.368,232,1.135,233,1.135,234,1.135,235,1.848,236,1.135,237,1.135,238,1.135,239,1.135,240,1.135,241,1.135,242,1.135,243,1.135,244,0.739,245,1.135,246,2.695,247,1.848,248,0.84,249,1.368,250,0.84,251,1.135,252,1.135,253,1.135,254,1.135,255,1.135,256,1.135,257,0.966,258,1.848,259,3.181,260,2.338,261,1.135,262,1.35,263,0.84]],["title/interfaces/LRUCacheOptions.html",[140,1.381,196,0.69]],["body/interfaces/LRUCacheOptions.html",[0,0.077,3,0.401,4,0.401,5,0.351,8,0.22,9,0.463,10,1.372,14,0.91,18,0.511,19,0.046,20,1.23,21,0.401,22,0.815,23,0.454,33,0.873,37,0.463,41,1.467,45,1.432,49,0.736,52,1.402,54,1.2,55,0.022,67,0.022,88,1.27,95,1.679,111,1.382,112,1.166,113,0.91,114,0.91,115,1.575,116,1.575,117,2.709,118,1.575,119,2.815,120,1.575,121,3.659,122,3.659,123,2.97,124,1.575,127,2.463,128,1.166,132,1.575,133,1.575,134,1.575,136,1.341,137,1.575,138,1.575,139,1.166,140,1.671,142,1.166,144,2.012,145,1.575,147,1.575,152,1.23,154,2.113,159,1.575,160,4.013,162,1.575,166,0.91,167,1.166,169,3.475,170,1.575,171,2.393,173,1.559,174,1.575,179,2.815,183,1.166,194,2.105,195,1.885,196,0.454,197,2.105,198,1.575,199,1.575,200,1.575,201,1.341,202,1.341,203,1.341,204,1.341,205,1.575,206,2.463,207,2.893,208,2.393,209,2.893,210,1.575,211,2.392,212,2.393,213,1.575,214,2.893,215,2.393,216,2.393,217,1.575,218,1.575,219,1.575,220,1.771,221,3.475,222,2.893,223,3.231,224,2.393,225,1.575,226,2.393,227,1.575,228,3.231,229,2.393,230,1.575,231,1.771,232,1.575,233,1.575,234,1.575,235,2.393,236,1.575,237,1.575,238,1.575,239,1.575,240,1.575,241,1.575,242,1.575,243,1.575,244,1.026,245,1.575,246,3.231,247,2.393,248,1.166,249,1.771,250,1.166,251,1.575,252,1.575,253,1.575,254,1.575,255,1.575,256,1.575,257,1.341,258,2.393,259,3.659,260,2.893,261,1.575,262,1.671,263,1.166,264,1.026]],["title/interfaces/MemozOptions.html",[196,0.69,265,1.77]],["body/interfaces/MemozOptions.html",[3,0.688,4,0.688,5,0.603,8,0.378,9,0.678,18,0.629,19,0.045,22,0.603,33,0.973,35,1.14,37,0.824,47,1.503,49,1.13,55,0.033,67,0.033,80,2.533,88,0.989,99,2.003,144,1.242,154,2.601,196,1.011,264,1.763,265,2.595,266,2.003,267,3.044,268,3.502,269,3.502,270,2.984,271,2.003,272,2.003,273,2.003,274,2.003,275,2.003,276,2.304,277,2.304,278,1.763,279,2.706,280,2.706,281,2.304,282,2.706,283,2.706,284,2.706,285,2.025,286,2.003,287,2.304,288,2.284,289,2.304,290,2.304,291,2.304,292,2.304,293,2.706,294,2.706,295,1.763]],["title/classes/Mutex.html",[0,0.116,296,1.77]],["body/classes/Mutex.html",[0,0.139,2,1.044,3,0.726,4,0.726,5,0.636,8,0.399,9,0.701,10,1.297,12,1.326,13,1.634,18,0.557,19,0.045,21,0.923,22,0.808,24,1.487,27,0.929,31,1.326,32,0.929,33,0.636,41,1.326,45,1.044,49,0.923,52,1.18,54,0.824,55,0.034,67,0.034,152,1.468,173,2.822,262,2.096,288,2.364,296,3.37,297,2.855,298,4.448,299,4.448,300,3.5,301,4.448,302,3.5,303,5.144,304,3.5,305,3.5,306,3.628,307,3.089,308,3.5,309,2.855,310,3.5,311,3.5,312,3.628,313,3.5,314,2.855,315,3.5,316,3.5,317,3.5,318,3.5,319,3.5,320,3.5]],["title/classes/PersistenceManager.html",[0,0.116,321,2.035]],["body/classes/PersistenceManager.html",[0,0.108,2,0.812,3,0.565,4,0.565,5,0.846,7,1.644,8,0.31,9,0.594,10,1.422,12,1.122,13,1.69,14,1.283,18,0.53,19,0.045,20,2.174,21,0.565,22,0.684,24,1.69,26,2.221,27,0.999,29,2.951,31,0.812,32,0.722,33,0.495,35,0.999,37,0.734,41,1.457,46,1.442,47,1.122,48,1.019,49,0.781,54,1.095,55,0.029,67,0.029,72,1.283,100,2.221,127,1.89,128,3.052,154,2.193,173,2.474,185,1.644,250,1.644,257,1.89,263,2.811,267,3.128,321,2.996,322,4.227,323,5.281,324,4.656,325,4.656,326,3.071,327,3.764,328,2.722,329,2.722,330,2.722,331,3.764,332,2.221,333,2.722,334,3.764,335,2.722,336,2.722,337,2.221,338,4.656,339,2.722,340,2.722,341,4.315,342,2.722,343,2.722,344,2.722,345,2.722,346,2.722,347,2.722,348,2.722,349,2.722,350,2.722,351,2.221,352,3.764,353,1.644,354,2.722,355,2.722,356,2.722,357,2.722,358,2.722,359,2.273,360,2.722,361,2.722,362,2.722,363,2.221,364,3.071,365,2.722,366,2.722,367,2.722]],["title/classes/QueryBuilder.html",[0,0.116,368,1.77]],["body/classes/QueryBuilder.html",[0,0.098,2,0.463,3,0.322,4,0.322,5,0.282,8,0.177,9,0.39,10,1.443,12,0.921,13,1.789,18,0.598,19,0.045,21,0.731,22,0.812,23,0.365,24,1.739,27,1.088,31,1.372,32,1.141,33,0.837,34,2.507,35,1.185,37,0.647,41,0.738,45,1.147,46,0.828,48,0.582,49,0.514,52,1.436,54,0.726,55,0.023,67,0.019,72,0.732,88,0.738,95,1.672,101,1.719,104,1.719,114,0.732,128,2.475,135,2.02,144,1.767,152,1.931,166,1.455,173,2.828,177,1.316,185,2.323,197,1.316,201,1.079,202,1.079,203,1.079,204,1.079,262,2.31,263,1.495,291,1.079,306,1.267,312,2.519,332,1.267,368,2.475,369,3.168,370,3.168,371,1.079,372,2.476,373,3.848,374,3.848,375,2.646,376,4.301,377,3.848,378,4.1,379,3.522,380,3.848,381,2.476,382,3.088,383,3.522,384,3.088,385,3.088,386,2.476,387,2.476,388,2.476,389,1.553,390,1.553,391,1.553,392,1.553,393,1.553,394,1.553,395,1.553,396,3.848,397,1.553,398,3.088,399,4.301,400,1.553,401,2.476,402,1.553,403,1.553,404,2.476,405,1.553,406,1.553,407,2.476,408,1.553,409,2.476,410,1.553,411,1.553,412,1.553,413,2.476,414,3.088,415,2.476,416,1.553,417,1.553,418,1.553,419,0.938,420,2.476,421,3.088,422,3.088,423,1.553,424,1.553,425,1.553,426,1.079,427,2.476,428,1.267,429,2.476,430,1.553,431,1.553,432,2.476,433,2.476,434,1.553,435,1.553,436,1.553,437,1.553,438,1.553,439,1.553,440,2.476,441,1.553,442,2.476,443,2.476,444,1.553,445,1.553,446,3.088,447,1.553,448,1.553,449,1.553,450,1.553,451,1.553,452,1.553,453,1.079,454,1.553,455,1.267,456,1.553,457,1.553,458,3.522,459,2.476,460,2.476,461,1.553,462,1.553,463,1.553,464,1.267,465,3.088,466,1.553,467,1.553,468,3.088,469,1.553,470,1.553,471,1.553,472,1.553,473,1.553,474,1.553,475,1.553,476,1.553,477,1.553,478,1.553,479,1.553]],["title/classes/QueryCache.html",[0,0.116,375,1.557]],["body/classes/QueryCache.html",[0,0.076,2,0.568,3,0.396,4,0.396,5,0.346,8,0.217,9,0.458,10,1.301,12,0.866,13,1.723,18,0.545,19,0.045,21,0.73,22,0.843,23,0.448,24,1.599,27,1.269,31,1.173,32,1.044,33,0.909,35,1.327,37,0.788,41,1.173,45,1.173,46,0.971,48,0.714,49,0.73,52,0.771,54,0.683,55,0.022,56,1.543,67,0.022,72,0.898,88,1.646,95,1.473,111,1.996,113,0.898,114,2.641,117,1.87,119,2.695,123,3.301,139,1.754,140,1.368,142,2.125,143,1.555,144,1.872,166,1.854,167,1.754,177,1.013,178,1.555,179,2.959,183,1.754,185,2.125,194,1.87,195,1.013,196,0.448,197,1.543,211,1.151,220,1.151,231,2.376,248,1.151,249,1.151,262,1.658,278,1.87,295,2.091,353,1.151,375,2.251,419,1.151,480,3.404,481,2.871,482,2.871,483,3.21,484,2.905,485,2.376,486,2.905,487,2.37,488,3.21,489,2.733,490,2.733,491,2.37,492,1.906,493,1.906,494,2.37,495,2.733,496,2.37,497,2.37,498,3.456,499,3.456,500,2.37,501,2.017,502,2.37,503,2.37,504,1.906,505,2.37,506,2.37,507,2.37,508,2.37,509,2.37,510,2.37,511,2.37,512,2.37,513,2.37,514,3.21,515,2.376,516,2.37,517,2.37,518,1.906,519,2.37,520,2.37,521,2.017,522,2.017,523,2.017,524,2.37,525,2.37,526,1.555,527,1.555,528,1.555,529,1.555,530,1.324,531,1.555,532,3.641,533,1.555,534,1.555,535,2.37,536,2.37,537,1.324,538,1.555]],["title/interfaces/QueryCacheOptions.html",[196,0.69,485,1.77]],["body/interfaces/QueryCacheOptions.html",[0,0.097,3,0.51,4,0.51,5,0.446,8,0.28,9,0.552,10,1.083,13,1.487,18,0.399,19,0.045,21,0.51,22,0.742,23,0.578,27,1.083,33,0.915,35,1.298,37,0.702,41,1.044,45,1.044,46,1.17,48,0.919,49,0.847,52,0.929,54,0.824,55,0.027,67,0.027,88,1.602,95,1.311,111,2.096,113,1.157,114,2.579,117,2.598,119,2.686,123,3.351,139,1.482,140,1.923,142,2.114,144,1.926,166,1.65,167,1.482,179,2.84,183,1.482,194,2.499,195,2.168,196,0.578,197,1.861,211,1.482,220,1.482,231,2.114,248,1.482,249,1.482,262,1.923,264,1.305,278,1.861,295,1.861,353,1.482,375,2.168,419,1.482,480,1.705,481,2.003,482,2.003,483,2.003,485,2.464,487,2.003,488,2.856,490,2.431,491,2.003,494,2.003,495,2.431,496,2.003,497,2.003,498,3.629,499,3.629,500,2.003,501,1.705,502,2.003,503,2.003,505,2.003,506,2.003,507,2.003,508,2.003,509,2.003,510,2.003,511,2.003,512,2.003,513,2.003,514,2.856,515,2.114,516,2.003,517,2.003,519,2.003,520,2.003,521,1.705,522,1.705,523,1.705,524,2.003,525,2.003,526,2.856,527,2.003,528,2.003,529,2.003,530,1.705,531,2.003,532,3.989,533,2.003,534,2.003,535,2.856,536,2.856,537,1.705,538,2.003]],["title/classes/Shard.html",[0,0.116,539,2.035]],["body/classes/Shard.html",[0,0.11,2,0.828,3,0.576,4,0.576,5,0.505,8,0.316,9,0.602,10,1.157,12,1.138,13,1.912,14,2.212,18,0.561,19,0.045,20,1.97,21,0.792,22,0.505,23,0.898,24,1.741,27,1.349,29,2.633,31,1.4,32,1.246,33,0.853,35,1.472,37,0.837,41,1.4,44,4.015,45,1.4,46,0.928,48,1.04,49,0.792,52,1.246,54,1.026,55,0.029,67,0.029,69,3.113,88,1.3,99,2.304,177,1.476,286,2.304,287,1.928,288,1.476,295,2.028,363,2.265,523,1.928,539,3.26,540,2.265,541,3.817,542,3.817,543,4.695,544,3.817,545,2.777,546,3.817,547,2.777,548,2.777,549,3.817,550,2.777,551,3.817,552,2.777,553,2.777,554,3.817,555,2.777,556,1.928,557,2.777,558,2.777,559,2.777,560,2.777,561,2.777,562,2.265,563,3.817,564,2.777,565,2.777,566,3.817,567,2.777,568,3.817,569,2.777]],["title/interfaces/SimpleCondition.html",[196,0.69,285,1.381]],["body/interfaces/SimpleCondition.html",[3,0.693,4,0.693,5,0.607,8,0.38,9,0.68,18,0.63,19,0.045,22,0.919,33,0.784,35,1.145,37,0.754,47,1.507,49,1.132,55,0.033,67,0.033,80,2.54,88,0.995,99,2.015,144,1.25,152,1.81,154,2.381,196,1.015,264,1.774,265,2.015,266,2.015,267,2.015,268,2.318,269,2.318,270,3.51,271,2.015,272,2.015,273,2.015,274,2.015,275,2.015,276,2.318,277,2.318,278,1.774,279,2.723,280,2.723,281,2.318,282,2.723,283,2.723,284,2.723,285,2.252,286,3.051,287,2.318,288,2.293,289,3.51,290,3.51,291,2.318,292,2.318,293,2.723,294,2.723,295,1.774]],["title/classes/TransactionManager.html",[0,0.116,570,2.035]],["body/classes/TransactionManager.html",[0,0.105,2,0.787,3,0.548,4,0.548,5,0.48,7,1.594,8,0.301,9,0.581,10,1.413,12,1.099,13,1.838,14,1.736,18,0.523,19,0.045,20,2.286,21,0.881,22,0.67,23,1.178,24,1.752,25,2.153,27,1.219,29,3.102,31,0.787,32,0.7,33,0.48,35,0.7,38,2.153,43,3.006,45,1.493,46,0.882,47,0.787,48,0.988,49,0.765,52,0.7,55,0.028,67,0.028,72,1.244,106,3.748,307,1.833,326,3.006,337,3.748,364,2.153,428,2.153,570,2.948,571,4.343,572,4.245,573,4.245,574,4.594,575,4.594,576,4.594,577,4.594,578,2.64,579,4.486,580,2.64,581,2.64,582,2.64,583,5.241,584,2.64,585,4.245,586,2.64,587,4.833,588,4.245,589,2.64,590,3.942,591,2.64,592,4.833,593,3.685,594,2.64,595,2.64,596,2.64,597,3.006,598,4.245,599,2.64,600,2.64,601,2.64,602,2.64,603,2.64,604,3.685,605,2.64]],["title/changelog.html",[606,1.714,607,1.714,608,2.468]],["body/changelog.html",[12,0.875,19,0.03,23,1.13,55,0.03,67,0.03,152,1.231,309,2.394,314,4.743,353,1.772,556,3.336,597,4.218,609,2.394,610,4.487,611,3.233,612,4.487,613,2.935,614,2.935,615,3.963,616,2.935,617,4.487,618,4.487,619,2.935,620,2.935,621,2.935,622,4.487,623,4.487,624,2.935,625,5.285,626,4.804,627,2.935,628,4.487,629,4.487,630,5.447,631,2.935,632,2.935,633,2.935,634,2.935,635,2.935,636,2.935,637,2.935,638,2.935,639,3.484,640,2.935,641,2.935,642,2.935,643,4.804,644,4.804,645,2.935,646,2.935,647,4.385,648,2.935,649,2.935,650,2.935,651,2.935,652,2.935,653,2.935,654,2.935,655,2.935,656,2.935,657,5.285,658,2.935,659,2.935,660,2.935,661,3.963,662,4.804,663,3.919,664,4.487,665,3.963,666,3.963,667,3.963,668,3.963,669,3.963,670,3.963,671,3.963,672,3.963,673,3.963,674,2.935,675,2.935,676,2.935,677,3.963,678,2.935,679,2.935,680,2.935,681,2.935,682,2.935,683,2.935,684,2.935,685,2.935,686,2.935,687,2.935,688,1.559,689,2.935,690,2.935,691,2.394,692,2.935,693,2.935,694,2.935,695,2.935,696,2.935]],["title/coverage.html",[697,3.23]],["body/coverage.html",[0,0.22,1,2.121,5,0.555,6,2.491,7,2.764,18,0.348,19,0.045,23,0.719,34,1.918,40,1.844,47,0.911,55,0.031,67,0.031,68,2.491,95,2.164,111,1.439,112,2.457,113,2.3,140,1.439,152,1.921,196,1.149,265,1.844,266,2.457,285,1.439,296,1.844,297,2.491,321,2.121,322,2.491,368,1.844,369,2.948,370,2.457,371,2.826,375,1.623,480,2.826,485,1.844,539,2.121,540,2.491,570,2.121,571,2.491,639,2.121,688,2.163,697,2.491,698,3.054,699,3.054,700,3.32,701,3.39,702,5.424,703,2.491,704,5.23,705,2.491,706,3.054,707,3.054,708,3.054,709,3.054,710,3.054,711,3.32,712,2.491,713,2.491,714,2.491,715,2.491,716,3.054,717,2.491,718,2.491,719,2.491,720,5.085,721,5.085,722,2.491,723,2.491,724,2.491,725,2.491,726,4.07,727,4.07,728,3.32,729,2.491,730,2.491,731,2.491,732,2.491,733,3.054,734,2.491,735,4.07,736,3.054,737,3.054,738,3.054,739,3.054,740,3.054,741,3.054]],["title/miscellaneous/functions.html",[742,1.163,743,2.867]],["body/miscellaneous/functions.html",[8,0.435,18,0.535,19,0.043,27,1.349,31,1.4,32,1.246,33,0.853,34,2.212,37,0.602,47,1.624,55,0.036,67,0.036,136,3.684,144,1.757,166,2.5,307,2.649,368,3.07,369,2.303,370,2.834,371,3.26,455,3.112,489,2.649,522,2.649,701,3.26,717,3.829,724,3.112,725,3.829,734,3.112,742,1.797,743,3.112,744,3.815,745,3.112,746,3.112,747,3.815,748,3.815,749,3.815,750,5.085,751,3.815,752,3.815,753,3.815,754,3.815,755,3.815,756,3.815,757,3.815,758,3.815]],["title/index.html",[8,0.281,606,1.714,607,1.714]],["body/index.html",[19,0.044,21,1.058,23,0.904,32,1.019,37,0.743,46,1.284,54,0.904,55,0.036,67,0.036,78,3.134,196,0.904,206,3.274,244,2.041,250,2.846,267,2.319,268,2.668,269,2.668,296,2.319,359,3.211,426,2.668,453,2.668,521,2.668,537,2.668,556,2.668,562,3.134,688,2.99,759,3.134,760,3.134,761,3.134,762,4.161,763,3.842,764,3.842,765,3.842,766,3.842,767,3.842,768,3.842,769,4.714,770,3.842,771,4.714,772,3.842,773,3.842,774,3.842,775,3.842,776,3.842,777,3.846,778,3.842,779,3.842,780,3.842]],["title/license.html",[606,1.714,607,1.714,781,2.013]],["body/license.html",[19,0.035,55,0.035,67,0.035,426,2.538,453,3.174,501,2.538,515,2.207,639,2.538,647,2.981,781,2.981,782,3.655,783,4.988,784,3.655,785,2.981,786,2.981,787,2.981,788,4.571,789,3.655,790,3.655,791,3.655,792,3.655,793,3.655,794,3.655,795,4.571,796,5.678,797,3.655,798,3.655,799,4.988,800,3.655,801,4.571,802,3.655,803,3.655,804,3.655,805,3.655,806,3.655,807,3.655,808,3.655,809,3.655,810,3.655,811,4.571,812,3.655,813,3.655,814,3.655,815,3.655,816,3.655,817,2.981,818,3.655,819,4.571,820,4.571,821,3.655,822,3.655,823,3.655,824,3.655,825,2.981,826,3.655,827,3.655,828,3.655,829,3.655,830,3.655,831,3.655,832,3.655,833,3.655,834,3.655,835,3.655,836,3.655,837,3.655,838,3.655,839,3.655,840,3.655,841,3.655,842,3.655,843,3.655,844,3.655,845,3.655,846,3.655,847,3.655,848,3.655,849,3.655]],["title/modules.html",[850,3.23]],["body/modules.html",[19,0.04,55,0.04,67,0.04,850,3.753]],["title/overview.html",[851,3.23]],["body/overview.html",[2,1.357,19,0.04,55,0.04,67,0.04,264,2.418,611,3.712,851,3.712,852,4.55]],["title/properties.html",[9,0.554,663,2.013]],["body/properties.html",[9,0.6,19,0.043,22,0.852,37,0.6,55,0.036,56,2.491,67,0.036,88,1.398,114,1.793,244,2.023,359,2.83,370,2.298,489,2.643,495,2.643,530,2.643,590,3.105,609,3.105,688,2.023,691,3.105,759,3.824,760,3.824,761,3.105,762,3.824,777,3.105,785,3.105,786,3.105,787,3.105,825,3.105,853,3.806,854,3.806,855,3.806,856,3.806,857,3.806,858,3.806,859,4.688,860,4.688,861,3.806,862,3.806,863,3.806,864,3.806,865,3.806,866,3.806,867,3.806,868,3.806,869,3.806,870,3.806,871,3.806,872,3.806,873,3.806,874,3.806,875,3.806,876,3.806,877,3.806,878,3.806,879,3.806,880,3.806,881,3.806,882,3.806,883,3.806,884,3.806,885,3.806,886,3.806,887,3.806]],["title/miscellaneous/typealiases.html",[742,1.163,888,3.514]],["body/miscellaneous/typealiases.html",[8,0.457,18,0.615,19,0.045,35,1.284,47,1.443,55,0.037,67,0.037,80,2.571,112,2.421,113,2.28,117,2.571,177,2.761,194,2.131,195,2.131,266,2.421,270,3.36,271,2.421,272,2.421,273,2.421,274,2.421,275,2.421,276,2.784,277,2.784,278,2.131,285,1.889,292,3.36,742,1.889,889,4.009,890,5.524,891,4.009]],["title/miscellaneous/variables.html",[742,1.163,892,2.867]],["body/miscellaneous/variables.html",[8,0.3,18,0.3,19,0.045,21,1.087,22,1.033,34,2.161,37,0.58,41,0.785,47,1.264,52,1.412,54,0.619,55,0.028,67,0.028,80,2.252,95,0.985,101,1.827,104,2.943,105,3.938,154,1.996,244,1.398,271,1.589,272,1.589,273,1.589,274,1.589,275,1.589,281,2.553,285,1.24,286,1.589,288,2.657,289,2.553,290,2.553,351,3.743,359,2.22,369,2.22,419,1.589,464,2.146,490,2.553,515,1.589,579,2.999,688,1.954,700,2.146,701,3.352,703,2.999,705,2.999,711,2.999,712,2.999,713,2.999,714,2.999,715,2.999,718,2.999,719,2.999,722,2.999,723,2.999,728,2.999,729,2.999,730,2.999,731,2.999,732,2.999,742,1.24,745,2.999,746,2.999,817,3.457,892,2.146,893,3.676,894,3.676,895,3.676,896,4.588,897,2.631,898,2.631,899,4.827,900,4.588,901,3.676,902,2.631,903,4.588,904,3.676,905,3.676,906,2.631,907,2.631,908,2.631,909,3.676,910,3.676,911,3.676,912,4.238,913,3.676,914,3.676,915,3.676,916,2.631,917,2.631,918,2.631,919,2.631,920,2.631,921,2.631,922,2.631,923,2.631,924,2.631,925,2.631,926,2.631,927,2.631,928,3.676,929,2.631,930,2.631,931,2.631,932,2.631,933,2.631,934,2.631,935,2.631,936,2.631,937,2.631,938,2.631]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":95,"title":{},"body":{"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0/1",{"_index":704,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":716,"title":{},"body":{"coverage.html":{}}}],["0/26",{"_index":733,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":735,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":709,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":710,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":726,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":736,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":727,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":739,"title":{},"body":{"coverage.html":{}}}],["02",{"_index":623,"title":{},"body":{"changelog.html":{}}}],["029ad1fa",{"_index":681,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":648,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":657,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":612,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":615,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":197,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["1.0.0",{"_index":685,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":679,"title":{},"body":{"changelog.html":{}}}],["1.1.1",{"_index":676,"title":{},"body":{"changelog.html":{}}}],["1.1.2",{"_index":674,"title":{},"body":{"changelog.html":{}}}],["1.1.3",{"_index":661,"title":{},"body":{"changelog.html":{}}}],["1/1",{"_index":721,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":611,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["100",{"_index":720,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":533,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["11",{"_index":637,"title":{},"body":{"changelog.html":{}}}],["16",{"_index":616,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":624,"title":{},"body":{"changelog.html":{}}}],["2.0.0",{"_index":656,"title":{},"body":{"changelog.html":{}}}],["2.0.1",{"_index":646,"title":{},"body":{"changelog.html":{}}}],["2.1.0",{"_index":641,"title":{},"body":{"changelog.html":{}}}],["2.1.1",{"_index":636,"title":{},"body":{"changelog.html":{}}}],["2.1.2",{"_index":621,"title":{},"body":{"changelog.html":{}}}],["2.2.0",{"_index":614,"title":{},"body":{"changelog.html":{}}}],["2021",{"_index":647,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2022",{"_index":622,"title":{},"body":{"changelog.html":{}}}],["2024",{"_index":610,"title":{},"body":{"changelog.html":{}}}],["22/28",{"_index":708,"title":{},"body":{"coverage.html":{}}}],["26",{"_index":686,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":680,"title":{},"body":{"changelog.html":{}}}],["276f3b47",{"_index":682,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":662,"title":{},"body":{"changelog.html":{}}}],["2886b372",{"_index":642,"title":{},"body":{"changelog.html":{}}}],["3.0.0",{"_index":613,"title":{},"body":{"changelog.html":{}}}],["3.1.0",{"_index":609,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["30",{"_index":658,"title":{},"body":{"changelog.html":{}}}],["36",{"_index":923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["39424c77",{"_index":696,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":852,"title":{},"body":{"overview.html":{}}}],["4079a95a",{"_index":692,"title":{},"body":{"changelog.html":{}}}],["4173ee67",{"_index":652,"title":{},"body":{"changelog.html":{}}}],["4[a",{"_index":927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4e9d1718",{"_index":640,"title":{},"body":{"changelog.html":{}}}],["4xxx",{"_index":936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5/9",{"_index":738,"title":{},"body":{"coverage.html":{}}}],["55",{"_index":737,"title":{},"body":{"coverage.html":{}}}],["5bfdc44a",{"_index":675,"title":{},"body":{"changelog.html":{}}}],["5d244251",{"_index":660,"title":{},"body":{"changelog.html":{}}}],["5eef46c0",{"_index":678,"title":{},"body":{"changelog.html":{}}}],["60000",{"_index":145,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["69b61d8a",{"_index":645,"title":{},"body":{"changelog.html":{}}}],["6d760f53",{"_index":690,"title":{},"body":{"changelog.html":{}}}],["75a1f4f1",{"_index":638,"title":{},"body":{"changelog.html":{}}}],["75a86338",{"_index":655,"title":{},"body":{"changelog.html":{}}}],["76398cb0",{"_index":687,"title":{},"body":{"changelog.html":{}}}],["78",{"_index":707,"title":{},"body":{"coverage.html":{}}}],["85fb8daf",{"_index":689,"title":{},"body":{"changelog.html":{}}}],["89ab][a",{"_index":929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["95dd6d1e",{"_index":671,"title":{},"body":{"changelog.html":{}}}],["9]{9}$/i",{"_index":933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9b8d080d",{"_index":673,"title":{},"body":{"changelog.html":{}}}],["__brand__",{"_index":279,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["a[key",{"_index":444,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["above",{"_index":818,"title":{},"body":{"license.html":{}}}],["ac42869a",{"_index":631,"title":{},"body":{"changelog.html":{}}}],["acc",{"_index":440,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["access",{"_index":62,"title":{},"body":{"classes/IndexManager.html":{}}}],["accessing",{"_index":460,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["accessors",{"_index":135,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryBuilder.html":{}}}],["action",{"_index":842,"title":{},"body":{"license.html":{}}}],["add",{"_index":556,"title":{},"body":{"classes/Shard.html":{},"changelog.html":{},"index.html":{}}}],["adddocument",{"_index":69,"title":{},"body":{"classes/Indexing.html":{},"classes/Shard.html":{}}}],["adddocument(doc",{"_index":546,"title":{},"body":{"classes/Shard.html":{}}}],["adddocument(document",{"_index":76,"title":{},"body":{"classes/Indexing.html":{}}}],["adds",{"_index":519,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["ae7913f1",{"_index":635,"title":{},"body":{"changelog.html":{}}}],["age",{"_index":562,"title":{},"body":{"classes/Shard.html":{},"index.html":{}}}],["aliases",{"_index":889,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":537,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"index.html":{}}}],["already",{"_index":428,"title":{},"body":{"classes/QueryBuilder.html":{},"classes/TransactionManager.html":{}}}],["and/or",{"_index":809,"title":{},"body":{"license.html":{}}}],["api",{"_index":767,"title":{},"body":{"index.html":{}}}],["apply",{"_index":599,"title":{},"body":{"classes/TransactionManager.html":{}}}],["args",{"_index":465,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["argument",{"_index":64,"title":{},"body":{"classes/IndexManager.html":{}}}],["arising",{"_index":846,"title":{},"body":{"license.html":{}}}],["array",{"_index":166,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"miscellaneous/functions.html":{}}}],["array.from(this.cache.entries",{"_index":251,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["array.from(this.cache.entries()).foreach(([key",{"_index":210,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["array.from(this.db.values",{"_index":559,"title":{},"body":{"classes/Shard.html":{}}}],["array.isarray(value",{"_index":918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arrays",{"_index":419,"title":{},"body":{"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"miscellaneous/variables.html":{}}}],["asc",{"_index":429,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["associated",{"_index":501,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"license.html":{}}}],["async",{"_index":128,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{}}}],["author",{"_index":885,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":836,"title":{},"body":{"license.html":{}}}],["available",{"_index":603,"title":{},"body":{"classes/TransactionManager.html":{}}}],["avoid",{"_index":240,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["await",{"_index":263,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{}}}],["b",{"_index":291,"title":{},"body":{"interfaces/MemozOptions.html":{},"classes/QueryBuilder.html":{},"interfaces/SimpleCondition.html":{}}}],["b[key",{"_index":445,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["backpressure",{"_index":873,"title":{},"body":{"properties.html":{}}}],["based",{"_index":756,"title":{},"body":{"miscellaneous/functions.html":{}}}],["before",{"_index":589,"title":{},"body":{"classes/TransactionManager.html":{}}}],["begins",{"_index":591,"title":{},"body":{"classes/TransactionManager.html":{}}}],["begintransaction",{"_index":574,"title":{},"body":{"classes/TransactionManager.html":{}}}],["behavior",{"_index":474,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["bitmaps",{"_index":864,"title":{},"body":{"properties.html":{}}}],["boolean",{"_index":154,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/variables.html":{}}}],["boolean|undefined",{"_index":336,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["both",{"_index":417,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["bug",{"_index":628,"title":{},"body":{"changelog.html":{}}}],["bugs",{"_index":691,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["builder",{"_index":754,"title":{},"body":{"miscellaneous/functions.html":{}}}],["builder.exec",{"_index":479,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.exec().catch(onrejected",{"_index":476,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.then(...args",{"_index":475,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts",{"_index":371,"title":{},"body":{"classes/QueryBuilder.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["builder.ts:11",{"_index":390,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:13",{"_index":394,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:15",{"_index":393,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:17",{"_index":387,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:31",{"_index":406,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:38",{"_index":410,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:45",{"_index":408,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:5",{"_index":391,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:50",{"_index":405,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:56",{"_index":400,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:7",{"_index":392,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:79",{"_index":412,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:86",{"_index":397,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:9",{"_index":389,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:92",{"_index":402,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["builder.ts:97",{"_index":416,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["c",{"_index":784,"title":{},"body":{"license.html":{}}}],["c0bab78d",{"_index":668,"title":{},"body":{"changelog.html":{}}}],["c411d805",{"_index":651,"title":{},"body":{"changelog.html":{}}}],["cache",{"_index":114,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"properties.html":{}}}],["cache.ts",{"_index":113,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["cache.ts:109",{"_index":184,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:11",{"_index":143,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryCache.html":{}}}],["cache.ts:13",{"_index":150,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:14",{"_index":492,"title":{},"body":{"classes/QueryCache.html":{}}}],["cache.ts:143",{"_index":161,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:147",{"_index":158,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:15",{"_index":156,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:151",{"_index":189,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:155",{"_index":175,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:16",{"_index":486,"title":{},"body":{"classes/QueryCache.html":{}}}],["cache.ts:167",{"_index":165,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:17",{"_index":153,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:173",{"_index":182,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:178",{"_index":163,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:186",{"_index":191,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:19",{"_index":148,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:191",{"_index":193,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:196",{"_index":172,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:21",{"_index":155,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:23",{"_index":149,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:25",{"_index":151,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:27",{"_index":146,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:30",{"_index":141,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:37",{"_index":493,"title":{},"body":{"classes/QueryCache.html":{}}}],["cache.ts:52",{"_index":181,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:54",{"_index":518,"title":{},"body":{"classes/QueryCache.html":{}}}],["cache.ts:62",{"_index":178,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryCache.html":{}}}],["cache.ts:67",{"_index":157,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:74",{"_index":504,"title":{},"body":{"classes/QueryCache.html":{}}}],["cache.ts:79",{"_index":186,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:85",{"_index":187,"title":{},"body":{"classes/LRUCache.html":{}}}],["cache.ts:91",{"_index":168,"title":{},"body":{"classes/LRUCache.html":{}}}],["cached",{"_index":260,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["cachehits",{"_index":481,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["cachemisses",{"_index":482,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["callback",{"_index":303,"title":{},"body":{"classes/Mutex.html":{}}}],["caller",{"_index":319,"title":{},"body":{"classes/Mutex.html":{}}}],["capture",{"_index":311,"title":{},"body":{"classes/Mutex.html":{}}}],["case",{"_index":105,"title":{},"body":{"classes/Indexing.html":{},"miscellaneous/variables.html":{}}}],["catch",{"_index":379,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["catch(onrejected",{"_index":395,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["chain",{"_index":308,"title":{},"body":{"classes/Mutex.html":{}}}],["chaining",{"_index":468,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["changelog",{"_index":608,"title":{"changelog.html":{}},"body":{}}],["changes",{"_index":597,"title":{},"body":{"classes/TransactionManager.html":{},"changelog.html":{}}}],["charge",{"_index":792,"title":{},"body":{"license.html":{}}}],["check",{"_index":100,"title":{},"body":{"classes/Indexing.html":{},"classes/PersistenceManager.html":{}}}],["checks",{"_index":912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chores",{"_index":625,"title":{},"body":{"changelog.html":{}}}],["chunk",{"_index":753,"title":{},"body":{"miscellaneous/functions.html":{}}}],["chunkarray",{"_index":725,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["chunkarray(array",{"_index":747,"title":{},"body":{"miscellaneous/functions.html":{}}}],["chunks",{"_index":750,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ci",{"_index":667,"title":{},"body":{"changelog.html":{}}}],["claim",{"_index":839,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"overview.html":{}}}],["cleanup",{"_index":199,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["cleanupexpiredentries",{"_index":124,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["cleanupinterval",{"_index":115,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["cleanuptimer",{"_index":116,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["clear",{"_index":14,"title":{},"body":{"classes/IndexManager.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/PersistenceManager.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}}}],["cleared",{"_index":517,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["clearinterval(this.cleanuptimer",{"_index":219,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["clears",{"_index":513,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["code.github.io/memoz",{"_index":881,"title":{},"body":{"properties.html":{}}}],["codes",{"_index":672,"title":{},"body":{"changelog.html":{}}}],["committing",{"_index":602,"title":{},"body":{"classes/TransactionManager.html":{}}}],["committransaction",{"_index":575,"title":{},"body":{"classes/TransactionManager.html":{}}}],["comparisonoperator",{"_index":270,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["condition",{"_index":896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["condition.ts",{"_index":712,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["conditionals",{"_index":245,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["conditionnode",{"_index":80,"title":{},"body":{"classes/Indexing.html":{},"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["conditions",{"_index":817,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["connection",{"_index":848,"title":{},"body":{"license.html":{}}}],["const",{"_index":54,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":72,"title":{},"body":{"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/TransactionManager.html":{}}}],["constructor(db",{"_index":326,"title":{},"body":{"classes/PersistenceManager.html":{},"classes/TransactionManager.html":{}}}],["constructor(fields",{"_index":73,"title":{},"body":{"classes/Indexing.html":{}}}],["constructor(options",{"_index":139,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["constructor(result",{"_index":386,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["containing",{"_index":491,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["contents",{"_index":358,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["continue",{"_index":469,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["continuous",{"_index":617,"title":{},"body":{"changelog.html":{}}}],["contract",{"_index":843,"title":{},"body":{"license.html":{}}}],["copies",{"_index":811,"title":{},"body":{"license.html":{}}}],["copy",{"_index":795,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":783,"title":{},"body":{"license.html":{}}}],["counts",{"_index":509,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["coverage",{"_index":697,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":353,"title":{},"body":{"classes/PersistenceManager.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"changelog.html":{}}}],["createquerybuilderproxy",{"_index":717,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createquerybuilderproxy(builder",{"_index":455,"title":{},"body":{"classes/QueryBuilder.html":{},"miscellaneous/functions.html":{}}}],["createquerybuilderproxy(result",{"_index":470,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["crud",{"_index":765,"title":{},"body":{"index.html":{}}}],["current",{"_index":307,"title":{},"body":{"classes/Mutex.html":{},"classes/TransactionManager.html":{},"miscellaneous/functions.html":{}}}],["custom",{"_index":278,"title":{},"body":{"interfaces/MemozOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["customcompare",{"_index":290,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/variables.html":{}}}],["customcompare(datum[field",{"_index":897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["d687504c",{"_index":654,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":840,"title":{},"body":{"license.html":{}}}],["data",{"_index":359,"title":{},"body":{"classes/PersistenceManager.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["data.filter((datum",{"_index":908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data.find((datum",{"_index":916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data.json",{"_index":340,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["database",{"_index":760,"title":{},"body":{"index.html":{},"properties.html":{}}}],["datum",{"_index":895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datum[field",{"_index":899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db",{"_index":29,"title":{},"body":{"classes/IndexManager.html":{},"classes/PersistenceManager.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}}}],["db.get(id",{"_index":61,"title":{},"body":{"classes/IndexManager.html":{}}}],["dbsnapshot",{"_index":572,"title":{},"body":{"classes/TransactionManager.html":{}}}],["dd121257",{"_index":650,"title":{},"body":{"changelog.html":{}}}],["de8a28fa",{"_index":620,"title":{},"body":{"changelog.html":{}}}],["deae21e0",{"_index":684,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":798,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":849,"title":{},"body":{"license.html":{}}}],["default",{"_index":21,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":24,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}}}],["delete",{"_index":125,"title":{},"body":{"classes/LRUCache.html":{}}}],["delete(key",{"_index":159,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["deletebyid",{"_index":541,"title":{},"body":{"classes/Shard.html":{}}}],["deletebyid(id",{"_index":549,"title":{},"body":{"classes/Shard.html":{}}}],["deleteone",{"_index":683,"title":{},"body":{"changelog.html":{}}}],["deps",{"_index":626,"title":{},"body":{"changelog.html":{}}}],["desc",{"_index":430,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["description",{"_index":489,"title":{},"body":{"classes/QueryCache.html":{},"miscellaneous/functions.html":{},"properties.html":{}}}],["deserialize",{"_index":126,"title":{},"body":{"classes/LRUCache.html":{}}}],["deserialize(serializedcache",{"_index":162,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["desired",{"_index":284,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["different",{"_index":855,"title":{},"body":{"properties.html":{}}}],["differently",{"_index":109,"title":{},"body":{"classes/Indexing.html":{}}}],["dir",{"_index":342,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["disable",{"_index":202,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryBuilder.html":{}}}],["disk",{"_index":762,"title":{},"body":{"index.html":{},"properties.html":{}}}],["distribute",{"_index":807,"title":{},"body":{"license.html":{}}}],["doc",{"_index":44,"title":{},"body":{"classes/IndexManager.html":{},"classes/Shard.html":{}}}],["docs",{"_index":630,"title":{},"body":{"changelog.html":{}}}],["document",{"_index":78,"title":{},"body":{"classes/Indexing.html":{},"index.html":{}}}],["document[field]).join('_",{"_index":103,"title":{},"body":{"classes/Indexing.html":{}}}],["documentation",{"_index":639,"title":{},"body":{"changelog.html":{},"coverage.html":{},"license.html":{}}}],["documents",{"_index":295,"title":{},"body":{"interfaces/MemozOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{}}}],["documentwithid",{"_index":35,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"miscellaneous/typealiases.html":{}}}],["dpes",{"_index":649,"title":{},"body":{"changelog.html":{}}}],["e",{"_index":786,"title":{},"body":{"license.html":{},"properties.html":{}}}],["e.g",{"_index":561,"title":{},"body":{"classes/Shard.html":{}}}],["e81eee88",{"_index":627,"title":{},"body":{"changelog.html":{}}}],["e9322431",{"_index":666,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":522,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"miscellaneous/functions.html":{}}}],["early",{"_index":913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["easy",{"_index":764,"title":{},"body":{"index.html":{}}}],["effectively",{"_index":915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["empty",{"_index":108,"title":{},"body":{"classes/Indexing.html":{}}}],["enhance",{"_index":280,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["ensure",{"_index":471,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["entire",{"_index":514,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["entries",{"_index":127,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/PersistenceManager.html":{}}}],["entries.foreach(([key",{"_index":257,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/PersistenceManager.html":{}}}],["entry",{"_index":179,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["entry.expiry",{"_index":207,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["entry.value",{"_index":214,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["environment",{"_index":670,"title":{},"body":{"changelog.html":{}}}],["eq",{"_index":271,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":107,"title":{},"body":{"classes/Indexing.html":{}}}],["error('no",{"_index":598,"title":{},"body":{"classes/TransactionManager.html":{}}}],["error('transaction",{"_index":584,"title":{},"body":{"classes/TransactionManager.html":{}}}],["error('unexpected",{"_index":110,"title":{},"body":{"classes/Indexing.html":{}}}],["eslint",{"_index":201,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryBuilder.html":{}}}],["evaluatecondition",{"_index":713,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["evaluatecondition(datum",{"_index":907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["evaluatenode",{"_index":715,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["evaluatenode(datum",{"_index":903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["event",{"_index":835,"title":{},"body":{"license.html":{}}}],["eviction",{"_index":488,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["evictionstrategy",{"_index":117,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"miscellaneous/typealiases.html":{}}}],["example",{"_index":771,"title":{},"body":{"index.html":{}}}],["excluding",{"_index":921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exec",{"_index":380,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["execute",{"_index":434,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["exists",{"_index":352,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["exits",{"_index":914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expired",{"_index":503,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["expiry",{"_index":246,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["export",{"_index":49,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{}}}],["express",{"_index":826,"title":{},"body":{"license.html":{}}}],["extends",{"_index":526,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["ezzat.vercel.app",{"_index":887,"title":{},"body":{"properties.html":{}}}],["f\\d]{12",{"_index":930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f\\d]{3",{"_index":928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f\\d]{4",{"_index":926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f\\d]{8",{"_index":925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fahmy",{"_index":787,"title":{},"body":{"license.html":{},"properties.html":{}}}],["fallback",{"_index":477,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["false",{"_index":206,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"index.html":{}}}],["features",{"_index":643,"title":{},"body":{"changelog.html":{}}}],["fetchfn",{"_index":171,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["field",{"_index":286,"title":{},"body":{"interfaces/MemozOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/variables.html":{}}}],["fields",{"_index":39,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{}}}],["fifo",{"_index":195,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"miscellaneous/typealiases.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"coverage.html":{}}}],["filepath",{"_index":323,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["files",{"_index":797,"title":{},"body":{"license.html":{}}}],["filter",{"_index":252,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["finally",{"_index":381,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["finally(onfinally",{"_index":401,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["finish",{"_index":316,"title":{},"body":{"classes/Mutex.html":{}}}],["first",{"_index":230,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["fitness",{"_index":831,"title":{},"body":{"license.html":{}}}],["fixes",{"_index":629,"title":{},"body":{"changelog.html":{}}}],["following",{"_index":816,"title":{},"body":{"license.html":{}}}],["found",{"_index":502,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["free",{"_index":791,"title":{},"body":{"license.html":{}}}],["fs",{"_index":331,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["fs.createwritestream(this.filepath",{"_index":347,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["fs.existssync(this.filepath",{"_index":354,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["fspromises",{"_index":333,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["fspromises.access(this.filepath",{"_index":356,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["fspromises.mkdir(dir",{"_index":344,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["fspromises.readfile(this.filepath",{"_index":360,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["fspromises.writefile(this.filepath",{"_index":355,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["function",{"_index":152,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/Mutex.html":{},"classes/QueryBuilder.html":{},"interfaces/SimpleCondition.html":{},"changelog.html":{},"coverage.html":{}}}],["functions",{"_index":743,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":814,"title":{},"body":{"license.html":{}}}],["generates",{"_index":755,"title":{},"body":{"miscellaneous/functions.html":{}}}],["get(key",{"_index":167,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["get(target",{"_index":457,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["getasync",{"_index":129,"title":{},"body":{"classes/LRUCache.html":{}}}],["getasync(key",{"_index":170,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["getbyid",{"_index":542,"title":{},"body":{"classes/Shard.html":{}}}],["getbyid(id",{"_index":551,"title":{},"body":{"classes/Shard.html":{}}}],["getcurrentdb",{"_index":576,"title":{},"body":{"classes/TransactionManager.html":{}}}],["getdocuments",{"_index":543,"title":{},"body":{"classes/Shard.html":{}}}],["getfromindex",{"_index":15,"title":{},"body":{"classes/IndexManager.html":{}}}],["getfromindex(query",{"_index":28,"title":{},"body":{"classes/IndexManager.html":{}}}],["gethitrate",{"_index":190,"title":{},"body":{"classes/LRUCache.html":{}}}],["getindex",{"_index":16,"title":{},"body":{"classes/IndexManager.html":{}}}],["getindex(fields",{"_index":36,"title":{},"body":{"classes/IndexManager.html":{}}}],["getkey",{"_index":70,"title":{},"body":{"classes/Indexing.html":{}}}],["getkey(document",{"_index":79,"title":{},"body":{"classes/Indexing.html":{}}}],["getmany",{"_index":719,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getmissrate",{"_index":192,"title":{},"body":{"classes/LRUCache.html":{}}}],["getone",{"_index":723,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["gets",{"_index":320,"title":{},"body":{"classes/Mutex.html":{}}}],["getsize",{"_index":188,"title":{},"body":{"classes/LRUCache.html":{}}}],["getstats",{"_index":483,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["getting",{"_index":606,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["gh",{"_index":633,"title":{},"body":{"changelog.html":{}}}],["git+https://github.com/miladezzat/memoz.git",{"_index":884,"title":{},"body":{"properties.html":{}}}],["given",{"_index":496,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["global",{"_index":525,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["granted",{"_index":790,"title":{},"body":{"license.html":{}}}],["gt",{"_index":273,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["gte",{"_index":274,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["handle",{"_index":104,"title":{},"body":{"classes/Indexing.html":{},"classes/QueryBuilder.html":{},"miscellaneous/variables.html":{}}}],["has(key",{"_index":174,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["hash",{"_index":877,"title":{},"body":{"properties.html":{}}}],["hashes",{"_index":861,"title":{},"body":{"properties.html":{}}}],["hereby",{"_index":789,"title":{},"body":{"license.html":{}}}],["hit",{"_index":507,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["hit/miss",{"_index":505,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["hitcount",{"_index":118,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["hitrate",{"_index":137,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["hits",{"_index":498,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["hold",{"_index":595,"title":{},"body":{"classes/TransactionManager.html":{}}}],["holders",{"_index":837,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":878,"title":{},"body":{"properties.html":{}}}],["https://60",{"_index":879,"title":{},"body":{"properties.html":{}}}],["https://github.com/miladezzat/memoz/issues",{"_index":882,"title":{},"body":{"properties.html":{}}}],["https://milad",{"_index":886,"title":{},"body":{"properties.html":{}}}],["husky",{"_index":665,"title":{},"body":{"changelog.html":{}}}],["hyperloglogs",{"_index":863,"title":{},"body":{"properties.html":{}}}],["id",{"_index":99,"title":{},"body":{"classes/Indexing.html":{},"interfaces/MemozOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{}}}],["id.ts",{"_index":701,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":698,"title":{},"body":{"coverage.html":{}}}],["idocument",{"_index":775,"title":{},"body":{"index.html":{}}}],["implements",{"_index":372,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["implied",{"_index":827,"title":{},"body":{"license.html":{}}}],["import",{"_index":46,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"index.html":{}}}],["included",{"_index":821,"title":{},"body":{"license.html":{}}}],["including",{"_index":801,"title":{},"body":{"license.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index.adddocument(doc",{"_index":51,"title":{},"body":{"classes/IndexManager.html":{}}}],["index.query(query",{"_index":59,"title":{},"body":{"classes/IndexManager.html":{}}}],["indexedids",{"_index":58,"title":{},"body":{"classes/IndexManager.html":{}}}],["indexedids.foreach((id",{"_index":60,"title":{},"body":{"classes/IndexManager.html":{}}}],["indexes",{"_index":11,"title":{},"body":{"classes/IndexManager.html":{}}}],["indexing",{"_index":40,"title":{"classes/Indexing.html":{}},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"coverage.html":{}}}],["indexmanager",{"_index":1,"title":{"classes/IndexManager.html":{}},"body":{"classes/IndexManager.html":{},"coverage.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{}}}],["initialize",{"_index":594,"title":{},"body":{"classes/TransactionManager.html":{}}}],["initializes",{"_index":487,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["inneracc",{"_index":443,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["installation",{"_index":769,"title":{},"body":{"index.html":{}}}],["instance",{"_index":527,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["instanceof",{"_index":420,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["integration",{"_index":618,"title":{},"body":{"changelog.html":{}}}],["interface",{"_index":196,"title":{"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{}},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"coverage.html":{},"index.html":{}}}],["interfaces",{"_index":264,"title":{},"body":{"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"overview.html":{}}}],["interval",{"_index":200,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["invalidate",{"_index":484,"title":{},"body":{"classes/QueryCache.html":{}}}],["invalidate(key",{"_index":510,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["invalidates",{"_index":511,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["isexpired",{"_index":130,"title":{},"body":{"classes/LRUCache.html":{}}}],["isexpired(entry",{"_index":176,"title":{},"body":{"classes/LRUCache.html":{}}}],["isobject",{"_index":730,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isvalidmemozid",{"_index":732,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["it's",{"_index":427,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["itself",{"_index":467,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["js",{"_index":653,"title":{},"body":{"changelog.html":{}}}],["json",{"_index":664,"title":{},"body":{"changelog.html":{}}}],["json.parse(data",{"_index":362,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["json.parse(serializedcache",{"_index":256,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["json.stringify(entries",{"_index":255,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["k",{"_index":160,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["key",{"_index":88,"title":{},"body":{"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"properties.html":{}}}],["keyof",{"_index":287,"title":{},"body":{"interfaces/MemozOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{}}}],["keys",{"_index":529,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["keywords",{"_index":865,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":825,"title":{},"body":{"license.html":{},"properties.html":{}}}],["known",{"_index":461,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["liability",{"_index":841,"title":{},"body":{"license.html":{}}}],["liable",{"_index":838,"title":{},"body":{"license.html":{}}}],["license",{"_index":781,"title":{"license.html":{}},"body":{"license.html":{}}}],["limit",{"_index":382,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["limit(limitcount",{"_index":404,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["limitation",{"_index":802,"title":{},"body":{"license.html":{}}}],["limitcount",{"_index":374,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["limited",{"_index":828,"title":{},"body":{"license.html":{}}}],["line",{"_index":204,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryBuilder.html":{}}}],["list",{"_index":495,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"properties.html":{}}}],["lists",{"_index":858,"title":{},"body":{"properties.html":{}}}],["literal",{"_index":177,"title":{},"body":{"classes/LRUCache.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/Shard.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":357,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["loadfromdisk",{"_index":324,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["location",{"_index":778,"title":{},"body":{"index.html":{}}}],["lock",{"_index":298,"title":{},"body":{"classes/Mutex.html":{}}}],["lock(callback",{"_index":301,"title":{},"body":{"classes/Mutex.html":{}}}],["locking",{"_index":304,"title":{},"body":{"classes/Mutex.html":{}}}],["logic",{"_index":900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lru",{"_index":194,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"miscellaneous/typealiases.html":{}}}],["lrucache",{"_index":111,"title":{"classes/LRUCache.html":{}},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"coverage.html":{}}}],["lrucacheoptions",{"_index":140,"title":{"interfaces/LRUCacheOptions.html":{}},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"coverage.html":{}}}],["lt",{"_index":275,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["lte",{"_index":276,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["made",{"_index":600,"title":{},"body":{"classes/TransactionManager.html":{}}}],["main",{"_index":601,"title":{},"body":{"classes/TransactionManager.html":{}}}],["manager.ts",{"_index":7,"title":{},"body":{"classes/IndexManager.html":{},"classes/PersistenceManager.html":{},"classes/TransactionManager.html":{},"coverage.html":{}}}],["manager.ts:11",{"_index":327,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["manager.ts:14",{"_index":38,"title":{},"body":{"classes/IndexManager.html":{},"classes/TransactionManager.html":{}}}],["manager.ts:18",{"_index":30,"title":{},"body":{"classes/IndexManager.html":{}}}],["manager.ts:19",{"_index":330,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["manager.ts:24",{"_index":580,"title":{},"body":{"classes/TransactionManager.html":{}}}],["manager.ts:31",{"_index":26,"title":{},"body":{"classes/IndexManager.html":{},"classes/PersistenceManager.html":{}}}],["manager.ts:34",{"_index":582,"title":{},"body":{"classes/TransactionManager.html":{}}}],["manager.ts:4",{"_index":578,"title":{},"body":{"classes/TransactionManager.html":{}}}],["manager.ts:47",{"_index":581,"title":{},"body":{"classes/TransactionManager.html":{}}}],["manager.ts:6",{"_index":25,"title":{},"body":{"classes/IndexManager.html":{},"classes/TransactionManager.html":{}}}],["manager.ts:7",{"_index":328,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["manager.ts:8",{"_index":43,"title":{},"body":{"classes/IndexManager.html":{},"classes/TransactionManager.html":{}}}],["manager.ts:9",{"_index":329,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["many",{"_index":370,"title":{},"body":{"classes/QueryBuilder.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"properties.html":{}}}],["many.ts",{"_index":718,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["map",{"_index":20,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/PersistenceManager.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}}}],["map(([key",{"_index":253,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["map(this.db",{"_index":593,"title":{},"body":{"classes/TransactionManager.html":{}}}],["matching",{"_index":67,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxsize",{"_index":119,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["mechanism",{"_index":305,"title":{},"body":{"classes/Mutex.html":{}}}],["memo",{"_index":776,"title":{},"body":{"index.html":{}}}],["memory",{"_index":759,"title":{},"body":{"index.html":{},"properties.html":{}}}],["memoz",{"_index":688,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["memoz_id_pattern",{"_index":703,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["memoz_id_pattern.test(memozid",{"_index":924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memoz_id_template",{"_index":705,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["memozid",{"_index":47,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["memozid.length",{"_index":922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memozoptions",{"_index":265,"title":{"interfaces/MemozOptions.html":{}},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"coverage.html":{}}}],["memozusage",{"_index":774,"title":{},"body":{"index.html":{}}}],["merchantability",{"_index":830,"title":{},"body":{"license.html":{}}}],["merge",{"_index":805,"title":{},"body":{"license.html":{}}}],["method",{"_index":659,"title":{},"body":{"changelog.html":{}}}],["methods",{"_index":12,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"changelog.html":{}}}],["metrics",{"_index":531,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["milad",{"_index":785,"title":{},"body":{"license.html":{},"properties.html":{}}}],["miladezzat/memoz",{"_index":632,"title":{},"body":{"changelog.html":{}}}],["min",{"_index":880,"title":{},"body":{"properties.html":{}}}],["minute",{"_index":198,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["miscellaneous",{"_index":742,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["miss",{"_index":508,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["misscount",{"_index":120,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["misses",{"_index":499,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["missrate",{"_index":138,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["mit",{"_index":782,"title":{},"body":{"license.html":{}}}],["model",{"_index":854,"title":{},"body":{"properties.html":{}}}],["modify",{"_index":804,"title":{},"body":{"license.html":{}}}],["modules",{"_index":850,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":281,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/variables.html":{}}}],["mutex",{"_index":296,"title":{"classes/Mutex.html":{}},"body":{"classes/Mutex.html":{},"coverage.html":{},"index.html":{}}}],["n",{"_index":294,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["name",{"_index":32,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["neq",{"_index":272,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["nested",{"_index":241,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["never",{"_index":449,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["new",{"_index":23,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["next",{"_index":203,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryBuilder.html":{}}}],["nin",{"_index":277,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["node",{"_index":351,"title":{},"body":{"classes/PersistenceManager.html":{},"miscellaneous/variables.html":{}}}],["node.$and.every((subnode",{"_index":902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["node.$or.some((subnode",{"_index":906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["node.ts",{"_index":714,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["nodejs",{"_index":871,"title":{},"body":{"properties.html":{}}}],["nodejs.timeout",{"_index":147,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["non",{"_index":920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["noninfringement",{"_index":834,"title":{},"body":{"license.html":{}}}],["normal",{"_index":462,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["notice",{"_index":819,"title":{},"body":{"license.html":{}}}],["now",{"_index":208,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["npm",{"_index":772,"title":{},"body":{"index.html":{}}}],["null",{"_index":579,"title":{},"body":{"classes/TransactionManager.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":144,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/functions.html":{}}}],["number.max_safe_integer",{"_index":388,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["object",{"_index":490,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"miscellaneous/variables.html":{}}}],["object.entries(sortobj).reduce((inneracc",{"_index":441,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["object.ts",{"_index":729,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["obtaining",{"_index":794,"title":{},"body":{"license.html":{}}}],["offering",{"_index":763,"title":{},"body":{"index.html":{}}}],["oldest",{"_index":233,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["oldestentry",{"_index":235,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["oldestentry.value",{"_index":239,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["oldestkey",{"_index":228,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["one",{"_index":905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["one.ts",{"_index":722,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["onevict",{"_index":121,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["onfinally",{"_index":403,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["onfulfilled",{"_index":415,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["onrejected",{"_index":399,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["operation",{"_index":315,"title":{},"body":{"classes/Mutex.html":{}}}],["operations",{"_index":766,"title":{},"body":{"index.html":{}}}],["operator",{"_index":289,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/variables.html":{}}}],["optional",{"_index":33,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":142,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["order",{"_index":442,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["original",{"_index":364,"title":{},"body":{"classes/PersistenceManager.html":{},"classes/TransactionManager.html":{}}}],["otherwise",{"_index":845,"title":{},"body":{"license.html":{}}}],["out",{"_index":847,"title":{},"body":{"license.html":{}}}],["overriding",{"_index":524,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["overview",{"_index":851,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":663,"title":{"properties.html":{}},"body":{"changelog.html":{}}}],["pages",{"_index":634,"title":{},"body":{"changelog.html":{}}}],["paginatedresult",{"_index":446,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["param",{"_index":532,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["parameters",{"_index":31,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"miscellaneous/functions.html":{}}}],["particular",{"_index":832,"title":{},"body":{"license.html":{}}}],["partition",{"_index":560,"title":{},"body":{"classes/Shard.html":{}}}],["partitiondocumentsby",{"_index":544,"title":{},"body":{"classes/Shard.html":{}}}],["partitiondocumentsby(field",{"_index":554,"title":{},"body":{"classes/Shard.html":{}}}],["partitions",{"_index":563,"title":{},"body":{"classes/Shard.html":{}}}],["partitions[key",{"_index":566,"title":{},"body":{"classes/Shard.html":{}}}],["partitions[key].push(doc",{"_index":567,"title":{},"body":{"classes/Shard.html":{}}}],["pass",{"_index":901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passed",{"_index":63,"title":{},"body":{"classes/IndexManager.html":{}}}],["path",{"_index":334,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["path.dirname(this.filepath",{"_index":343,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["path.resolve(filepath",{"_index":339,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["per",{"_index":538,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["performance",{"_index":869,"title":{},"body":{"properties.html":{}}}],["performance.now",{"_index":209,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["permission",{"_index":788,"title":{},"body":{"license.html":{}}}],["permit",{"_index":812,"title":{},"body":{"license.html":{}}}],["persist",{"_index":777,"title":{},"body":{"index.html":{},"properties.html":{}}}],["persistence",{"_index":768,"title":{},"body":{"index.html":{}}}],["persistencemanager",{"_index":321,"title":{"classes/PersistenceManager.html":{}},"body":{"classes/PersistenceManager.html":{},"coverage.html":{}}}],["persists",{"_index":761,"title":{},"body":{"index.html":{},"properties.html":{}}}],["persisttodisk",{"_index":267,"title":{},"body":{"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"interfaces/SimpleCondition.html":{},"index.html":{}}}],["person",{"_index":793,"title":{},"body":{"license.html":{}}}],["persons",{"_index":813,"title":{},"body":{"license.html":{}}}],["pipeline",{"_index":619,"title":{},"body":{"changelog.html":{}}}],["pipelining",{"_index":868,"title":{},"body":{"properties.html":{}}}],["populate",{"_index":367,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["portions",{"_index":823,"title":{},"body":{"license.html":{}}}],["precompile",{"_index":909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["private",{"_index":10,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}}}],["progress",{"_index":585,"title":{},"body":{"classes/TransactionManager.html":{}}}],["promise",{"_index":173,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{}}}],["promise.resolve",{"_index":299,"title":{},"body":{"classes/Mutex.html":{}}}],["promiselike",{"_index":373,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["promises",{"_index":332,"title":{},"body":{"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{}}}],["prop",{"_index":458,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"properties.html":{}}}],["property",{"_index":101,"title":{},"body":{"classes/Indexing.html":{},"classes/QueryBuilder.html":{},"miscellaneous/variables.html":{}}}],["provide",{"_index":350,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["provided",{"_index":515,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["proxy",{"_index":473,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["proxy(builder",{"_index":456,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["public",{"_index":13,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}}}],["publish",{"_index":806,"title":{},"body":{"license.html":{}}}],["pubsub",{"_index":872,"title":{},"body":{"properties.html":{}}}],["purpose",{"_index":833,"title":{},"body":{"license.html":{}}}],["query",{"_index":34,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/QueryBuilder.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["query(query",{"_index":82,"title":{},"body":{"classes/Indexing.html":{}}}],["querybuilder",{"_index":368,"title":{"classes/QueryBuilder.html":{}},"body":{"classes/QueryBuilder.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["querycache",{"_index":375,"title":{"classes/QueryCache.html":{}},"body":{"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"coverage.html":{}}}],["querycacheoptions",{"_index":485,"title":{"interfaces/QueryCacheOptions.html":{}},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"coverage.html":{}}}],["querykey",{"_index":376,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["queue",{"_index":870,"title":{},"body":{"properties.html":{}}}],["ram",{"_index":874,"title":{},"body":{"properties.html":{}}}],["reason",{"_index":396,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["receiver",{"_index":459,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["recursive",{"_index":345,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["redis",{"_index":867,"title":{},"body":{"properties.html":{}}}],["reduce",{"_index":910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refactors",{"_index":669,"title":{},"body":{"changelog.html":{}}}],["reference",{"_index":365,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["reflect.get(target",{"_index":463,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["reflect.ownkeys(value).length",{"_index":919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["remove",{"_index":516,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["removedocument",{"_index":71,"title":{},"body":{"classes/Indexing.html":{}}}],["removedocument(document",{"_index":84,"title":{},"body":{"classes/Indexing.html":{}}}],["removes",{"_index":512,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["reorder",{"_index":131,"title":{},"body":{"classes/LRUCache.html":{}}}],["reorder(key",{"_index":180,"title":{},"body":{"classes/LRUCache.html":{}}}],["repeated",{"_index":911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["repository",{"_index":883,"title":{},"body":{"properties.html":{}}}],["resolve",{"_index":309,"title":{},"body":{"classes/Mutex.html":{},"changelog.html":{}}}],["resolved",{"_index":418,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["resolveresult",{"_index":383,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["resolves",{"_index":425,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["restore",{"_index":605,"title":{},"body":{"classes/TransactionManager.html":{}}}],["restriction",{"_index":800,"title":{},"body":{"license.html":{}}}],["result",{"_index":262,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/Mutex.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["resultpromise",{"_index":312,"title":{},"body":{"classes/Mutex.html":{},"classes/QueryBuilder.html":{}}}],["resultpromise.then",{"_index":318,"title":{},"body":{"classes/Mutex.html":{}}}],["results",{"_index":55,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results.add(doc",{"_index":65,"title":{},"body":{"classes/IndexManager.html":{}}}],["retrieve",{"_index":500,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["retrieves",{"_index":494,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["return",{"_index":52,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/Mutex.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":27,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{},"miscellaneous/functions.html":{}}}],["rights",{"_index":803,"title":{},"body":{"license.html":{}}}],["rollback",{"_index":604,"title":{},"body":{"classes/TransactionManager.html":{}}}],["rollbacktransaction",{"_index":577,"title":{},"body":{"classes/TransactionManager.html":{}}}],["run",{"_index":310,"title":{},"body":{"classes/Mutex.html":{}}}],["safety",{"_index":780,"title":{},"body":{"index.html":{}}}],["savetodisk",{"_index":325,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["sell",{"_index":810,"title":{},"body":{"license.html":{}}}],["serialize",{"_index":132,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["serializedcache",{"_index":164,"title":{},"body":{"classes/LRUCache.html":{}}}],["set",{"_index":56,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"classes/QueryCache.html":{},"properties.html":{}}}],["set(key",{"_index":183,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["setinterval",{"_index":217,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["sets",{"_index":859,"title":{},"body":{"properties.html":{}}}],["setup",{"_index":644,"title":{},"body":{"changelog.html":{}}}],["shall",{"_index":820,"title":{},"body":{"license.html":{}}}],["shard",{"_index":539,"title":{"classes/Shard.html":{}},"body":{"classes/Shard.html":{},"coverage.html":{}}}],["simple",{"_index":244,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["simplecondition",{"_index":285,"title":{"interfaces/SimpleCondition.html":{}},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["size",{"_index":136,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"miscellaneous/functions.html":{}}}],["skip",{"_index":384,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["skip(skipcount",{"_index":407,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["skipcount",{"_index":377,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["smaller",{"_index":749,"title":{},"body":{"miscellaneous/functions.html":{}}}],["snapshot",{"_index":587,"title":{},"body":{"classes/TransactionManager.html":{}}}],["software",{"_index":796,"title":{},"body":{"license.html":{}}}],["solve",{"_index":677,"title":{},"body":{"changelog.html":{}}}],["sort",{"_index":385,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["sort(sortconditions",{"_index":409,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["sortconditions",{"_index":378,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["sorted",{"_index":860,"title":{},"body":{"properties.html":{}}}],["sortobj",{"_index":439,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{}}}],["specific",{"_index":523,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{}}}],["specified",{"_index":751,"title":{},"body":{"miscellaneous/functions.html":{}}}],["split",{"_index":752,"title":{},"body":{"miscellaneous/functions.html":{}}}],["splits",{"_index":748,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../evaluate",{"_index":893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../get",{"_index":745,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../helper.ts",{"_index":744,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../is",{"_index":894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../lru",{"_index":891,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../memoz",{"_index":746,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../types.ts",{"_index":890,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/constants/memoz",{"_index":700,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/memoz.ts",{"_index":706,"title":{},"body":{"coverage.html":{}}}],["src/types.ts",{"_index":266,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/utils/evaluate",{"_index":711,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/get",{"_index":369,"title":{},"body":{"classes/QueryBuilder.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/utils/helper.ts",{"_index":724,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/index",{"_index":6,"title":{},"body":{"classes/IndexManager.html":{},"coverage.html":{}}}],["src/utils/indexing.ts",{"_index":68,"title":{},"body":{"classes/Indexing.html":{},"coverage.html":{}}}],["src/utils/indexing.ts:13",{"_index":77,"title":{},"body":{"classes/Indexing.html":{}}}],["src/utils/indexing.ts:21",{"_index":85,"title":{},"body":{"classes/Indexing.html":{}}}],["src/utils/indexing.ts:31",{"_index":83,"title":{},"body":{"classes/Indexing.html":{}}}],["src/utils/indexing.ts:36",{"_index":81,"title":{},"body":{"classes/Indexing.html":{}}}],["src/utils/indexing.ts:4",{"_index":75,"title":{},"body":{"classes/Indexing.html":{}}}],["src/utils/indexing.ts:6",{"_index":74,"title":{},"body":{"classes/Indexing.html":{}}}],["src/utils/is",{"_index":728,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/lru",{"_index":112,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/utils/memoz",{"_index":734,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/mutex.ts",{"_index":297,"title":{},"body":{"classes/Mutex.html":{},"coverage.html":{}}}],["src/utils/mutex.ts:2",{"_index":300,"title":{},"body":{"classes/Mutex.html":{}}}],["src/utils/mutex.ts:4",{"_index":302,"title":{},"body":{"classes/Mutex.html":{}}}],["src/utils/persistence",{"_index":322,"title":{},"body":{"classes/PersistenceManager.html":{},"coverage.html":{}}}],["src/utils/query",{"_index":480,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"coverage.html":{}}}],["src/utils/shared.ts",{"_index":540,"title":{},"body":{"classes/Shard.html":{},"coverage.html":{}}}],["src/utils/shared.ts:14",{"_index":553,"title":{},"body":{"classes/Shard.html":{}}}],["src/utils/shared.ts:19",{"_index":555,"title":{},"body":{"classes/Shard.html":{}}}],["src/utils/shared.ts:33",{"_index":552,"title":{},"body":{"classes/Shard.html":{}}}],["src/utils/shared.ts:37",{"_index":550,"title":{},"body":{"classes/Shard.html":{}}}],["src/utils/shared.ts:45",{"_index":548,"title":{},"body":{"classes/Shard.html":{}}}],["src/utils/shared.ts:6",{"_index":545,"title":{},"body":{"classes/Shard.html":{}}}],["src/utils/shared.ts:9",{"_index":547,"title":{},"body":{"classes/Shard.html":{}}}],["src/utils/transaction",{"_index":571,"title":{},"body":{"classes/TransactionManager.html":{},"coverage.html":{}}}],["startcleanup",{"_index":133,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["started",{"_index":607,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["state",{"_index":588,"title":{},"body":{"classes/TransactionManager.html":{}}}],["statements",{"_index":699,"title":{},"body":{"coverage.html":{}}}],["statistics",{"_index":506,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["stayalive",{"_index":122,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["stopcleanup",{"_index":134,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["storage",{"_index":875,"title":{},"body":{"properties.html":{}}}],["storagepath",{"_index":268,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"index.html":{}}}],["stores",{"_index":528,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["strategy",{"_index":231,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["streams",{"_index":862,"title":{},"body":{"properties.html":{}}}],["strict",{"_index":282,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["string",{"_index":37,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["string(doc[field",{"_index":565,"title":{},"body":{"classes/Shard.html":{}}}],["strings",{"_index":857,"title":{},"body":{"properties.html":{}}}],["string|undefined",{"_index":335,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["structure",{"_index":866,"title":{},"body":{"properties.html":{}}}],["subject",{"_index":815,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":808,"title":{},"body":{"license.html":{}}}],["subnode",{"_index":904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["substantial",{"_index":822,"title":{},"body":{"license.html":{}}}],["supported",{"_index":856,"title":{},"body":{"properties.html":{}}}],["supports",{"_index":521,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"index.html":{}}}],["switch",{"_index":898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["symbol.tostringtag",{"_index":454,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["t",{"_index":288,"title":{},"body":{"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":741,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":740,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":586,"title":{},"body":{"classes/TransactionManager.html":{}}}],["template",{"_index":757,"title":{},"body":{"miscellaneous/functions.html":{}}}],["temporary",{"_index":596,"title":{},"body":{"classes/TransactionManager.html":{}}}],["ternaries",{"_index":242,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["testing",{"_index":695,"title":{},"body":{"changelog.html":{}}}],["tests",{"_index":693,"title":{},"body":{"changelog.html":{}}}],["then(onfulfilled",{"_index":411,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.cache",{"_index":534,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["this.cache.clear",{"_index":249,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["this.cache.delete(key",{"_index":211,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["this.cache.delete(oldestkey",{"_index":237,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.cache.get(key",{"_index":220,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["this.cache.get(oldestkey",{"_index":236,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.cache.has(key",{"_index":225,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.cache.keys().next().value",{"_index":232,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.cache.keys()].shift",{"_index":234,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.cache.set(key",{"_index":248,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["this.cache.size",{"_index":226,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.cachehits",{"_index":535,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["this.cachemisses",{"_index":536,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["this.cleanupexpiredentries",{"_index":218,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.cleanupinterval",{"_index":215,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.cleanuptimer",{"_index":216,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.db",{"_index":337,"title":{},"body":{"classes/PersistenceManager.html":{},"classes/TransactionManager.html":{}}}],["this.db.clear",{"_index":363,"title":{},"body":{"classes/PersistenceManager.html":{},"classes/Shard.html":{}}}],["this.db.delete(id",{"_index":569,"title":{},"body":{"classes/Shard.html":{}}}],["this.db.get(id",{"_index":568,"title":{},"body":{"classes/Shard.html":{}}}],["this.db.set(doc.id",{"_index":558,"title":{},"body":{"classes/Shard.html":{}}}],["this.db.set(key",{"_index":366,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["this.dbsnapshot",{"_index":592,"title":{},"body":{"classes/TransactionManager.html":{}}}],["this.entries",{"_index":254,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.evictionstrategy",{"_index":229,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.exec().catch(onrejected",{"_index":451,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.exec().finally(onfinally",{"_index":452,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.exec().then(onfulfilled",{"_index":450,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.fields",{"_index":86,"title":{},"body":{"classes/Indexing.html":{}}}],["this.fields.map((field",{"_index":102,"title":{},"body":{"classes/Indexing.html":{}}}],["this.filepath",{"_index":338,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["this.get(key",{"_index":261,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.getdocuments().foreach((doc",{"_index":564,"title":{},"body":{"classes/Shard.html":{}}}],["this.getindex(object.keys(query",{"_index":57,"title":{},"body":{"classes/IndexManager.html":{}}}],["this.getkey(document",{"_index":89,"title":{},"body":{"classes/Indexing.html":{}}}],["this.getkey(query",{"_index":97,"title":{},"body":{"classes/Indexing.html":{}}}],["this.hitcount",{"_index":223,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.index",{"_index":87,"title":{},"body":{"classes/Indexing.html":{}}}],["this.index.delete(key",{"_index":96,"title":{},"body":{"classes/Indexing.html":{}}}],["this.index.get(key",{"_index":98,"title":{},"body":{"classes/Indexing.html":{}}}],["this.index.get(key)!.add(document.id",{"_index":92,"title":{},"body":{"classes/Indexing.html":{}}}],["this.index.get(key)!.delete(document.id",{"_index":93,"title":{},"body":{"classes/Indexing.html":{}}}],["this.index.get(key)!.size",{"_index":94,"title":{},"body":{"classes/Indexing.html":{}}}],["this.index.has(key",{"_index":90,"title":{},"body":{"classes/Indexing.html":{}}}],["this.index.set(key",{"_index":91,"title":{},"body":{"classes/Indexing.html":{}}}],["this.indexes.clear",{"_index":66,"title":{},"body":{"classes/IndexManager.html":{}}}],["this.indexes.foreach((index",{"_index":50,"title":{},"body":{"classes/IndexManager.html":{}}}],["this.indexes.get(fields.join('_",{"_index":53,"title":{},"body":{"classes/IndexManager.html":{}}}],["this.isexpired(entry",{"_index":222,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.limitcount",{"_index":433,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.maxsize",{"_index":227,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.misscount",{"_index":221,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.mutex",{"_index":317,"title":{},"body":{"classes/Mutex.html":{}}}],["this.mutex.then",{"_index":313,"title":{},"body":{"classes/Mutex.html":{}}}],["this.onevict",{"_index":212,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.onevict(key",{"_index":213,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.onevict(oldestkey",{"_index":238,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.persisttodisk",{"_index":341,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["this.querycache",{"_index":423,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.querycache.set(this.querykey",{"_index":448,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.querykey",{"_index":424,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.reorder(key",{"_index":224,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.resolveresult",{"_index":435,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.result",{"_index":422,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.result.slice(this.skipcount",{"_index":447,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.result.sort((a",{"_index":437,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.resultpromise",{"_index":421,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.set(key",{"_index":258,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["this.skipcount",{"_index":432,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.sortconditions",{"_index":431,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.sortconditions.length",{"_index":436,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.sortconditions.reduce((acc",{"_index":438,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["this.transactiondb",{"_index":583,"title":{},"body":{"classes/TransactionManager.html":{}}}],["this.ttl",{"_index":247,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["thread",{"_index":779,"title":{},"body":{"index.html":{}}}],["throw",{"_index":106,"title":{},"body":{"classes/Indexing.html":{},"classes/TransactionManager.html":{}}}],["timestamp",{"_index":758,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tort",{"_index":844,"title":{},"body":{"license.html":{}}}],["total",{"_index":259,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["tracks",{"_index":497,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["transaction",{"_index":590,"title":{},"body":{"classes/TransactionManager.html":{},"properties.html":{}}}],["transactiondb",{"_index":573,"title":{},"body":{"classes/TransactionManager.html":{}}}],["transactionmanager",{"_index":570,"title":{"classes/TransactionManager.html":{}},"body":{"classes/TransactionManager.html":{},"coverage.html":{}}}],["tresult",{"_index":398,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["tresult1",{"_index":413,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["tresult2",{"_index":414,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["true",{"_index":250,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/PersistenceManager.html":{},"index.html":{}}}],["ttl",{"_index":123,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["type",{"_index":18,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":888,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":464,"title":{},"body":{"classes/QueryBuilder.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":48,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}}}],["typescript",{"_index":876,"title":{},"body":{"properties.html":{}}}],["typing",{"_index":283,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["undef",{"_index":205,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["undefined",{"_index":41,"title":{},"body":{"classes/IndexManager.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"miscellaneous/variables.html":{}}}],["unit",{"_index":694,"title":{},"body":{"changelog.html":{}}}],["unknown",{"_index":917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unrecognized",{"_index":478,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["update",{"_index":314,"title":{},"body":{"classes/Mutex.html":{},"changelog.html":{}}}],["updated",{"_index":293,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{}}}],["updateindexes",{"_index":17,"title":{},"body":{"classes/IndexManager.html":{}}}],["updateindexes(doc",{"_index":42,"title":{},"body":{"classes/IndexManager.html":{}}}],["updatemanyresult",{"_index":292,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"miscellaneous/typealiases.html":{}}}],["updates",{"_index":520,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{}}}],["usage",{"_index":770,"title":{},"body":{"index.html":{}}}],["use",{"_index":453,"title":{},"body":{"classes/QueryBuilder.html":{},"index.html":{},"license.html":{}}}],["usemutex",{"_index":269,"title":{},"body":{"interfaces/MemozOptions.html":{},"interfaces/SimpleCondition.html":{},"index.html":{}}}],["user",{"_index":557,"title":{},"body":{"classes/Shard.html":{}}}],["using",{"_index":243,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["utf8",{"_index":361,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["v",{"_index":169,"title":{},"body":{"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{}}}],["valid",{"_index":731,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["value",{"_index":22,"title":{},"body":{"classes/IndexManager.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"interfaces/MemozOptions.html":{},"classes/Mutex.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"interfaces/SimpleCondition.html":{},"classes/TransactionManager.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["value.apply(target",{"_index":466,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["values",{"_index":530,"title":{},"body":{"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"properties.html":{}}}],["variable",{"_index":702,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":892,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":853,"title":{},"body":{"properties.html":{}}}],["void",{"_index":45,"title":{},"body":{"classes/IndexManager.html":{},"classes/Indexing.html":{},"classes/LRUCache.html":{},"interfaces/LRUCacheOptions.html":{},"classes/Mutex.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{},"interfaces/QueryCacheOptions.html":{},"classes/Shard.html":{},"classes/TransactionManager.html":{}}}],["wait",{"_index":306,"title":{},"body":{"classes/Mutex.html":{},"classes/QueryBuilder.html":{}}}],["warranties",{"_index":829,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":824,"title":{},"body":{"license.html":{}}}],["whether",{"_index":426,"title":{},"body":{"classes/QueryBuilder.html":{},"index.html":{},"license.html":{}}}],["without",{"_index":799,"title":{},"body":{"license.html":{}}}],["works",{"_index":472,"title":{},"body":{"classes/QueryBuilder.html":{}}}],["writestream",{"_index":346,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["writestream.end",{"_index":349,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["writestream.write(json.stringify(array.from(this.db.entries",{"_index":348,"title":{},"body":{"classes/PersistenceManager.html":{}}}],["xxxx",{"_index":935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["xxxxxxxx",{"_index":934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["xxxxxxxxxxxx",{"_index":938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yarn",{"_index":773,"title":{},"body":{"index.html":{}}}],["yes",{"_index":185,"title":{},"body":{"classes/LRUCache.html":{},"classes/PersistenceManager.html":{},"classes/QueryBuilder.html":{},"classes/QueryCache.html":{}}}],["yxxx",{"_index":937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z0",{"_index":932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["za",{"_index":931,"title":{},"body":{"miscellaneous/variables.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/IndexManager.html":{"url":"classes/IndexManager.html","title":"class - IndexManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IndexManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/index-manager.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                indexes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                getFromIndex\n                            \n                            \n                                    Public\n                                getIndex\n                            \n                            \n                                    Public\n                                updateIndexes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        indexes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/utils/index-manager.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clear\n                        \n                    \n                \n            \n            \n                \n                        \n                    clear()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/index-manager.ts:31\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getFromIndex\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFromIndex(query: any, db: Map>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/index-manager.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                db\n                                            \n                                                        Map>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DocumentWithId[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getIndex\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIndex(fields: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/index-manager.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Indexing | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updateIndexes\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateIndexes(doc: DocumentWithId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/index-manager.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                doc\n                                            \n                                                            DocumentWithId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DocumentWithId, MEMOZID } from '../types';\nimport Indexing from './indexing';\n\nexport class IndexManager {\n  private indexes: Map> = new Map();\n\n  public updateIndexes(doc: DocumentWithId): void {\n    this.indexes.forEach((index) => {\n      index.addDocument(doc);\n    });\n  }\n\n  public getIndex(fields: string[]): Indexing | undefined {\n    return this.indexes.get(fields.join('_'));\n  }\n\n  public getFromIndex(query: any, db: Map>): DocumentWithId[] {\n    const results: Set> = new Set();\n    const index = this.getIndex(Object.keys(query));\n    if (index) {\n      const indexedIds = index.query(query);\n      indexedIds.forEach((id) => {\n        const doc = db.get(id); // Access the db Map passed as an argument\n        if (doc) results.add(doc);\n      });\n    }\n    return [...results];\n  }\n\n  public clear() {\n    return this.indexes.clear();\n  }\n}\n\nexport default IndexManager;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Indexing.html":{"url":"classes/Indexing.html","title":"class - Indexing","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Indexing\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/indexing.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fields\n                            \n                            \n                                    Private\n                                index\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addDocument\n                            \n                            \n                                    Private\n                                getKey\n                            \n                            \n                                    Public\n                                query\n                            \n                            \n                                    Public\n                                removeDocument\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fields: string[])\n                    \n                \n                        \n                            \n                                Defined in src/utils/indexing.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fields\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        fields\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/indexing.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/indexing.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        addDocument\n                        \n                    \n                \n            \n            \n                \n                        \n                    addDocument(document: DocumentWithId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/indexing.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                document\n                                            \n                                                            DocumentWithId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKey(document: DocumentWithId | ConditionNode>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/indexing.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                document\n                                            \n                                                        DocumentWithId | ConditionNode>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        query\n                        \n                    \n                \n            \n            \n                \n                        \n                    query(query: ConditionNode>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/indexing.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            ConditionNode>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Set\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removeDocument\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeDocument(document: DocumentWithId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/indexing.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                document\n                                            \n                                                            DocumentWithId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConditionNode, DocumentWithId, MEMOZID } from '../types';\n\nexport class Indexing {\n  private fields: string[];\n\n  private index: Map>;\n\n  constructor(fields: string[]) {\n    this.fields = fields;\n    this.index = new Map();\n  }\n\n  public addDocument(document: DocumentWithId): void {\n    const key = this.getKey(document);\n    if (!this.index.has(key)) {\n      this.index.set(key, new Set());\n    }\n      this.index.get(key)!.add(document.id);\n  }\n\n  public removeDocument(document: DocumentWithId): void {\n    const key = this.getKey(document);\n    if (this.index.has(key)) {\n        this.index.get(key)!.delete(document.id);\n        if (this.index.get(key)!.size === 0) {\n          this.index.delete(key);\n        }\n    }\n  }\n\n  public query(query: ConditionNode>): Set {\n    const key = this.getKey(query);\n    return this.index.has(key) ? this.index.get(key)! : new Set();\n  }\n\n  private getKey(document: DocumentWithId | ConditionNode>): string {\n    if ('id' in document) { // Check if document has an 'id' property\n      return this.fields.map((field: string) => document[field]).join('_');\n    }\n    // Handle the case where document is a ConditionNode type\n    // (you might throw an error, return an empty string, or handle it differently)\n    throw new Error('Unexpected document type for indexing');\n  }\n}\n\nexport default Indexing;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LRUCache.html":{"url":"classes/LRUCache.html","title":"class - LRUCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LRUCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/lru-cache.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                cache\n                            \n                            \n                                    Private\n                                cleanupInterval\n                            \n                            \n                                    Private\n                                    Optional\n                                cleanupTimer\n                            \n                            \n                                    Private\n                                evictionStrategy\n                            \n                            \n                                    Private\n                                hitCount\n                            \n                            \n                                    Private\n                                maxSize\n                            \n                            \n                                    Private\n                                missCount\n                            \n                            \n                                    Private\n                                    Optional\n                                onEvict\n                            \n                            \n                                    Private\n                                    Optional\n                                stayAlive\n                            \n                            \n                                    Private\n                                    Optional\n                                ttl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                cleanupExpiredEntries\n                            \n                            \n                                clear\n                            \n                            \n                                delete\n                            \n                            \n                                deserialize\n                            \n                            \n                                entries\n                            \n                            \n                                get\n                            \n                            \n                                    Async\n                                getAsync\n                            \n                            \n                                has\n                            \n                            \n                                    Private\n                                isExpired\n                            \n                            \n                                    Private\n                                reorder\n                            \n                            \n                                serialize\n                            \n                            \n                                set\n                            \n                            \n                                    Private\n                                startCleanup\n                            \n                            \n                                stopCleanup\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    size\n                                \n                                \n                                    hitRate\n                                \n                                \n                                    missRate\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options: LRUCacheOptions)\n                    \n                \n                        \n                            \n                                Defined in src/utils/lru-cache.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        LRUCacheOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cache\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cleanupInterval\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 60000\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        cleanupTimer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     NodeJS.Timeout\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        evictionStrategy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EvictionStrategy\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hitCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        maxSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        missCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        onEvict\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        stayAlive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        ttl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/lru-cache.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cleanupExpiredEntries\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanupExpiredEntries()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:147\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(key: K)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:143\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(serializedCache: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:178\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                serializedCache\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n            \n                \nentries()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:167\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Array<>\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(key: K)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     V | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAsync\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAsync(key: K, fetchFn: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:196\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fetchFn\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has\n                        \n                    \n                \n            \n            \n                \nhas(key: K)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:155\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isExpired\n                        \n                    \n                \n            \n            \n                \n                        \n                    isExpired(entry: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entry\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        reorder\n                        \n                    \n                \n            \n            \n                \n                        \n                    reorder(key: K)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:173\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(key: K, value: V, ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                        V\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        startCleanup\n                        \n                    \n                \n            \n            \n                \n                        \n                    startCleanup()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:79\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stopCleanup\n                        \n                    \n                \n            \n            \n                \nstopCleanup()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/lru-cache.ts:85\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        size\n                    \n                \n\n                \n                    \n                        getsize()\n                    \n                \n                            \n                                \n                                    Defined in src/utils/lru-cache.ts:151\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        hitRate\n                    \n                \n\n                \n                    \n                        gethitRate()\n                    \n                \n                            \n                                \n                                    Defined in src/utils/lru-cache.ts:186\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        missRate\n                    \n                \n\n                \n                    \n                        getmissRate()\n                    \n                \n                            \n                                \n                                    Defined in src/utils/lru-cache.ts:191\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        type EvictionStrategy = 'LRU' | 'FIFO';\n\nexport interface LRUCacheOptions {\n    maxSize: number;\n    ttl?: number;\n    onEvict?: (key: K, value: V) => void;\n    evictionStrategy?: EvictionStrategy;\n    stayAlive?: boolean;\n}\nexport class LRUCache {\n  private cache: Map = new Map();\n\n  private maxSize: number;\n\n  private ttl?: number;\n\n  private onEvict?: (key: K, value: V) => void;\n\n  private evictionStrategy: EvictionStrategy;\n\n  private stayAlive?: boolean;\n\n  private hitCount: number = 0;\n\n  private missCount: number = 0;\n\n  private cleanupInterval: number = 60000; // 1 minute cleanup interval\n\n  // eslint-disable-next-line no-undef\n  private cleanupTimer?: NodeJS.Timeout;\n\n  constructor(options: LRUCacheOptions) {\n    const {\n      maxSize,\n      ttl, onEvict,\n      evictionStrategy = 'LRU',\n      stayAlive = false,\n    } = options;\n\n    if (maxSize  entry.expiry;\n  }\n\n  private cleanupExpiredEntries(): void {\n    const now = performance.now();\n    Array.from(this.cache.entries()).forEach(([key, entry]) => {\n      if (entry.expiry !== undefined && now > entry.expiry) {\n        this.cache.delete(key);\n        if (this.onEvict) {\n          this.onEvict(key, entry.value);\n        }\n      }\n    });\n  }\n\n  private startCleanup(): void {\n    if (this.cleanupInterval) {\n      this.cleanupTimer = setInterval(() => this.cleanupExpiredEntries(), this.cleanupInterval);\n    }\n  }\n\n  stopCleanup(): void {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n    }\n  }\n\n  get(key: K): V | undefined {\n    const entry = this.cache.get(key);\n    if (!entry) {\n      this.missCount += 1;\n      return undefined;\n    }\n\n    if (this.isExpired(entry)) {\n      this.cache.delete(key);\n      this.missCount += 1;\n      return undefined;\n    }\n\n    this.hitCount += 1;\n    this.reorder(key);\n    return entry.value;\n  }\n\n  set(key: K, value: V, ttl?: number): void {\n    if (this.cache.has(key)) {\n      this.reorder(key);\n    } else if (this.cache.size === this.maxSize) {\n      let oldestKey: K | undefined;\n\n      if (this.evictionStrategy === 'LRU') {\n        // Get the first key for LRU strategy\n        oldestKey = this.cache.keys().next().value;\n      } else if (this.evictionStrategy === 'FIFO') {\n        // Get the oldest key for FIFO strategy\n        oldestKey = [...this.cache.keys()].shift();\n      }\n\n      if (oldestKey !== undefined) {\n        const oldestEntry = this.cache.get(oldestKey);\n        this.cache.delete(oldestKey);\n        if (this.onEvict && oldestEntry) {\n          this.onEvict(oldestKey, oldestEntry.value);\n        }\n      }\n    }\n\n    // Avoid nested ternaries by using simple conditionals\n    let expiry: number | undefined;\n    if (ttl !== undefined) {\n      expiry = performance.now() + ttl;\n    } else if (this.ttl !== undefined) {\n      expiry = performance.now() + this.ttl;\n    }\n\n    this.cache.set(key, { value, expiry });\n  }\n\n  delete(key: K): boolean {\n    return this.cache.delete(key);\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n\n  get size(): number {\n    return this.cache.size;\n  }\n\n  has(key: K): boolean {\n    const entry = this.cache.get(key);\n    if (!entry) return false;\n\n    if (this.isExpired(entry)) {\n      this.cache.delete(key);\n      return false;\n    }\n\n    return true;\n  }\n\n  entries(): Array {\n    return Array.from(this.cache.entries())\n      .filter(([, entry]) => !this.isExpired(entry))\n      .map(([key, entry]) => [key, entry.value]);\n  }\n\n  serialize(): string {\n    const entries = this.entries();\n    return JSON.stringify(entries);\n  }\n\n  deserialize(serializedCache: string): void {\n    const entries: [K, V][] = JSON.parse(serializedCache);\n    this.cache.clear();\n    entries.forEach(([key, value]) => {\n      this.set(key, value);\n    });\n  }\n\n  get hitRate(): number {\n    const total = this.hitCount + this.missCount;\n    return total === 0 ? 0 : this.hitCount / total;\n  }\n\n  get missRate(): number {\n    const total = this.hitCount + this.missCount;\n    return total === 0 ? 0 : this.missCount / total;\n  }\n\n  async getAsync(key: K, fetchFn: () => Promise): Promise {\n    const cached = this.get(key);\n    if (cached) {\n      return cached;\n    }\n\n    const result = await fetchFn();\n    this.set(key, result);\n    return result;\n  }\n}\n\nexport default LRUCache;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LRUCacheOptions.html":{"url":"interfaces/LRUCacheOptions.html","title":"interface - LRUCacheOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LRUCacheOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/lru-cache.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            evictionStrategy\n                                        \n                                \n                                \n                                        \n                                            maxSize\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onEvict\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stayAlive\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ttl\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        evictionStrategy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        evictionStrategy:         EvictionStrategy\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EvictionStrategy\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxSize\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onEvict\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onEvict:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stayAlive\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stayAlive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ttl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ttl:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type EvictionStrategy = 'LRU' | 'FIFO';\n\nexport interface LRUCacheOptions {\n    maxSize: number;\n    ttl?: number;\n    onEvict?: (key: K, value: V) => void;\n    evictionStrategy?: EvictionStrategy;\n    stayAlive?: boolean;\n}\nexport class LRUCache {\n  private cache: Map = new Map();\n\n  private maxSize: number;\n\n  private ttl?: number;\n\n  private onEvict?: (key: K, value: V) => void;\n\n  private evictionStrategy: EvictionStrategy;\n\n  private stayAlive?: boolean;\n\n  private hitCount: number = 0;\n\n  private missCount: number = 0;\n\n  private cleanupInterval: number = 60000; // 1 minute cleanup interval\n\n  // eslint-disable-next-line no-undef\n  private cleanupTimer?: NodeJS.Timeout;\n\n  constructor(options: LRUCacheOptions) {\n    const {\n      maxSize,\n      ttl, onEvict,\n      evictionStrategy = 'LRU',\n      stayAlive = false,\n    } = options;\n\n    if (maxSize  entry.expiry;\n  }\n\n  private cleanupExpiredEntries(): void {\n    const now = performance.now();\n    Array.from(this.cache.entries()).forEach(([key, entry]) => {\n      if (entry.expiry !== undefined && now > entry.expiry) {\n        this.cache.delete(key);\n        if (this.onEvict) {\n          this.onEvict(key, entry.value);\n        }\n      }\n    });\n  }\n\n  private startCleanup(): void {\n    if (this.cleanupInterval) {\n      this.cleanupTimer = setInterval(() => this.cleanupExpiredEntries(), this.cleanupInterval);\n    }\n  }\n\n  stopCleanup(): void {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n    }\n  }\n\n  get(key: K): V | undefined {\n    const entry = this.cache.get(key);\n    if (!entry) {\n      this.missCount += 1;\n      return undefined;\n    }\n\n    if (this.isExpired(entry)) {\n      this.cache.delete(key);\n      this.missCount += 1;\n      return undefined;\n    }\n\n    this.hitCount += 1;\n    this.reorder(key);\n    return entry.value;\n  }\n\n  set(key: K, value: V, ttl?: number): void {\n    if (this.cache.has(key)) {\n      this.reorder(key);\n    } else if (this.cache.size === this.maxSize) {\n      let oldestKey: K | undefined;\n\n      if (this.evictionStrategy === 'LRU') {\n        // Get the first key for LRU strategy\n        oldestKey = this.cache.keys().next().value;\n      } else if (this.evictionStrategy === 'FIFO') {\n        // Get the oldest key for FIFO strategy\n        oldestKey = [...this.cache.keys()].shift();\n      }\n\n      if (oldestKey !== undefined) {\n        const oldestEntry = this.cache.get(oldestKey);\n        this.cache.delete(oldestKey);\n        if (this.onEvict && oldestEntry) {\n          this.onEvict(oldestKey, oldestEntry.value);\n        }\n      }\n    }\n\n    // Avoid nested ternaries by using simple conditionals\n    let expiry: number | undefined;\n    if (ttl !== undefined) {\n      expiry = performance.now() + ttl;\n    } else if (this.ttl !== undefined) {\n      expiry = performance.now() + this.ttl;\n    }\n\n    this.cache.set(key, { value, expiry });\n  }\n\n  delete(key: K): boolean {\n    return this.cache.delete(key);\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n\n  get size(): number {\n    return this.cache.size;\n  }\n\n  has(key: K): boolean {\n    const entry = this.cache.get(key);\n    if (!entry) return false;\n\n    if (this.isExpired(entry)) {\n      this.cache.delete(key);\n      return false;\n    }\n\n    return true;\n  }\n\n  entries(): Array {\n    return Array.from(this.cache.entries())\n      .filter(([, entry]) => !this.isExpired(entry))\n      .map(([key, entry]) => [key, entry.value]);\n  }\n\n  serialize(): string {\n    const entries = this.entries();\n    return JSON.stringify(entries);\n  }\n\n  deserialize(serializedCache: string): void {\n    const entries: [K, V][] = JSON.parse(serializedCache);\n    this.cache.clear();\n    entries.forEach(([key, value]) => {\n      this.set(key, value);\n    });\n  }\n\n  get hitRate(): number {\n    const total = this.hitCount + this.missCount;\n    return total === 0 ? 0 : this.hitCount / total;\n  }\n\n  get missRate(): number {\n    const total = this.hitCount + this.missCount;\n    return total === 0 ? 0 : this.missCount / total;\n  }\n\n  async getAsync(key: K, fetchFn: () => Promise): Promise {\n    const cached = this.get(key);\n    if (cached) {\n      return cached;\n    }\n\n    const result = await fetchFn();\n    this.set(key, result);\n    return result;\n  }\n}\n\nexport default LRUCache;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MemozOptions.html":{"url":"interfaces/MemozOptions.html","title":"interface - MemozOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MemozOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            persistToDisk\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            storagePath\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            useMutex\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        persistToDisk\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        persistToDisk:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        storagePath\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        storagePath:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useMutex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useMutex:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type ComparisonOperator = '$eq' | '$neq' | '$gt' | '$gte' | '$lt' | '$lte' | '$in' | '$nin' | 'custom';\nexport type MEMOZID = string & { __brand__: 'MEMOZID' }; // You can enhance this with more strict MEMOZID typing if desired\n\nexport interface SimpleCondition {\n  field: keyof T;\n  operator: ComparisonOperator;\n  value: any;\n  customCompare?: (a: any, b: any) => boolean;\n}\n\nexport type ConditionNode =\n  | { $and: ConditionNode[] }\n  | { $or: ConditionNode[] }\n  | SimpleCondition;\n\nexport type DocumentWithId = T & { id: MEMOZID; } & { [key: string]: any; };\nexport type UpdateManyResult = { updated: boolean; n: number; documents: DocumentWithId[] };\n\nexport interface MemozOptions {\n    storagePath?: string;\n    persistToDisk?: boolean;\n    useMutex?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Mutex.html":{"url":"classes/Mutex.html","title":"class - Mutex","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Mutex\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/mutex.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                mutex\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                lock\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mutex\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Promise\n\n                    \n                \n                \n                    \n                        Default value : Promise.resolve()\n                    \n                \n                    \n                        \n                                Defined in src/utils/mutex.ts:2\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        lock\n                        \n                    \n                \n            \n            \n                \n                        \n                    lock(callback: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/mutex.ts:4\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                callback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Mutex {\n  private mutex: Promise = Promise.resolve();\n\n  public lock(callback: () => T | Promise): Promise {\n    // Locking mechanism: Wait for the current mutex chain to resolve,\n    // then run the callback and capture its result\n    const resultPromise = this.mutex.then(() => callback());\n\n    // Update the mutex to wait for the current operation to finish\n    this.mutex = resultPromise.then(() => undefined, () => undefined);\n\n    // Return the result of the callback, so the caller gets its value\n    return resultPromise;\n  }\n}\nexport default Mutex;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PersistenceManager.html":{"url":"classes/PersistenceManager.html","title":"class - PersistenceManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PersistenceManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/persistence-manager.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                db\n                            \n                            \n                                    Private\n                                filePath\n                            \n                            \n                                    Private\n                                persistToDisk\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                loadFromDisk\n                            \n                            \n                                    Public\n                                    Async\n                                saveToDisk\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(db: Map>, filePath: string | undefined, persistToDisk?: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/utils/persistence-manager.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                    Map>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filePath\n                                                  \n                                                        \n                                                                    string | undefined\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        persistToDisk\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map>\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/persistence-manager.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        filePath\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/persistence-manager.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        persistToDisk\n                        \n                    \n                \n            \n                \n                    \n                        Type :     boolean | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/persistence-manager.ts:11\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        loadFromDisk\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadFromDisk()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/persistence-manager.ts:31\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        saveToDisk\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveToDisk()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/persistence-manager.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import fs, { promises as fsPromises } from 'fs';\nimport path from 'path';\nimport { DocumentWithId, MEMOZID } from '../types';\n\nexport class PersistenceManager {\n  private db: Map>;\n\n  private filePath: string|undefined;\n\n  private persistToDisk: boolean|undefined;\n\n  constructor(db: Map>, filePath: string | undefined, persistToDisk?: boolean) {\n    this.db = db;\n    this.filePath = filePath ? path.resolve(filePath) : './data.json';\n    this.persistToDisk = persistToDisk;\n  }\n\n  public async saveToDisk(): Promise {\n    if (this.persistToDisk && this.filePath) {\n      const dir = path.dirname(this.filePath);\n\n      await fsPromises.mkdir(dir, { recursive: true });\n      const writeStream = fs.createWriteStream(this.filePath);\n\n      writeStream.write(JSON.stringify(Array.from(this.db.entries())));\n      writeStream.end();\n    }\n  }\n\n  public async loadFromDisk(): Promise {\n    // if filePath is provide and node exists create the file\n    if (this.filePath && !fs.existsSync(this.filePath)) {\n      await fsPromises.writeFile(this.filePath, []);\n    }\n\n    if (this.filePath && this.persistToDisk) {\n      // Check if the file exists\n      await fsPromises.access(this.filePath);\n      // Load the file contents\n      const data = await fsPromises.readFile(this.filePath, 'utf8');\n      if (data) {\n        const entries = JSON.parse(data) as [MEMOZID, DocumentWithId][];\n\n        this.db.clear(); // Clear the original Map reference\n        entries.forEach(([key, value]) => {\n          this.db.set(key, value); // Populate the original Map\n        });\n      }\n    }\n  }\n}\n\nexport default PersistenceManager;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryBuilder.html":{"url":"classes/QueryBuilder.html","title":"class - QueryBuilder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryBuilder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/get-many-query-builder.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        PromiseLike\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                limitCount\n                            \n                            \n                                    Private\n                                queryCache\n                            \n                            \n                                    Private\n                                queryKey\n                            \n                            \n                                    Private\n                                result\n                            \n                            \n                                    Private\n                                    Optional\n                                resultPromise\n                            \n                            \n                                    Private\n                                skipCount\n                            \n                            \n                                    Private\n                                sortConditions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                catch\n                            \n                            \n                                    Public\n                                    Async\n                                exec\n                            \n                            \n                                    Public\n                                finally\n                            \n                            \n                                    Public\n                                limit\n                            \n                            \n                                    Private\n                                    Async\n                                resolveResult\n                            \n                            \n                                    Public\n                                skip\n                            \n                            \n                                    Public\n                                sort\n                            \n                            \n                                    Public\n                                then\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(result: DocumentWithId[] | Promise, queryCache: QueryCache, queryKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/utils/get-many-query-builder.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        result\n                                                  \n                                                        \n                                                                        DocumentWithId[] | Promise\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryCache\n                                                  \n                                                        \n                                                                        QueryCache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        limitCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : Number.MAX_SAFE_INTEGER\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        queryCache\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueryCache\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        queryKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        result\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentWithId[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        resultPromise\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Promise\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        skipCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sortConditions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/utils/get-many-query-builder.ts:13\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        catch\n                        \n                    \n                \n            \n            \n                \n                        \n                    catch(onrejected?: (reason?: any) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:86\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    TResult\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                onrejected\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        exec\n                        \n                    \n                \n            \n            \n                \n                        \n                    exec()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:56\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        finally\n                        \n                    \n                \n            \n            \n                \n                        \n                    finally(onfinally?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                onfinally\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        limit\n                        \n                    \n                \n            \n            \n                \n                        \n                    limit(limitCount: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                limitCount\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        resolveResult\n                        \n                    \n                \n            \n            \n                \n                        \n                    resolveResult()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:31\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        skip\n                        \n                    \n                \n            \n            \n                \n                        \n                    skip(skipCount: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                skipCount\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sort\n                        \n                    \n                \n            \n            \n                \n                        \n                    sort(sortConditions?: literal type[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sortConditions\n                                            \n                                                        literal type[]\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        then\n                        \n                    \n                \n            \n            \n                \n                        \n                    then(onfulfilled?: (value?: DocumentWithId[]) => void, onrejected?: (reason?: any) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/get-many-query-builder.ts:79\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    TResult1\n                                    TResult2\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                onfulfilled\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                onrejected\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in src/utils/get-many-query-builder.ts:97\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { DocumentWithId } from '../types';\nimport QueryCache from './query-cache';\n\nexport class QueryBuilder implements PromiseLike[]> {\n  private result: DocumentWithId[] = [];\n\n  private resultPromise?: Promise[]>;\n\n  private queryCache: QueryCache;\n\n  private queryKey: string;\n\n  private sortConditions: Array = [];\n\n  private skipCount: number = 0;\n\n  private limitCount: number = Number.MAX_SAFE_INTEGER;\n\n  constructor(result: DocumentWithId[] | Promise[]>, queryCache: QueryCache, queryKey: string) {\n    // Handle both resolved arrays and promises\n    if (result instanceof Promise) {\n      this.resultPromise = result;\n    } else {\n      this.result = result;\n    }\n    this.queryCache = queryCache;\n    this.queryKey = queryKey;\n  }\n\n  // This function resolves the result whether it's a promise or already an array\n  private async resolveResult(): Promise[]> {\n    if (this.resultPromise) {\n      this.result = await this.resultPromise;\n    }\n    return this.result;\n  }\n\n  public sort(sortConditions?: { [key: string]: 'asc' | 'desc' }[]): this {\n    if (sortConditions) {\n      this.sortConditions = sortConditions;\n    }\n    return this;\n  }\n\n  public skip(skipCount: number): this {\n    this.skipCount = skipCount;\n    return this;\n  }\n\n  public limit(limitCount: number): this {\n    this.limitCount = limitCount;\n    return this;\n  }\n\n  // Execute the query and return the results\n  public async exec(): Promise[]> {\n    await this.resolveResult(); // Wait for the result if it's a promise\n\n    if (this.sortConditions.length > 0) {\n      this.result.sort((a, b) => this.sortConditions.reduce((acc, sortObj) => {\n        if (acc !== 0) return acc;\n\n        return Object.entries(sortObj).reduce((innerAcc, [key, order]) => {\n          if (innerAcc !== 0) return innerAcc;\n\n          if (a[key]  b[key]) return order === 'asc' ? 1 : -1;\n\n          return 0;\n        }, 0);\n      }, 0));\n    }\n\n    const paginatedResult = this.result.slice(this.skipCount, this.skipCount + this.limitCount);\n    this.queryCache.set(this.queryKey, paginatedResult);\n    return paginatedResult;\n  }\n\n  public then[], TResult2 = never>(\n    onfulfilled?: (value: DocumentWithId[]) => TResult1 | PromiseLike,\n    onrejected?: (reason: any) => TResult2 | PromiseLike,\n  ): Promise {\n    return this.exec().then(onfulfilled, onrejected);\n  }\n\n  public catch(\n    onrejected?: (reason: any) => TResult | PromiseLike,\n  ): Promise[] | TResult> {\n    return this.exec().catch(onrejected);\n  }\n\n  public finally(onfinally?: () => void): Promise[]> {\n    return this.exec().finally(onfinally);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  get [Symbol.toStringTag]() {\n    return 'Promise';\n  }\n}\n\nexport function createQueryBuilderProxy(builder: QueryBuilder): QueryBuilder {\n  return new Proxy(builder, {\n    get(target, prop, receiver) {\n      // If accessing a function (like sort, skip, limit) or a known property, return it as normal\n      const value = Reflect.get(target, prop, receiver);\n      if (typeof value === 'function') {\n        return (...args: any[]) => {\n          const result = value.apply(target, args);\n          // If the function returns the QueryBuilder itself (for chaining), continue chaining\n          if (result instanceof QueryBuilder) {\n            return createQueryBuilderProxy(result); // Ensure chaining works with the proxy\n          }\n          return result;\n        };\n      }\n\n      // Handle promise-like behavior\n      if (prop === 'then') {\n        return (...args: any[]) => builder.then(...args);\n      }\n      if (prop === 'catch') {\n        return (onrejected: (reason: any) => any) => builder.exec().catch(onrejected);\n      }\n\n      // Fallback to exec if accessing unrecognized property\n      return builder.exec();\n    },\n  });\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryCache.html":{"url":"classes/QueryCache.html","title":"class - QueryCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/query-cache.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                cache\n                            \n                            \n                                    Private\n                                cacheHits\n                            \n                            \n                                    Private\n                                cacheMisses\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                getStats\n                            \n                            \n                                    Public\n                                invalidate\n                            \n                            \n                                    Public\n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options?: QueryCacheOptions)\n                    \n                \n                        \n                            \n                                Defined in src/utils/query-cache.ts:16\n                            \n                        \n\n                \n                    \n                            Initializes the QueryCache with optional maxSize, TTL, and eviction strategy.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        QueryCacheOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nObject containing maxSize, TTL, and eviction strategy.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cache\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LRUCache\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/query-cache.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cacheHits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/utils/query-cache.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cacheMisses\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/utils/query-cache.ts:16\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/query-cache.ts:37\n                        \n                    \n\n\n            \n                \n                        Retrieves a list of documents by the given key from the cache.\nTracks cache hits and misses.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     [] | undefined\n\n                        \n                            \n                                The array of DocumentWithId associated with the key, or undefined if not found or expired.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/query-cache.ts:74\n                        \n                    \n\n\n            \n                \n                        Returns cache hit/miss statistics.\n\n\n                        \n                            Returns :     literal type\n\n                        \n                            \n                                An object with hit and miss counts.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        invalidate\n                        \n                    \n                \n            \n            \n                \n                        \n                    invalidate(key?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/query-cache.ts:62\n                        \n                    \n\n\n            \n                \n                        Invalidates (removes) a cache entry by key, or clears the entire cache if no key is provided.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional key to remove from the cache. If not provided, the entire cache is cleared.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        set\n                        \n                    \n                \n            \n            \n                \n                        \n                    set(key: string, value: DocumentWithId[], ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/query-cache.ts:54\n                        \n                    \n\n\n            \n                \n                        Adds or updates a list of documents in the cache.\nSupports custom TTL for each entry.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key of the cache entry.\n\n\n                                            \n                                        \n                                        \n                                                value\n                                            \n                                                            DocumentWithId[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe array of DocumentWithId to cache.\n\n\n                                            \n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional TTL for this specific entry, overriding global TTL.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { LRUCache, LRUCacheOptions } from './lru-cache';\nimport { DocumentWithId } from '../types';\n\nexport interface QueryCacheOptions extends LRUCacheOptions[]> {\n    ttl?: number;\n    evictionStrategy?: 'LRU' | 'FIFO';\n}\n\nexport class QueryCache {\n  // Create an LRUCache instance that stores string keys and arrays of DocumentWithId as values\n  private cache: LRUCache[]>;\n\n  // Metrics for cache hits and misses\n  private cacheHits: number = 0;\n\n  private cacheMisses: number = 0;\n\n  /**\n     * Initializes the QueryCache with optional maxSize, TTL, and eviction strategy.\n     * @param options - Object containing maxSize, TTL, and eviction strategy.\n     */\n  constructor(options?: QueryCacheOptions) {\n    const { maxSize = 1000, ttl, evictionStrategy = 'LRU' } = options || {};\n    this.cache = new LRUCache[]>({\n      maxSize,\n      ttl,\n      evictionStrategy,\n    });\n  }\n\n  /**\n     * Retrieves a list of documents by the given key from the cache.\n     * Tracks cache hits and misses.\n     * @param key - The key to retrieve.\n     * @returns The array of DocumentWithId associated with the key, or undefined if not found or expired.\n     */\n  public get(key: string): DocumentWithId[] | undefined {\n    const result = this.cache.get(key);\n    if (result) {\n      this.cacheHits += 1;\n    } else {\n      this.cacheMisses += 1;\n    }\n    return result;\n  }\n\n  /**\n     * Adds or updates a list of documents in the cache.\n     * Supports custom TTL for each entry.\n     * @param key - The key of the cache entry.\n     * @param value - The array of DocumentWithId to cache.\n     * @param ttl - Optional TTL for this specific entry, overriding global TTL.\n     */\n  public set(key: string, value: DocumentWithId[], ttl?: number): void {\n    this.cache.set(key, value, ttl); // Allow custom TTL per entry\n  }\n\n  /**\n     * Invalidates (removes) a cache entry by key, or clears the entire cache if no key is provided.\n     * @param key - Optional key to remove from the cache. If not provided, the entire cache is cleared.\n     */\n  public invalidate(key?: string): void {\n    if (key) {\n      this.cache.delete(key);\n    } else {\n      this.cache.clear();\n    }\n  }\n\n  /**\n     * Returns cache hit/miss statistics.\n     * @returns An object with hit and miss counts.\n     */\n  public getStats(): { hits: number; misses: number } {\n    return {\n      hits: this.cacheHits,\n      misses: this.cacheMisses,\n    };\n  }\n}\n\nexport default QueryCache;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QueryCacheOptions.html":{"url":"interfaces/QueryCacheOptions.html","title":"interface - QueryCacheOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QueryCacheOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/query-cache.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            LRUCacheOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            evictionStrategy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ttl\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        evictionStrategy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        evictionStrategy:     \"LRU\" | \"FIFO\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"LRU\" | \"FIFO\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ttl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ttl:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { LRUCache, LRUCacheOptions } from './lru-cache';\nimport { DocumentWithId } from '../types';\n\nexport interface QueryCacheOptions extends LRUCacheOptions[]> {\n    ttl?: number;\n    evictionStrategy?: 'LRU' | 'FIFO';\n}\n\nexport class QueryCache {\n  // Create an LRUCache instance that stores string keys and arrays of DocumentWithId as values\n  private cache: LRUCache[]>;\n\n  // Metrics for cache hits and misses\n  private cacheHits: number = 0;\n\n  private cacheMisses: number = 0;\n\n  /**\n     * Initializes the QueryCache with optional maxSize, TTL, and eviction strategy.\n     * @param options - Object containing maxSize, TTL, and eviction strategy.\n     */\n  constructor(options?: QueryCacheOptions) {\n    const { maxSize = 1000, ttl, evictionStrategy = 'LRU' } = options || {};\n    this.cache = new LRUCache[]>({\n      maxSize,\n      ttl,\n      evictionStrategy,\n    });\n  }\n\n  /**\n     * Retrieves a list of documents by the given key from the cache.\n     * Tracks cache hits and misses.\n     * @param key - The key to retrieve.\n     * @returns The array of DocumentWithId associated with the key, or undefined if not found or expired.\n     */\n  public get(key: string): DocumentWithId[] | undefined {\n    const result = this.cache.get(key);\n    if (result) {\n      this.cacheHits += 1;\n    } else {\n      this.cacheMisses += 1;\n    }\n    return result;\n  }\n\n  /**\n     * Adds or updates a list of documents in the cache.\n     * Supports custom TTL for each entry.\n     * @param key - The key of the cache entry.\n     * @param value - The array of DocumentWithId to cache.\n     * @param ttl - Optional TTL for this specific entry, overriding global TTL.\n     */\n  public set(key: string, value: DocumentWithId[], ttl?: number): void {\n    this.cache.set(key, value, ttl); // Allow custom TTL per entry\n  }\n\n  /**\n     * Invalidates (removes) a cache entry by key, or clears the entire cache if no key is provided.\n     * @param key - Optional key to remove from the cache. If not provided, the entire cache is cleared.\n     */\n  public invalidate(key?: string): void {\n    if (key) {\n      this.cache.delete(key);\n    } else {\n      this.cache.clear();\n    }\n  }\n\n  /**\n     * Returns cache hit/miss statistics.\n     * @returns An object with hit and miss counts.\n     */\n  public getStats(): { hits: number; misses: number } {\n    return {\n      hits: this.cacheHits,\n      misses: this.cacheMisses,\n    };\n  }\n}\n\nexport default QueryCache;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Shard.html":{"url":"classes/Shard.html","title":"class - Shard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Shard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/shared.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                db\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addDocument\n                            \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                deleteById\n                            \n                            \n                                    Public\n                                getById\n                            \n                            \n                                    Public\n                                getDocuments\n                            \n                            \n                                    Public\n                                partitionDocumentsBy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/utils/shared.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        addDocument\n                        \n                    \n                \n            \n            \n                \n                        \n                    addDocument(doc: DocumentWithId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/shared.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                doc\n                                            \n                                                            DocumentWithId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clear\n                        \n                    \n                \n            \n            \n                \n                        \n                    clear()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/shared.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        deleteById\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/shared.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DocumentWithId | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/shared.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DocumentWithId | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getDocuments\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDocuments()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/shared.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         DocumentWithId[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        partitionDocumentsBy\n                        \n                    \n                \n            \n            \n                \n                        \n                    partitionDocumentsBy(field)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/shared.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                field\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DocumentWithId } from '../types';\n\nexport class Shard {\n  private db: Map> = new Map();\n\n  // Add user to this shard\n  public addDocument(doc: DocumentWithId): void {\n    this.db.set(doc.id, doc);\n  }\n\n  // Get all documents\n  public getDocuments(): DocumentWithId[] {\n    return Array.from(this.db.values());\n  }\n\n  // Partition documents by a specific field, e.g., age\n  public partitionDocumentsBy(field: keyof T): { [key: string]: DocumentWithId[] } {\n    const partitions: { [key: string]: DocumentWithId[] } = {};\n\n    this.getDocuments().forEach((doc) => {\n      const key = String(doc[field]);\n      if (!partitions[key]) {\n        partitions[key] = [];\n      }\n      partitions[key].push(doc);\n    });\n\n    return partitions;\n  }\n\n  public getById(id: string): DocumentWithId | undefined {\n    return this.db.get(id);\n  }\n\n  public deleteById(id: string): DocumentWithId | undefined {\n    const doc = this.db.get(id);\n    if (doc) {\n      this.db.delete(id);\n    }\n    return doc;\n  }\n\n  public clear(): void {\n    this.db.clear();\n  }\n}\n\nexport default Shard;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SimpleCondition.html":{"url":"interfaces/SimpleCondition.html","title":"interface - SimpleCondition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SimpleCondition\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            customCompare\n                                        \n                                \n                                \n                                        \n                                            field\n                                        \n                                \n                                \n                                        \n                                            operator\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        customCompare\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customCompare:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        operator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        operator:         ComparisonOperator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ComparisonOperator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type ComparisonOperator = '$eq' | '$neq' | '$gt' | '$gte' | '$lt' | '$lte' | '$in' | '$nin' | 'custom';\nexport type MEMOZID = string & { __brand__: 'MEMOZID' }; // You can enhance this with more strict MEMOZID typing if desired\n\nexport interface SimpleCondition {\n  field: keyof T;\n  operator: ComparisonOperator;\n  value: any;\n  customCompare?: (a: any, b: any) => boolean;\n}\n\nexport type ConditionNode =\n  | { $and: ConditionNode[] }\n  | { $or: ConditionNode[] }\n  | SimpleCondition;\n\nexport type DocumentWithId = T & { id: MEMOZID; } & { [key: string]: any; };\nexport type UpdateManyResult = { updated: boolean; n: number; documents: DocumentWithId[] };\n\nexport interface MemozOptions {\n    storagePath?: string;\n    persistToDisk?: boolean;\n    useMutex?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TransactionManager.html":{"url":"classes/TransactionManager.html","title":"class - TransactionManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TransactionManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/transaction-manager.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                db\n                            \n                            \n                                    Private\n                                dbSnapshot\n                            \n                            \n                                    Private\n                                transactionDb\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                beginTransaction\n                            \n                            \n                                    Public\n                                commitTransaction\n                            \n                            \n                                    Public\n                                getCurrentDb\n                            \n                            \n                                    Public\n                                rollbackTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(db: Map>)\n                    \n                \n                        \n                            \n                                Defined in src/utils/transaction-manager.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                    Map>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map>\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/transaction-manager.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dbSnapshot\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map> | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/utils/transaction-manager.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        transactionDb\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map> | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/utils/transaction-manager.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        beginTransaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    beginTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/transaction-manager.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commitTransaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    commitTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/transaction-manager.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getCurrentDb\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCurrentDb()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/transaction-manager.ts:47\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Map>\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        rollbackTransaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    rollbackTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/transaction-manager.ts:34\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DocumentWithId, MEMOZID } from '../types';\n\nexport class TransactionManager {\n  private db: Map>;\n\n  private transactionDb: Map> | null = null;\n\n  private dbSnapshot: Map> | null = null;\n\n  constructor(db: Map>) {\n    this.db = db;\n  }\n\n  public beginTransaction(): void {\n    if (this.transactionDb) {\n      throw new Error('Transaction already in progress');\n    }\n    // Take a snapshot of the current state before the transaction begins\n    this.dbSnapshot = new Map(this.db);\n    // Initialize a transaction state, which will hold temporary changes\n    this.transactionDb = new Map(this.db);\n  }\n\n  public commitTransaction(): void {\n    if (!this.transactionDb) {\n      throw new Error('No transaction in progress');\n    }\n    // Apply the changes made in the transaction to the main db\n    this.db = this.transactionDb;\n    this.transactionDb = null;\n    this.dbSnapshot = null; // Clear the snapshot after committing\n  }\n\n  public rollbackTransaction(): void {\n    if (!this.transactionDb) {\n      throw new Error('No transaction in progress');\n    }\n    if (!this.dbSnapshot) {\n      throw new Error('No snapshot available for rollback');\n    }\n    // Restore the original db state from the snapshot\n    this.db = this.dbSnapshot;\n    this.transactionDb = null;\n    this.dbSnapshot = null; // Clear the snapshot after rollback\n  }\n\n  public getCurrentDb(): Map> {\n    return this.transactionDb || this.db;\n  }\n}\n\nexport default TransactionManager;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n3.1.0 (2024-10-08)\n3.0.0 (2024-10-08)\n2.2.0 (2024-09-16)\nContinuous Integration\n\nresolve pipeline (de8a28fa)\n\n2.1.2 (2022-02-19)\nChores\n\nupdate deps (e81eee88)\n\nBug Fixes\n\nupdate docs (ac42869a)\n\nOther Changes\n\nmiladezzat/memoz into gh-pages (ae7913f1)\n\n2.1.1 (2022-02-11)\nChores\n\nupdate deps (75a1f4f1)\n\nDocumentation Changes\n\nupdate docs (4e9d1718)\n\n2.1.0 (2022-02-09)\nChores\n\nupdate docs (2886b372)\n\nNew Features\n\nsetup docs (69b61d8a)\n\n2.0.1 (2021-08-04)\nChores\n\nupdate dpes (dd121257)\nupdate deps (c411d805)\nupdate deps (4173ee67)\n\nDocumentation Changes\n\nupdate js docs (d687504c)\nupdate docs (75a86338)\n\n2.0.0 (2021-07-30)\nNew Features\n\nupdate create method (5d244251)\n\n1.1.3 (2021-07-28)\nChores\n\nupdate package  json and add husky (e9322431)\n\nContinuous Integration\n\nupdate ci (c0bab78d)\n\nRefactors\n\nsetup environment (95dd6d1e)\nupdate some codes (9b8d080d)\n\n1.1.3 (2021-07-28)\nChores\n\nupdate package  json and add husky (e9322431)\n\nContinuous Integration\n\nupdate ci (c0bab78d)\n\nRefactors\n\nsetup environment (95dd6d1e)\nupdate some codes (9b8d080d)\n\n1.1.2 (2021-07-28)\nDocumentation Changes\n\nupdate docs (5bfdc44a)\n\n1.1.1 (2021-07-28)\nBug Fixes\n\nsolve package (5eef46c0)\n\n1.1.0 (2021-07-27)\nChores\n\nupdate package json (029ad1fa)\n\nDocumentation Changes\n\nupdate docs (276f3b47)\n\nNew Features\n\nadd deleteone function (deae21e0)\n\n1.0.0 (2021-07-26)\nDocumentation Changes\n\nupdate docs (76398cb0)\n\nNew Features\n\nupdate memoz methods (85fb8daf)\nsetup (6d760f53)\n\nBug Fixes\n\nsolve some bugs (4079a95a)\n\nTests\n\nadd unit testing (39424c77)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/constants/memoz-id.ts\n            \n            variable\n            MEMOZ_ID_PATTERN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants/memoz-id.ts\n            \n            variable\n            MEMOZ_ID_TEMPLATE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/memoz.ts\n            \n            class\n            Memoz\n            \n                78 %\n                (22/28)\n            \n        \n        \n            \n                \n                src/types.ts\n            \n            interface\n            MemozOptions\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/types.ts\n            \n            interface\n            SimpleCondition\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/utils/evaluate-condition.ts\n            \n            variable\n            evaluateCondition\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/evaluate-node.ts\n            \n            variable\n            evaluateNode\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/get-many-query-builder.ts\n            \n            class\n            QueryBuilder\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/utils/get-many-query-builder.ts\n            \n            function\n            createQueryBuilderProxy\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/get-many.ts\n            \n            variable\n            getMany\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/get-one.ts\n            \n            variable\n            getOne\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/helper.ts\n            \n            function\n            chunkArray\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/index-manager.ts\n            \n            class\n            IndexManager\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/utils/indexing.ts\n            \n            class\n            Indexing\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/utils/is-object.ts\n            \n            variable\n            isObject\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/is-valid-memoz-id.ts\n            \n            variable\n            isValidMemozId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/lru-cache.ts\n            \n            class\n            LRUCache\n            \n                0 %\n                (0/26)\n            \n        \n        \n            \n                \n                src/utils/lru-cache.ts\n            \n            interface\n            LRUCacheOptions\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/utils/memoz-id.ts\n            \n            function\n            memozId\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/mutex.ts\n            \n            class\n            Mutex\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/persistence-manager.ts\n            \n            class\n            PersistenceManager\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/utils/query-cache.ts\n            \n            class\n            QueryCache\n            \n                55 %\n                (5/9)\n            \n        \n        \n            \n                \n                src/utils/query-cache.ts\n            \n            interface\n            QueryCacheOptions\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/shared.ts\n            \n            class\n            Shard\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/utils/transaction-manager.ts\n            \n            class\n            TransactionManager\n            \n                0 %\n                (0/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            chunkArray   (src/.../helper.ts)\n                        \n                        \n                            createQueryBuilderProxy   (src/.../get-many-query-builder.ts)\n                        \n                        \n                            memozId   (src/.../memoz-id.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        chunkArray\n                        \n                    \n                \n            \n            \n                \nchunkArray(array, size: number)\n                \n            \n\n\n\n\n            \n                \n                        Splits an array into smaller chunks of a specified size.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                array\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe array to split into chunks.\n\n\n                                            \n                                        \n                                        \n                                                size\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe size of each chunk.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     [][]\n\n                        \n                            \n                                \nAn array of chunks.\n\n\n                            \n                \n            \n        \n    \n    src/utils/get-many-query-builder.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createQueryBuilderProxy\n                        \n                    \n                \n            \n            \n                \ncreateQueryBuilderProxy(builder: QueryBuilder)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                builder\n                                            \n                                                            QueryBuilder\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         QueryBuilder\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/utils/memoz-id.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        memozId\n                        \n                    \n                \n            \n            \n                \nmemozId()\n                \n            \n\n\n\n\n            \n                \n                        Generates a MEMOZID string based on a template and current timestamp.\n\n\n                        \n                            Returns :         MEMOZID\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nMemoz\n \n\nMemoz is an in-memory database that persists on disk, offering easy CRUD operations with a simple API. it supports document persistence to disk.\n\nMemoz\nInstallation\nUsage\n\n\n\nInstallation\nExample :npm i memoz\n# or\nyarn add memozUsage\nExample :import {Memoz} from 'memoz';\n\ninterface IDocument {\n    name: string;\n    age?: string;\n}\n\nconst memo = new Memoz({\n        persistToDisk: true,  // to allow persist data on disk - default false\n        storagePath: './data' // the location to persist data - default './data'\n        useMutex: true, //  Whether to use a mutex for thread safety - default false\n    });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2021 Milad E. Fahmy\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 3.1.0\n        \n            Description : memoz is an in-memory database that persists on disk. The data model is key-value, but many different kind of values are supported: Strings, Lists, Sets, Sorted Sets, Hashes, Streams, HyperLogLogs, Bitmaps.\n        \n            Keywords : data, structure, database, redis, transaction, pipelining, performance, queue, nodejs, pubsub, backpressure, cache, ram, simple, storage, typescript, in-memory, disk, persist, key-value, string, list, set, sorted-set, hash\n        \n            Homepage : https://60-min-code.github.io/memoz\n        \n            Bugs : https://github.com/miladezzat/memoz/issues\n        \n            Repository : git+https://github.com/miladezzat/memoz.git\n        \n            Author : Milad E. Fahmy  (https://milad-ezzat.vercel.app)\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ComparisonOperator   (src/.../types.ts)\n                        \n                        \n                            ConditionNode   (src/.../types.ts)\n                        \n                        \n                            DocumentWithId   (src/.../types.ts)\n                        \n                        \n                            EvictionStrategy   (src/.../lru-cache.ts)\n                        \n                        \n                            MEMOZID   (src/.../types.ts)\n                        \n                        \n                            UpdateManyResult   (src/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/types.ts\n    \n    \n        \n            \n                \n                    \n                    ComparisonOperator\n                \n            \n            \n                \n                        \"$eq\" | \"$neq\" | \"$gt\" | \"$gte\" | \"$lt\" | \"$lte\" | \"$in\" | \"$nin\" | \"custom\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConditionNode\n                \n            \n            \n                \n                            literal type | literal type | SimpleCondition\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DocumentWithId\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MEMOZID\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateManyResult\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/utils/lru-cache.ts\n    \n    \n        \n            \n                \n                    \n                    EvictionStrategy\n                \n            \n            \n                \n                        \"LRU\" | \"FIFO\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            evaluateCondition   (src/.../evaluate-condition.ts)\n                        \n                        \n                            evaluateNode   (src/.../evaluate-node.ts)\n                        \n                        \n                            getMany   (src/.../get-many.ts)\n                        \n                        \n                            getOne   (src/.../get-one.ts)\n                        \n                        \n                            isObject   (src/.../is-object.ts)\n                        \n                        \n                            isValidMemozId   (src/.../is-valid-memoz-id.ts)\n                        \n                        \n                            MEMOZ_ID_PATTERN   (src/.../memoz-id.ts)\n                        \n                        \n                            MEMOZ_ID_TEMPLATE   (src/.../memoz-id.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/evaluate-condition.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        evaluateCondition\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (datum: T, condition: SimpleCondition): boolean => {\n  const {\n    field, operator, value, customCompare,\n  } = condition;\n\n  if (customCompare) {\n    return customCompare(datum[field], value);\n  }\n\n  switch (operator) {\n    case '$eq':\n      return datum[field] === value;\n    case '$neq':\n      return datum[field] !== value;\n    case '$gt':\n      return datum[field] > value;\n    case '$gte':\n      return datum[field] >= value;\n    case '$lt':\n      return datum[field] \n                    \n                \n\n\n        \n    \n\n    src/utils/evaluate-node.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        evaluateNode\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (datum: T, node: ConditionNode): boolean => {\n  if ('$and' in node) {\n    // AND logic: all conditions must pass\n    return node.$and.every((subNode) => evaluateNode(datum, subNode));\n  }\n  if ('$or' in node) {\n    // OR logic: at least one condition must pass\n    return node.$or.some((subNode) => evaluateNode(datum, subNode));\n  }\n  // Handle simple condition\n  return evaluateCondition(datum, node);\n}\n                    \n                \n\n\n        \n    \n\n    src/utils/get-many.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getMany\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (data: T[], query: ConditionNode): T[] => data.filter((datum) => evaluateNode(datum, query))\n                    \n                \n\n            \n                \n                    Precompile conditions to reduce repeated logic checks and handle early exits more effectively.\n\n                \n            \n\n        \n    \n\n    src/utils/get-one.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getOne\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (data: T[], query: ConditionNode): T | undefined => data.find((datum) => evaluateNode(datum, query))\n                    \n                \n\n            \n                \n                    Precompile conditions to reduce repeated logic checks and handle early exits more effectively.\n\n                \n            \n\n        \n    \n\n    src/utils/is-object.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isObject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (value: unknown): boolean => typeof value === 'object'\n        && value !== null\n        && !Array.isArray(value)\n        && Reflect.ownKeys(value).length > 0\n                    \n                \n\n            \n                \n                    Checks if the provided value is a non-null object with at least one own property (excluding arrays).\n\n                \n            \n\n        \n    \n\n    src/utils/is-valid-memoz-id.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isValidMemozId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (memozId: string): memozId is MEMOZID => memozId.length >= 36 && MEMOZ_ID_PATTERN.test(memozId)\n                    \n                \n\n\n        \n    \n\n    src/constants/memoz-id.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MEMOZ_ID_PATTERN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[A-F\\d]{8}-[A-F\\d]{4}-4[A-F\\d]{3}-[89AB][A-F\\d]{3}-[A-F\\d]{12}-[A-Za-z0-9]{9}$/i\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MEMOZ_ID_TEMPLATE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
